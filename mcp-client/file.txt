Todas as calls(22995)

<java.lang.String, length[], int, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, trim()>
<java.lang.String, trim[], java.lang.String, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], length[], filter>
<java.lang.String, equals[java.lang.Object], boolean, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, "*">
<java.lang.String, trim[], java.lang.String, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, filter>
<java.io.File, exists[], boolean, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, dir>
<SAD, getProperty[], SADNESS, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, Jext>
<java.io.File, isDirectory[], boolean, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, dir>
<SAD, getProperty[], SADNESS, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, Jext>
<FindInFilesHelper, addFile2Vector[java.io.File, java.lang.String[], java.util.Vector], void, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, nothing here>
<SAD, getWildCardMatches[], SADNESS, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, Utilities>
<java.io.File, toString[], java.lang.String, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, dir>
<java.io.File, list[], java.lang.String[], FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, dir>
<java.util.Arrays, asList[java.lang.String[]], java.util.List<java.lang.String>, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, Arrays>
<java.util.Collections, sort[java.util.List<>], void, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, Collections>
<java.util.List, iterator[], java.util.Iterator, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, listList>
<java.util.Iterator, hasNext[], boolean, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, itr>
<java.util.Iterator, next[], java.lang.Object, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, itr>
<java.io.File, isDirectory[], boolean, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, aFile>
<FindInFilesHelper, addFile2Vector[java.lang.String[], java.util.Vector], void, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, nothing here>
<FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, nothing here>
<java.util.Vector, size[], int, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, files>
<java.util.Vector, copyInto[java.lang.Object[]], void, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, files>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, addFile2Vector[java.io.File, java.lang.String[], java.util.Vector], void, null, vect>
<java.io.File, toString[], java.lang.String, FindInFilesHelper, addFile2Vector[java.io.File, java.lang.String[], java.util.Vector], void, null, (new File(dir,strings[i]))>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, addFile2Vector[java.lang.String[], java.util.Vector], void, null, vect>
<java.util.Vector, size[], int, FindInFilesHelper, vector2StringArray[java.util.Vector], java.lang.String[], null, vect>
<java.util.Vector, copyInto[java.lang.Object[]], void, FindInFilesHelper, vector2StringArray[java.util.Vector], java.lang.String[], null, vect>
<FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, FindInFilesHelper, search[java.io.File, java.lang.String, java.lang.String, boolean, boolean, boolean], java.util.Vector, null, nothing here>
<FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], FindInFilesHelper, search[java.io.File, java.lang.String, java.lang.String, boolean, boolean, boolean], java.util.Vector, null, nothing here>
<java.io.PrintStream, println[char[]], void, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, out>
<SAD, getProperty[], SADNESS, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, "on">
<SAD, getProperty[], SADNESS, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, Jext>
<SAD, globToRE[], SADNESS, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, Utilities>
<java.io.PrintStream, println[java.lang.String], void, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, out>
<java.util.Vector, addAll[java.util.Collection], boolean, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, allHits>
<FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, nothing here>
<FindInFilesHelper, getTabSpace[], java.lang.String, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, nothing here>
<java.io.LineNumberReader, readLine[], java.lang.String, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, reader>
<SAD, nextMatch[], SADNESS, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, matcher>
<java.lang.String, toCharArray[], char[], FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, line>
<java.lang.String, length[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, line>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<FindInFilesHelper, replaceTabs[java.lang.String, java.lang.String], java.lang.String, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, nothing here>
<java.io.LineNumberReader, getLineNumber[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, reader>
<java.util.Vector, size[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, insertElementAt[java.lang.Object, int], void, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, size[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.lang.String, indexOf[java.lang.String, int], int, FindInFilesHelper, replaceTabs[java.lang.String, java.lang.String], java.lang.String, null, text>
<java.lang.String, length[], int, FindInFilesHelper, replaceTabs[java.lang.String, java.lang.String], java.lang.String, null, text>
<java.lang.String, substring[int, int], java.lang.String, FindInFilesHelper, replaceTabs[java.lang.String, java.lang.String], java.lang.String, null, text>
<java.lang.Integer, parseInt[java.lang.String], int, FindInFilesHelper, getTabSpace[], java.lang.String, null, Integer>
<SAD, getProperty[], SADNESS, FindInFilesHelper, getTabSpace[], java.lang.String, null, Jext>
<FindInFilesMatch, isHeader[], boolean, FindInFilesMatch, getLineNumber[], long, null, nothing here>
<SAD, addOptionPane[], SADNESS, FindInFilesPlugin, createOptionPanes[OptionsDialog], void, null, optionsDialog>
<SAD, addAction[], SADNESS, FindInFilesPlugin, start[], void, null, Jext>
<SAD, getJextParent[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, add[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, add[], jextFrame>
<SAD, getProperty[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, remove[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, remove[], jextFrame>
<java.util.Vector, add[java.lang.Object], boolean, FindInFilesPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<SAD, loadMenuItem[], SADNESS, FindInFilesPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addJextListener[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, controlPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, comboPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, aLabel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, labelPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, aLabel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, labelPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, aLabel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, labelPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, comboPanel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, pathCombo>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, FindInFiles, FindInFiles[JextFrame], void, null, pathCombo>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, entryPanel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, filterCombo>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, FindInFiles, FindInFiles[JextFrame], void, null, filterCombo>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, entryPanel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, patternCombo>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, FindInFiles, FindInFiles[JextFrame], void, null, patternCombo>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, entryPanel>
<javax.swing.JComboBox, setEditable[boolean], void, FindInFiles, FindInFiles[JextFrame], void, null, pathCombo>
<javax.swing.JComboBox, setEditable[boolean], void, FindInFiles, FindInFiles[JextFrame], void, null, filterCombo>
<javax.swing.JComboBox, setEditable[boolean], void, FindInFiles, FindInFiles[JextFrame], void, null, patternCombo>
<FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, comboPanel>
<SAD, getIcon[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Utilities>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, buttonPanel>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, FindInFiles, FindInFiles[JextFrame], void, null, chooseButton>
<javax.swing.ImageIcon, getIconWidth[], int, FindInFiles, FindInFiles[JextFrame], void, null, openIcon>
<javax.swing.ImageIcon, getIconHeight[], int, FindInFiles, FindInFiles[JextFrame], void, null, openIcon>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, FindInFiles, FindInFiles[JextFrame], void, null, dataList>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, controlPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, checkBoxPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, checkBoxPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindInFiles, FindInFiles[JextFrame], void, null, checkBoxPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, bottomPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, bottomPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, bottomPanel>
<SAD, getProperty[], SADNESS, FindInFiles, FindInFiles[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, bottomPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<FindInFiles, addListeners[], void, FindInFiles, FindInFiles[JextFrame], void, null, nothing here>
<SAD, addActionListener[], SADNESS, FindInFiles, addListeners[], void, null, searchButton>
<java.io.PrintStream, println[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<SAD, setCursorOnWait[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, filterCombo>
<SAD, search[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, FindInFilesHelper>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, pathCombo>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, patternCombo>
<SAD, isSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, subDirChechBox>
<SAD, isSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, ignoreCaseChechBox>
<SAD, isSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, regexChechBox>
<FindInFiles, addHistory[javax.swing.JComboBox], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<FindInFiles, addHistory[javax.swing.JComboBox], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<FindInFiles, addHistory[javax.swing.JComboBox], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.util.Vector, size[], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, data>
<FindInFiles, showStatus[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<FindInFiles, showStatus[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<FindInFiles, showStatus[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.Throwable, getMessage[], java.lang.String, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, iaex>
<FindInFiles, showStatus[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.Throwable, getMessage[], java.lang.String, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, ex>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, ex>
<javax.swing.JList, setListData[java.util.Vector], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, dataList>
<SAD, setCursorOnWait[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, FindInFiles, addListeners[], void, null, chooseButton>
<java.io.PrintStream, println[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<SAD, setCursorOnWait[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getFileChooser[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<javax.swing.JFileChooser, setFileSelectionMode[int], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, chooser>
<javax.swing.JFileChooser, showOpenDialog[java.awt.Component], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, chooser>
<java.io.File, getAbsolutePath[], java.lang.String, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getSelectedFile()>
<javax.swing.JFileChooser, getSelectedFile[], java.io.File, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, getAbsolutePath[], chooser>
<java.io.PrintStream, println[java.lang.String], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<java.io.File, getName[], java.lang.String, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getSelectedFile()>
<javax.swing.JFileChooser, getSelectedFile[], java.io.File, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, getName[], chooser>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, pathCombo>
<javax.swing.JComboBox, setSelectedIndex[int], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, pathCombo>
<SAD, setCursorOnWait[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, FindInFiles, addListeners[], void, null, dataList>
<java.io.PrintStream, println[java.lang.String], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, out>
<java.awt.event.MouseEvent, getClickCount[], int, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JList, locationToIndex[java.awt.Point], int, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, dataList>
<java.awt.event.MouseEvent, getPoint[], java.awt.Point, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<javax.swing.ListModel, getElementAt[int], java.lang.Object, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, getElementAt[int], dataList>
<java.io.PrintStream, println[char[]], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, out>
<SAD, getTextAreas[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, parent>
<java.io.PrintStream, println[char[]], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, out>
<SAD, getFilename[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, match>
<java.io.File, equals[java.lang.Object], boolean, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, targetFile>
<SAD, getFile[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, equals[java.lang.Object], openAreas[i]>
<SAD, isDirty[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, openAreas[i]>
<SAD, setSelectedComponent[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, setSelectedComponent[], parent>
<java.io.PrintStream, println[char[]], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, out>
<SAD, open[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, parent>
<SAD, getFilename[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, match>
<SAD, setCaretPosition[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<SAD, getLineNumber[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, match>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, FindInFiles, addHistory[javax.swing.JComboBox], void, null, combo>
<java.lang.String, length[], int, FindInFiles, addHistory[javax.swing.JComboBox], void, null, trim()>
<java.lang.String, trim[], java.lang.String, FindInFiles, addHistory[javax.swing.JComboBox], void, length[], item>
<javax.swing.JComboBox, removeItem[java.lang.Object], void, FindInFiles, addHistory[javax.swing.JComboBox], void, null, combo>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, FindInFiles, addHistory[javax.swing.JComboBox], void, null, combo>
<javax.swing.JComboBox, setSelectedIndex[int], void, FindInFiles, addHistory[javax.swing.JComboBox], void, null, combo>
<java.io.PrintStream, println[java.lang.String], void, FindInFiles, exit[], void, null, out>
<FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, exit[], void, null, nothing here>
<FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, exit[], void, null, nothing here>
<FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, FindInFiles, exit[], void, null, nothing here>
<FindInFiles, saveProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, exit[], void, null, nothing here>
<FindInFiles, saveProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, exit[], void, null, nothing here>
<FindInFiles, saveProp[javax.swing.JCheckBox, java.lang.String], void, FindInFiles, exit[], void, null, nothing here>
<SAD, repaint[], SADNESS, FindInFiles, exit[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindInFiles, exit[], void, repaint[], parent>
<javax.swing.JComboBox, getItemCount[], int, FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<SAD, setProperty[], SADNESS, FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, null, Jext>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<javax.swing.JComboBox, getItemCount[], int, FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<SAD, unsetProperty[], SADNESS, FindInFiles, saveProp[javax.swing.JComboBox, java.lang.String, int], void, null, Jext>
<SAD, setProperty[], SADNESS, FindInFiles, saveProp[javax.swing.JCheckBox, java.lang.String], void, null, Jext>
<javax.swing.AbstractButton, isSelected[], boolean, FindInFiles, saveProp[javax.swing.JCheckBox, java.lang.String], void, null, checkBox>
<SAD, getProperty[], SADNESS, FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, null, Jext>
<javax.swing.JComboBox, addItem[java.lang.Object], void, FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<javax.swing.JComboBox, getItemCount[], int, FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<javax.swing.JComboBox, setSelectedIndex[int], void, FindInFiles, loadProp[javax.swing.JComboBox, java.lang.String, int], void, null, combo>
<javax.swing.AbstractButton, setSelected[boolean], void, FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, null, checkBox>
<java.lang.String, equals[java.lang.Object], boolean, FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, null, "on">
<SAD, getProperty[], SADNESS, FindInFiles, loadProp[javax.swing.JCheckBox, java.lang.String], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, FindInFiles, jextEventFired[JextEvent], void, null, out>
<SAD, getWhat[], SADNESS, FindInFiles, jextEventFired[JextEvent], void, null, evt>
<FindInFiles, exit[], void, FindInFiles, jextEventFired[JextEvent], void, null, nothing here>
<java.lang.String, length[], int, FindInFiles, showStatus[java.lang.String], void, null, message>
<javax.swing.JLabel, setText[java.lang.String], void, FindInFiles, showStatus[java.lang.String], void, null, statusLabel>
<SAD, isHeader[], SADNESS, FindInFiles.MyCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, match>
<SAD, getFilename[], SADNESS, FindInFiles.MyCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, match>
<SAD, getMatchCount[], SADNESS, FindInFiles.MyCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, match>
<SAD, getLineNumber[], SADNESS, FindInFiles.MyCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, match>
<SAD, getLineText[], SADNESS, FindInFiles.MyCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, match>
<SAD, getProperty[], SADNESS, FindInFilesOptions, FindInFilesOptions[], void, null, Jext>
<javax.swing.JComponent, setFont[java.awt.Font], void, FindInFilesOptions, FindInFilesOptions[], void, null, n>
<SAD, addComponent[], SADNESS, FindInFilesOptions, FindInFilesOptions[], void, null, nothing here>
<SAD, addComponent[], SADNESS, FindInFilesOptions, FindInFilesOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, FindInFilesOptions, FindInFilesOptions[], void, null, Jext>
<javax.swing.AbstractButton, setSelected[boolean], void, FindInFilesOptions, FindInFilesOptions[], void, null, useGlob>
<java.lang.String, equals[java.lang.Object], boolean, FindInFilesOptions, FindInFilesOptions[], void, null, "on">
<SAD, getProperty[], SADNESS, FindInFilesOptions, FindInFilesOptions[], void, null, Jext>
<SAD, setProperty[], SADNESS, FindInFilesOptions, save[], void, null, Jext>
<javax.swing.AbstractButton, isSelected[], boolean, FindInFilesOptions, save[], void, null, useGlob>
<SAD, getBooleanProperty[], SADNESS, Track, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, Track, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, null, out>
<java.util.Vector, addElement[java.lang.Object], void, Track, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, null, keyStrokes>
<java.util.Vector, clear[], void, Track, erase[], void, null, keyStrokes>
<SAD, executeAction[], SADNESS, Track.Command, run[JextTextArea], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, Track.Command, run[JextTextArea], void, executeAction[], jextTextArea>
<java.lang.StringBuffer, toString[], java.lang.String, Track.Command, toString[], java.lang.String, null, append(actionCommand)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Track.Command, toString[], java.lang.String, toString[], append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Track.Command, toString[], java.lang.String, append[java.lang.String], getName())>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Track.Command, toString[], java.lang.String, null, new StringBuffer("Track$Command: ")>
<java.lang.Class, getName[], java.lang.String, Track.Command, toString[], java.lang.String, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends java.awt.event.ActionListener>, Track.Command, toString[], java.lang.String, getName[], listener>
<SAD, addAction[], SADNESS, KeystrokeRecorderPlugin, start[], void, null, Jext>
<SAD, erase[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, aTrack>
<SAD, setMacroRecorder[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, setMacroRecorder[], getNSTextArea()>
<SAD, getNSTextArea[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, getInputHandler[], getJextParent(evt)>
<SAD, getJextParent[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, getNSTextArea[], nothing here>
<SAD, addAction[], SADNESS, KeystrokeRecorderPlugin, start[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<SAD, setMacroRecorder[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, setMacroRecorder[], getNSTextArea()>
<SAD, getNSTextArea[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, getInputHandler[], getJextParent(evt)>
<SAD, getJextParent[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, getNSTextArea[], nothing here>
<SAD, addAction[], SADNESS, KeystrokeRecorderPlugin, start[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<SAD, play[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, aTrack>
<SAD, getNSTextArea[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, null, getJextParent(evt)>
<SAD, getJextParent[], SADNESS, MenuAction, actionPerformed[java.awt.event.ActionEvent], void, getNSTextArea[], nothing here>
<java.util.Vector, addElement[java.lang.Object], void, KeystrokeRecorderPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenus>
<SAD, loadMenu[], SADNESS, KeystrokeRecorderPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addMenu[], SADNESS, PyBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, PyBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addMenu[], parent>
<SAD, loadMenu[], SADNESS, PyBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addMenu[], SADNESS, XMLBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, XMLBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addMenu[], parent>
<SAD, loadMenu[], SADNESS, XMLBrowsePlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<HyperTyperAction, setKeyBinding[java.lang.String], void, HyperTyperAction, HyperTyperAction[HyperTyperMapping], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperAction, HyperTyperAction[HyperTyperMapping], void, null, HyperTyperObjectManager>
<SAD, addKeyBinding[], SADNESS, HyperTyperAction, HyperTyperAction[HyperTyperMapping], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, HyperTyperAction, HyperTyperAction[HyperTyperMapping], void, addKeyBinding[], Jext>
<SAD, getProperty[], SADNESS, HyperTyperAction, HyperTyperAction[HyperTyperMapping], void, null, HyperTyperObjectManager>
<SAD, getProperty[], SADNESS, HyperTyperAction, newFileAdded[JextTextArea], void, null, HyperTyperObjectManager>
<SAD, addKeyBinding[], SADNESS, HyperTyperAction, newFileAdded[JextTextArea], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, HyperTyperAction, newFileAdded[JextTextArea], void, addKeyBinding[], area>
<SAD, setInputAction[], SADNESS, HyperTyperAction, newFileAdded[JextTextArea], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, HyperTyperAction, newFileAdded[JextTextArea], void, setInputAction[], area>
<SAD, getInputHandler[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, Jext>
<SAD, parseKeyStroke[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, ih>
<SAD, parseKeyStroke[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, ih>
<HyperTyperAction, setKeyBinding[java.lang.String], void, HyperTyperAction, setKeyBinding[java.lang.String], void, null, nothing here>
<SAD, setProperty[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, Jext>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, HyperTyperAction, setKeyBinding[java.lang.String], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, HyperTyperObjectManager>
<SAD, getProperty[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, HyperTyperObjectManager>
<HyperTyperAction, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, HyperTyperAction, setKeyBinding[java.lang.String], void, null, nothing here>
<SAD, parseKeyStroke[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, ih>
<HyperTyperAction, removeKeyBinding[java.lang.String], void, HyperTyperAction, setKeyBinding[java.lang.String], void, null, nothing here>
<SAD, getAction[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, ih>
<SAD, setProperty[], SADNESS, HyperTyperAction, setKeyBinding[java.lang.String], void, null, Jext>
<HyperTyperAction, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, HyperTyperAction, setKeyBinding[java.lang.String], void, null, nothing here>
<SAD, getInstances[], SADNESS, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, Jext>
<java.util.ArrayList, size[], int, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, v>
<SAD, getTextAreas[], SADNESS, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, HyperTyperAction, getInputHandlers[], java.util.Iterator, getTextAreas[], v>
<java.util.ArrayList, add[java.lang.Object], boolean, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, areaV>
<SAD, getInputHandler[], SADNESS, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, areas[j]>
<java.util.ArrayList, listIterator[], java.util.ListIterator, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, areaV>
<SAD, getTextArea[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, InputHandler>
<SAD, beginCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getCaretPosition[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getCaretPosition[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getText[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, indexOf[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<java.lang.String, indexOf[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<SAD, endCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, indexOf[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<java.lang.String, indexOf[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<java.lang.String, indexOf[int], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<SAD, getExpandedText[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, htMap>
<java.lang.String, substring[int, int], java.lang.String, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<SAD, beginProtectedCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<java.lang.StringBuffer, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, workBuf>
<java.lang.StringBuffer, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, workBuf>
<java.lang.StringBuffer, setLength[int], void, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, workBuf>
<java.lang.StringBuffer, toString[], java.lang.String, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, workBuf>
<javax.swing.text.Document, remove[int, int], void, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.String, charAt[int], char, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<java.lang.StringBuffer, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<SAD, getEnterIndent[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<java.lang.StringBuffer, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<java.lang.String, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, expanded>
<java.lang.StringBuffer, length[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<javax.swing.text.Document, getLength[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, indent[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, Indent>
<SAD, getCaretLine[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getLength[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<javax.swing.text.Document, getLength[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, indent[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, Indent>
<SAD, getCaretLine[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getLength[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, getLength[], int, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, setCaretPosition[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endProtectedCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, HyperTyperAction, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<javax.swing.JFrame, setIconImage[java.awt.Image], void, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, frame>
<SAD, getJextIconImage[], SADNESS, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, GUIUtilities>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, add[java.lang.String, java.awt.Component], frame>
<HyperTyperWindowGUI, getIntProperty[java.lang.String], int, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<HyperTyperWindowGUI, getIntProperty[java.lang.String], int, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<HyperTyperWindowGUI, getIntProperty[java.lang.String], int, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<HyperTyperWindowGUI, getIntProperty[java.lang.String], int, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Window, setSize[int, int], void, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, frame>
<java.awt.Window, setLocation[int, int], void, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, frame>
<javax.swing.JFrame, setDefaultCloseOperation[int], void, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, frame>
<java.awt.Window, setVisible[boolean], void, HyperTyperWindowGUI, actionPerformed[java.awt.event.ActionEvent], void, null, frame>
<java.awt.Component, getBounds[], java.awt.Rectangle, HyperTyperWindowGUI, shutdown[], void, null, frame>
<SAD, setProperty[], SADNESS, HyperTyperWindowGUI, shutdown[], void, null, Jext>
<SAD, setProperty[], SADNESS, HyperTyperWindowGUI, shutdown[], void, null, Jext>
<SAD, setProperty[], SADNESS, HyperTyperWindowGUI, shutdown[], void, null, Jext>
<SAD, setProperty[], SADNESS, HyperTyperWindowGUI, shutdown[], void, null, Jext>
<java.awt.Window, setVisible[boolean], void, HyperTyperWindowGUI, shutdown[], void, null, frame>
<java.awt.Window, dispose[], void, HyperTyperWindowGUI, shutdown[], void, null, frame>
<SAD, getPersistentGrid[], SADNESS, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, htOMan>
<SAD, getTransientGrid[], SADNESS, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, htOMan>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, jtp>
<SAD, getName[], SADNESS, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, persistentGrid>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, jtp>
<SAD, getName[], SADNESS, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, transientGrid>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperWindowGUI, constructWindow[], javax.swing.JPanel, null, mainPanel>
<SAD, getProperty[], SADNESS, HyperTyperWindowGUI, getIntProperty[java.lang.String], int, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, HyperTyperWindowGUI, getIntProperty[java.lang.String], int, null, Integer>
<java.lang.String, equals[java.lang.Object], boolean, Sequence, equals[java.lang.Object], boolean, null, getShorthand()>
<Sequence, getShorthand[], java.lang.String, Sequence, equals[java.lang.Object], boolean, equals[java.lang.Object], nothing here>
<Sequence, getShorthand[], java.lang.String, Sequence, equals[java.lang.Object], boolean, null, seq>
<java.lang.Object, equals[java.lang.Object], boolean, Sequence, equals[java.lang.Object], boolean, null, o>
<Sequence, getShorthand[], java.lang.String, Sequence, equals[java.lang.Object], boolean, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, HyperTyperPlugin, start[], void, null, "on">
<SAD, getProperty[], SADNESS, HyperTyperPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, HyperTyperPlugin, start[], void, null, Jext>
<SAD, getHotkey[], SADNESS, HyperTyperPlugin, start[], void, null, htOMan>
<SAD, addAction[], SADNESS, HyperTyperPlugin, start[], void, null, Jext>
<SAD, getWindowGUI[], SADNESS, HyperTyperPlugin, start[], void, null, htOMan>
<SAD, stop[], SADNESS, HyperTyperPlugin, stop[], void, null, htOMan>
<SAD, addOptionPane[], SADNESS, HyperTyperPlugin, createOptionPanes[OptionsDialog], void, null, parent>
<SAD, getOptionPane[], SADNESS, HyperTyperPlugin, createOptionPanes[OptionsDialog], void, null, htOMan>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, menus>
<SAD, loadMenu[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addJextListener[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, parent>
<SAD, newFileAdded[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getAction()>
<SAD, getAction[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, newFileAdded[], htOMan>
<SAD, getTextAreas[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, parent>
<SAD, isPropertyOn[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, HyperTyperObjectManager>
<SAD, actionPerformed[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getWindowGUI()>
<SAD, getWindowGUI[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, actionPerformed[], htOMan>
<SAD, isPropertyOn[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, HyperTyperObjectManager>
<SAD, getPersistentGrid[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, htOMan>
<SAD, addTab[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addTab[], parent>
<SAD, getName[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, grid>
<SAD, isPropertyOn[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, HyperTyperObjectManager>
<SAD, getTransientGrid[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, htOMan>
<SAD, addTab[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addTab[], parent>
<SAD, getName[], SADNESS, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, grid>
<SAD, getWhat[], SADNESS, HyperTyperPlugin, jextEventFired[JextEvent], void, null, evt>
<SAD, newFileAdded[], SADNESS, HyperTyperPlugin, jextEventFired[JextEvent], void, null, getAction()>
<SAD, getAction[], SADNESS, HyperTyperPlugin, jextEventFired[JextEvent], void, newFileAdded[], htOMan>
<SAD, getTextArea[], SADNESS, HyperTyperPlugin, jextEventFired[JextEvent], void, null, evt>
<java.lang.String, equals[java.lang.Object], boolean, HyperTyperPlugin, jextEventFired[JextEvent], void, null, "on">
<SAD, getProperty[], SADNESS, HyperTyperPlugin, jextEventFired[JextEvent], void, null, Jext>
<SAD, addSequenceChangedListener[], SADNESS, HyperTyperMapping, HyperTyperMapping[], void, null, persistList>
<SAD, addSequenceChangedListener[], SADNESS, HyperTyperMapping, HyperTyperMapping[], void, null, transientList>
<SAD, save[], SADNESS, HyperTyperMapping, save[], void, null, persistList>
<SAD, save[], SADNESS, HyperTyperMapping, save[], void, null, transientList>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, HyperTyperMapping, getExpandedText[java.lang.String], java.lang.String, null, translateMap>
<SAD, plainToEscape[], SADNESS, HyperTyperMapping, getEscapedExpandedText[java.lang.String], java.lang.String, null, HyperTyperSequenceList>
<HyperTyperMapping, getExpandedText[java.lang.String], java.lang.String, HyperTyperMapping, getEscapedExpandedText[java.lang.String], java.lang.String, null, nothing here>
<SAD, shutdown[], SADNESS, HyperTyperMapping, shutdown[], void, null, persistList>
<SAD, shutdown[], SADNESS, HyperTyperMapping, shutdown[], void, null, transientList>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, HyperTyperMapping, sequenceAdded[SequenceChangedEvent], void, null, translateMap>
<SAD, getShorthand[], SADNESS, HyperTyperMapping, sequenceAdded[SequenceChangedEvent], void, null, seq>
<SAD, escapeToPlain[], SADNESS, HyperTyperMapping, sequenceAdded[SequenceChangedEvent], void, null, HyperTyperSequenceList>
<SAD, getExpanded[], SADNESS, HyperTyperMapping, sequenceAdded[SequenceChangedEvent], void, null, seq>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, HyperTyperMapping, sequenceRemoved[SequenceChangedEvent], void, null, translateMap>
<SAD, getShorthand[], SADNESS, HyperTyperMapping, sequenceRemoved[SequenceChangedEvent], void, null, seq>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getAction[], HyperTyperAction, null, nothing here>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getHotkey[], HyperTyperHotkey, null, nothing here>
<HyperTyperObjectManager, getAction[], HyperTyperAction, HyperTyperObjectManager, getOptionPane[], HyperTyperOption, null, nothing here>
<SAD, getPersistentMappings[], SADNESS, HyperTyperObjectManager, getPersistentGrid[], HyperTyperMappingGrid, null, getMapping()>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getPersistentGrid[], HyperTyperMappingGrid, getPersistentMappings[], nothing here>
<SAD, getTransientMappings[], SADNESS, HyperTyperObjectManager, getPersistentGrid[], HyperTyperMappingGrid, null, getMapping()>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getPersistentGrid[], HyperTyperMappingGrid, getTransientMappings[], nothing here>
<SAD, getTransientMappings[], SADNESS, HyperTyperObjectManager, getTransientGrid[], HyperTyperMappingGrid, null, getMapping()>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getTransientGrid[], HyperTyperMappingGrid, getTransientMappings[], nothing here>
<SAD, getPersistentMappings[], SADNESS, HyperTyperObjectManager, getTransientGrid[], HyperTyperMappingGrid, null, getMapping()>
<HyperTyperObjectManager, getMapping[], HyperTyperMapping, HyperTyperObjectManager, getTransientGrid[], HyperTyperMappingGrid, getPersistentMappings[], nothing here>
<SAD, shutdown[], SADNESS, HyperTyperObjectManager, stop[], void, null, htWindow>
<SAD, shutdown[], SADNESS, HyperTyperObjectManager, stop[], void, null, htMap>
<javax.swing.AbstractButton, isSelected[], boolean, HyperTyperObjectManager, toOnOffString[javax.swing.JCheckBox], java.lang.String, null, cb>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, HyperTyperObjectManager, isPropertyOn[java.lang.String], boolean, null, "on">
<HyperTyperObjectManager, getProperty[java.lang.String], java.lang.String, HyperTyperObjectManager, isPropertyOn[java.lang.String], boolean, null, HyperTyperObjectManager>
<java.lang.String, equals[java.lang.Object], boolean, HyperTyperObjectManager, getProperty[java.lang.String], java.lang.String, null, name>
<java.io.PrintStream, println[java.lang.String], void, HyperTyperObjectManager, getProperty[java.lang.String], java.lang.String, null, out>
<SAD, getProperty[], SADNESS, HyperTyperObjectManager, getProperty[java.lang.String], java.lang.String, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, HyperTyperObjectManager, getProperty[java.lang.String], java.lang.String, null, out>
<HyperTyperOption, construct[], void, HyperTyperOption, HyperTyperOption[HyperTyperAction], void, null, nothing here>
<HyperTyperOption, load[], void, HyperTyperOption, HyperTyperOption[HyperTyperAction], void, null, nothing here>
<SAD, setProperty[], SADNESS, HyperTyperOption, save[], void, null, Jext>
<SAD, toOnOffString[], SADNESS, HyperTyperOption, save[], void, null, HyperTyperObjectManager>
<SAD, setProperty[], SADNESS, HyperTyperOption, save[], void, null, Jext>
<SAD, toOnOffString[], SADNESS, HyperTyperOption, save[], void, null, HyperTyperObjectManager>
<SAD, setProperty[], SADNESS, HyperTyperOption, save[], void, null, Jext>
<SAD, toOnOffString[], SADNESS, HyperTyperOption, save[], void, null, HyperTyperObjectManager>
<SAD, setProperty[], SADNESS, HyperTyperOption, save[], void, null, Jext>
<SAD, toOnOffString[], SADNESS, HyperTyperOption, save[], void, null, HyperTyperObjectManager>
<javax.swing.text.JTextComponent, getText[], java.lang.String, HyperTyperOption, save[], void, null, keyBinding>
<SAD, setKeyBinding[], SADNESS, HyperTyperOption, save[], void, null, htAct>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, addComponent[], SADNESS, HyperTyperOption, construct[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperOption, construct[], void, null, HyperTyperObjectManager>
<SAD, setSelected[], SADNESS, HyperTyperOption, load[], void, null, winAutoStart>
<SAD, isPropertyOn[], SADNESS, HyperTyperOption, load[], void, null, HyperTyperObjectManager>
<SAD, setSelected[], SADNESS, HyperTyperOption, load[], void, null, autoExpand>
<SAD, isPropertyOn[], SADNESS, HyperTyperOption, load[], void, null, HyperTyperObjectManager>
<SAD, setSelected[], SADNESS, HyperTyperOption, load[], void, null, persistTabAutoStart>
<SAD, isPropertyOn[], SADNESS, HyperTyperOption, load[], void, null, HyperTyperObjectManager>
<SAD, setSelected[], SADNESS, HyperTyperOption, load[], void, null, transTabAutoStart>
<SAD, isPropertyOn[], SADNESS, HyperTyperOption, load[], void, null, HyperTyperObjectManager>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, HyperTyperOption, load[], void, null, keyBinding>
<SAD, getProperty[], SADNESS, HyperTyperOption, load[], void, null, HyperTyperObjectManager>
<HyperTyperMappingGrid, construct[], void, HyperTyperMappingGrid, HyperTyperMappingGrid[HyperTyperSequenceList, HyperTyperSequenceList, java.lang.String], void, null, nothing here>
<SAD, addSequenceChangedListener[], SADNESS, HyperTyperMappingGrid, HyperTyperMappingGrid[HyperTyperSequenceList, HyperTyperSequenceList, java.lang.String], void, null, htsl>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, getName[], java.lang.String, null, HyperTyperObjectManager>
<javax.swing.table.AbstractTableModel, fireTableRowsInserted[int, int], void, HyperTyperMappingGrid, sequenceAdded[SequenceChangedEvent], void, null, model>
<javax.swing.table.AbstractTableModel, fireTableRowsDeleted[int, int], void, HyperTyperMappingGrid, sequenceRemoved[SequenceChangedEvent], void, null, model>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, HyperTyperMappingGrid, construct[], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, HyperTyperMappingGrid, construct[], void, null, nothing here>
<javax.swing.BorderFactory, createTitledBorder[java.lang.String], javax.swing.border.TitledBorder, HyperTyperMappingGrid, construct[], void, null, BorderFactory>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, construct[], void, null, HyperTyperObjectManager>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, HyperTyperMappingGrid, construct[], void, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, HyperTyperMappingGrid, construct[], void, setReorderingAllowed[boolean], table>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperMappingGrid, construct[], void, null, panel>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, construct[], void, null, HyperTyperObjectManager>
<SAD, setMnemonic[], SADNESS, HyperTyperMappingGrid, construct[], void, null, jb>
<SAD, charAt[], SADNESS, HyperTyperMappingGrid, construct[], void, null, propertyBase + PROP_DEL_BUTTON_ACCEL)>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, construct[], void, null, HyperTyperObjectManager>
<SAD, addActionListener[], SADNESS, HyperTyperMappingGrid, construct[], void, null, jb>
<javax.swing.JTable, getSelectedRow[], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, table>
<SAD, getSequenceCount[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, getSequenceAt[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, removeMapping[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, getShorthand[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, seq>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperMappingGrid, construct[], void, null, p2>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, construct[], void, null, HyperTyperObjectManager>
<SAD, setMnemonic[], SADNESS, HyperTyperMappingGrid, construct[], void, null, jb>
<SAD, charAt[], SADNESS, HyperTyperMappingGrid, construct[], void, null, propertyBase + PROP_MOVE_BUTTON_ACCEL)>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid, construct[], void, null, HyperTyperObjectManager>
<SAD, addActionListener[], SADNESS, HyperTyperMappingGrid, construct[], void, null, jb>
<javax.swing.JTable, getSelectedRow[], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, table>
<SAD, getSequenceCount[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, getSequenceAt[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, removeMapping[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, htsl>
<SAD, getShorthand[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, seq>
<SAD, addMapping[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, otherList>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperMappingGrid, construct[], void, null, p2>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperMappingGrid, construct[], void, null, panel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperMappingGrid, construct[], void, null, nothing here>
<javax.swing.JTable, getSelectedRow[], int, HyperTyperMappingGrid, getSelectedRow[], int, null, table>
<HyperTyperMappingGrid, getSelectedSequence[], Sequence, HyperTyperMappingGrid, getSelectedShorthand[], java.lang.String, null, nothing here>
<SAD, getShorthand[], SADNESS, HyperTyperMappingGrid, getSelectedShorthand[], java.lang.String, null, getSelectedSequence()>
<HyperTyperMappingGrid, getSelectedSequence[], Sequence, HyperTyperMappingGrid, getSelectedShorthand[], java.lang.String, getShorthand[], nothing here>
<HyperTyperMappingGrid, getSelectedRow[], int, HyperTyperMappingGrid, getSelectedSequence[], Sequence, null, nothing here>
<SAD, getSequenceAt[], SADNESS, HyperTyperMappingGrid, getSelectedSequence[], Sequence, null, htsl>
<SAD, getSequenceCount[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getRowCount[], int, null, htsl>
<SAD, getSequenceCount[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getValueAt[int, int], java.lang.Object, null, htsl>
<SAD, getSequenceCount[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getValueAt[int, int], java.lang.Object, null, htsl>
<SAD, getSequenceAt[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getValueAt[int, int], java.lang.Object, null, htsl>
<SAD, getShorthand[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getValueAt[int, int], java.lang.Object, null, sequence>
<SAD, getExpanded[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getValueAt[int, int], java.lang.Object, null, sequence>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getColumnName[int], java.lang.String, null, HyperTyperObjectManager>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid.TyperTableModel, getColumnName[int], java.lang.String, null, HyperTyperObjectManager>
<java.lang.String, indexOf[int], int, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, val>
<SAD, showError[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, Utilities>
<SAD, getProperty[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, HyperTyperObjectManager>
<SAD, getSequenceCount[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<java.lang.String, length[], int, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, tempShorthand>
<java.lang.String, length[], int, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, tempExpanded>
<SAD, addMapping[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<SAD, getSequenceAt[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<SAD, removeMapping[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<SAD, getShorthand[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, seq>
<java.lang.String, length[], int, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, val>
<SAD, addMapping[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<SAD, getExpanded[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, seq>
<SAD, addMapping[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, htsl>
<SAD, getShorthand[], SADNESS, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, seq>
<javax.swing.table.AbstractTableModel, fireTableRowsUpdated[int, int], void, HyperTyperMappingGrid.TyperTableModel, setValueAt[java.lang.Object, int, int], void, null, nothing here>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<java.lang.String, charAt[int], char, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, str>
<SAD, isAutoExpandOn[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperPlugin>
<java.lang.Character, isLetterOrDigit[char], boolean, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<SAD, indexOf[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, delimiters>
<SAD, actionPerformed[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, getAction()>
<SAD, getAction[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, actionPerformed[], htOMan>
<SAD, getTextArea[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getRepeatCount[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, getRepeatCount[], textArea>
<SAD, isEditable[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, overwriteSetSelectedText[], SADNESS, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, AutoExpander, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, getTextArea[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String], int, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, Integer>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<javax.swing.JTextArea, setFont[java.awt.Font], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, expandedArea>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, fullPanel>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, fullPanel>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<javax.swing.AbstractButton, setActionCommand[java.lang.String], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, useTransient>
<javax.swing.AbstractButton, setSelected[boolean], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, useTransient>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<javax.swing.AbstractButton, setActionCommand[java.lang.String], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, usePersistent>
<javax.swing.ButtonGroup, add[javax.swing.AbstractButton], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, whichIsSelected>
<javax.swing.ButtonGroup, add[javax.swing.AbstractButton], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, whichIsSelected>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, buttonPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, buttonPanel>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, panel>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, panel>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, fullPanel>
<SAD, getSelectedText[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, jta>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, expandedArea>
<java.awt.Component, setSize[java.awt.Dimension], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, scrollArea>
<javax.swing.JTextArea, getPreferredSize[], java.awt.Dimension, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, expandedArea>
<SAD, getProperty[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, HyperTyperObjectManager>
<javax.swing.JOptionPane, setWantsInput[boolean], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, pane>
<javax.swing.JOptionPane, createDialog[java.awt.Component, java.lang.String], javax.swing.JDialog, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, pane>
<java.awt.Dialog, show[], void, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, dialog>
<javax.swing.JOptionPane, getValue[], java.lang.Object, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, pane>
<java.lang.Integer, intValue[], int, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, ((Integer)selectedValue)>
<javax.swing.JOptionPane, getInputValue[], java.lang.Object, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, pane>
<java.lang.String, length[], int, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, shorthand>
<HyperTyperHotkey, isTransientSelected[], boolean, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, addPlainMapping[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, getTransientMappings()>
<SAD, getTransientMappings[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, addPlainMapping[], htMap>
<javax.swing.text.JTextComponent, getText[], java.lang.String, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, expandedArea>
<SAD, addPlainMapping[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, getPersistentMappings()>
<SAD, getPersistentMappings[], SADNESS, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, addPlainMapping[], htMap>
<javax.swing.text.JTextComponent, getText[], java.lang.String, HyperTyperHotkey, actionPerformed[java.awt.event.ActionEvent], void, null, expandedArea>
<java.lang.String, equals[java.lang.Object], boolean, HyperTyperHotkey, isTransientSelected[], boolean, null, TRANS>
<javax.swing.ButtonModel, getActionCommand[], java.lang.String, HyperTyperHotkey, isTransientSelected[], boolean, null, getSelection()>
<javax.swing.ButtonGroup, getSelection[], javax.swing.ButtonModel, HyperTyperHotkey, isTransientSelected[], boolean, getActionCommand[], whichIsSelected>
<java.lang.String, endsWith[java.lang.String], boolean, HyperTyperSequenceList, HyperTyperSequenceList[java.lang.String], void, null, propertyPrefix>
<HyperTyperSequenceList, init[], void, HyperTyperSequenceList, HyperTyperSequenceList[java.lang.String], void, null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, list>
<SAD, sequenceAdded[], SADNESS, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, scl>
<java.util.Vector, removeElement[java.lang.Object], boolean, HyperTyperSequenceList, removeSequenceChangedListener[SequenceChangedListener], void, null, listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, getSequenceCount[], int, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, getSequenceAt[int], Sequence, null, list>
<HyperTyperSequenceList, removeAllMappings[], void, HyperTyperSequenceList, init[], void, null, nothing here>
<SAD, getProperty[], SADNESS, HyperTyperSequenceList, init[], void, null, Jext>
<java.lang.String, indexOf[int], int, HyperTyperSequenceList, init[], void, null, value>
<java.lang.String, substring[int, int], java.lang.String, HyperTyperSequenceList, init[], void, null, value>
<java.lang.String, substring[int], java.lang.String, HyperTyperSequenceList, init[], void, null, value>
<HyperTyperSequenceList, addMapping[java.lang.String, java.lang.String], void, HyperTyperSequenceList, init[], void, null, nothing here>
<java.util.Vector, size[], int, HyperTyperSequenceList, save[], void, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, save[], void, null, list>
<SAD, setProperty[], SADNESS, HyperTyperSequenceList, save[], void, null, Jext>
<SAD, getShorthand[], SADNESS, HyperTyperSequenceList, save[], void, null, seq>
<SAD, getExpanded[], SADNESS, HyperTyperSequenceList, save[], void, null, seq>
<SAD, getProperty[], SADNESS, HyperTyperSequenceList, save[], void, null, Jext>
<SAD, unsetProperty[], SADNESS, HyperTyperSequenceList, save[], void, null, Jext>
<HyperTyperSequenceList, addMapping[Sequence], void, HyperTyperSequenceList, addMapping[java.lang.String, java.lang.String], void, null, nothing here>
<HyperTyperSequenceList, removeMapping[java.lang.String], void, HyperTyperSequenceList, addMapping[Sequence], void, null, this>
<SAD, getShorthand[], SADNESS, HyperTyperSequenceList, addMapping[Sequence], void, null, seq>
<java.util.Vector, size[], int, HyperTyperSequenceList, addMapping[Sequence], void, null, list>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperSequenceList, addMapping[Sequence], void, null, list>
<HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, HyperTyperSequenceList, addMapping[Sequence], void, null, nothing here>
<HyperTyperSequenceList, addMapping[Sequence], void, HyperTyperSequenceList, addPlainMapping[java.lang.String, java.lang.String], void, null, nothing here>
<HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, HyperTyperSequenceList, addPlainMapping[java.lang.String, java.lang.String], void, null, nothing here>
<java.util.Vector, indexOf[java.lang.Object], int, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, list>
<HyperTyperSequenceList, getSequenceAt[int], Sequence, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, nothing here>
<java.util.Vector, removeElementAt[int], void, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, list>
<HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, nothing here>
<java.util.Vector, size[], int, HyperTyperSequenceList, removeAllMappings[], void, null, list>
<HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, HyperTyperSequenceList, removeAllMappings[], void, null, nothing here>
<HyperTyperSequenceList, getSequenceAt[int], Sequence, HyperTyperSequenceList, removeAllMappings[], void, null, nothing here>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, removeAllMappings[], void, null, list>
<HyperTyperSequenceList, save[], void, HyperTyperSequenceList, shutdown[], void, null, nothing here>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, shutdown[], void, null, list>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, shutdown[], void, null, listeners>
<java.lang.String, length[], int, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, value>
<java.lang.String, length[], int, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, value>
<java.lang.String, charAt[int], char, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, value>
<java.lang.String, length[], int, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, value>
<java.lang.String, charAt[int], char, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, value>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, HyperTyperSequenceList, escapeToPlain[java.lang.String], java.lang.String, null, _buf>
<java.lang.String, length[], int, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, value>
<java.lang.String, length[], int, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, value>
<java.lang.String, charAt[int], char, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, value>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, HyperTyperSequenceList, plainToEscape[java.lang.String], java.lang.String, null, _buf>
<java.util.Vector, size[], int, HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, null, listeners>
<SAD, sequenceAdded[], SADNESS, HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, sequenceAdded[], listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, null, listeners>
<SAD, sequenceRemoved[], SADNESS, HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, sequenceRemoved[], listeners>
<java.lang.Class, getClassLoader[], java.lang.ClassLoader, KLNFPlugin, getSkins[], Skin[], null, class>
<SAD, getBooleanProperty[], SADNESS, GenericSkin, apply[], void, null, Jext>
<SAD, setProperty[], SADNESS, GenericSkin, apply[], void, null, Jext>
<SAD, setProperty[], SADNESS, GenericSkin, apply[], void, null, Jext>
<SAD, setRollover[], SADNESS, GenericSkin, apply[], void, null, JextButton>
<SAD, setHighlightColor[], SADNESS, GenericSkin, apply[], void, null, JextButton>
<SAD, blockHighlightChange[], SADNESS, GenericSkin, apply[], void, null, JextButton>
<SAD, setHighlightColor[], SADNESS, GenericSkin, apply[], void, null, JextHighlightButton>
<SAD, blockHighlightChange[], SADNESS, GenericSkin, apply[], void, null, JextHighlightButton>
<SAD, setHighlightColor[], SADNESS, GenericSkin, apply[], void, null, JextToggleButton>
<SAD, blockHighlightChange[], SADNESS, GenericSkin, apply[], void, null, JextToggleButton>
<SAD, setCurrentTheme[], SADNESS, GenericSkin, apply[], void, null, KunststoffLookAndFeel>
<SAD, unBlockHighlightChange[], SADNESS, GenericSkin, unapply[], void, null, JextButton>
<SAD, unBlockHighlightChange[], SADNESS, GenericSkin, unapply[], void, null, JextHighlightButton>
<SAD, unBlockHighlightChange[], SADNESS, GenericSkin, unapply[], void, null, JextToggleButton>
<SAD, addComponent[], SADNESS, KLNFOptionPane, KLNFOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, KLNFOptionPane, KLNFOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, KLNFOptionPane, KLNFOptionPane[], void, null, enable>
<java.lang.String, equals[java.lang.Object], boolean, KLNFOptionPane, KLNFOptionPane[], void, null, "on">
<SAD, getProperty[], SADNESS, KLNFOptionPane, KLNFOptionPane[], void, null, Jext>
<SAD, setProperty[], SADNESS, KLNFOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, KLNFOptionPane, save[], void, null, enable>
<java.awt.Color, getRGB[], int, com.incors.plaf.FastGradientPaint, FastGradientPaint[java.awt.Color, java.awt.Color, boolean], void, null, sc>
<java.awt.Color, getRGB[], int, com.incors.plaf.FastGradientPaint, FastGradientPaint[java.awt.Color, java.awt.Color, boolean], void, null, ec>
<java.awt.image.ColorModel, equals[java.lang.Object], boolean, com.incors.plaf.FastGradientPaintContext.GradientInfo, equals[java.lang.Object], boolean, null, model>
<java.lang.Integer, toString[int], java.lang.String, com.incors.plaf.FastGradientPaintContext.GradientInfo, toString[], java.lang.String, null, Integer>
<java.lang.Integer, toString[int, int], java.lang.String, com.incors.plaf.FastGradientPaintContext.GradientInfo, toString[], java.lang.String, null, Integer>
<java.lang.Integer, toString[int, int], java.lang.String, com.incors.plaf.FastGradientPaintContext.GradientInfo, toString[], java.lang.String, null, Integer>
<com.incors.plaf.FastGradientPaintContext$Gradient, createRaster[int], void, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, nothing here>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, childRasterCache>
<java.awt.image.Raster, createChild[int, int, int, int, int, int, int[]], java.awt.image.Raster, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, raster>
<java.awt.image.Raster, createChild[int, int, int, int, int, int, int[]], java.awt.image.Raster, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, raster>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, childRasterCache>
<java.awt.image.ColorModel, createCompatibleWritableRaster[int, int], java.awt.image.WritableRaster, com.incors.plaf.FastGradientPaintContext.Gradient, createRaster[int], void, null, model>
<java.awt.image.ColorModel, getDataElements[int, java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext.Gradient, createRaster[int], void, null, model>
<java.awt.image.WritableRaster, setDataElements[int, int, java.lang.Object], void, com.incors.plaf.FastGradientPaintContext.Gradient, createRaster[int], void, null, raster>
<java.awt.image.WritableRaster, setDataElements[int, int, java.lang.Object], void, com.incors.plaf.FastGradientPaintContext.Gradient, createRaster[int], void, null, raster>
<java.awt.image.ColorModel, getRGBdefault[], java.awt.image.ColorModel, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, ColorModel>
<java.util.LinkedList, remove[java.lang.Object], boolean, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, add[int, java.lang.Object], void, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, size[], int, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, removeLast[], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.WeakHashMap, get[java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, gradientCache>
<java.lang.ref.Reference, get[], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, WeakReference)o)>
<java.util.WeakHashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, gradientCache>
<com.incors.plaf.FastGradientPaintContext$Gradient, dispose[], void, com.incors.plaf.FastGradientPaintContext, dispose[], void, null, gradient>
<com.incors.plaf.FastGradientPaintContext$Gradient, getRaster[int, int, int], java.awt.image.Raster, com.incors.plaf.FastGradientPaintContext, getRaster[int, int, int, int], java.awt.image.Raster, null, gradient>
<com.incors.plaf.FastGradientPaintContext$Gradient, getRaster[int, int, int], java.awt.image.Raster, com.incors.plaf.FastGradientPaintContext, getRaster[int, int, int, int], java.awt.image.Raster, null, gradient>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, this>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, this>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, this>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, this>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, this>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffInternalFrameTitlePane, paintComponent[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComboBox, isEditable[], boolean, com.incors.plaf.kunststoff.KunststoffComboBoxUI, createArrowButton[], javax.swing.JButton, null, comboBox>
<javax.swing.AbstractButton, setMargin[java.awt.Insets], void, com.incors.plaf.kunststoff.KunststoffComboBoxUI, createArrowButton[], javax.swing.JButton, null, button>
<javax.swing.JComboBox, getRenderer[], javax.swing.ListCellRenderer, com.incors.plaf.kunststoff.KunststoffComboBoxUI.MyMetalComboBoxButton, paintComponent[java.awt.Graphics], void, null, comboBox>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffComboBoxUI.MyMetalComboBoxButton, paintComponent[java.awt.Graphics], void, null, jRenderer>
<java.awt.Component, getBackground[], java.awt.Color, com.incors.plaf.kunststoff.KunststoffComboBoxUI.MyMetalComboBoxButton, paintComponent[java.awt.Graphics], void, null, jRenderer>
<javax.swing.JComponent, setOpaque[boolean], void, com.incors.plaf.kunststoff.KunststoffComboBoxUI.MyMetalComboBoxButton, paintComponent[java.awt.Graphics], void, null, jRenderer>
<javax.swing.JComponent, setOpaque[boolean], void, com.incors.plaf.kunststoff.KunststoffComboBoxUI.MyMetalComboBoxButton, paintComponent[java.awt.Graphics], void, null, ((JComponent)renderer)>
<javax.swing.plaf.basic.BasicTextUI, getVisibleEditorRect[], java.awt.Rectangle, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, nothing here>
<SAD, getTextComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, getTextComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextAreaUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, isToolkitTrueColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffListUI, KunststoffListUI[javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Component, getBackground[], java.awt.Color, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, getBackgroundGradientShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<java.awt.Graphics, getClipBounds[], java.awt.Rectangle, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Color, getRed[], int, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, colorBackground>
<java.awt.Color, getGreen[], int, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, colorBackground>
<java.awt.Color, getBlue[], int, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, colorBackground>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, list>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, list>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Graphics, setColor[java.awt.Color], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, g2D>
<javax.swing.plaf.basic.BasicListUI, paint[java.awt.Graphics, javax.swing.JComponent], void, com.incors.plaf.kunststoff.KunststoffListUI, update[java.awt.Graphics, javax.swing.JComponent], void, null, nothing here>
<javax.swing.ListSelectionModel, isSelectedIndex[int], boolean, com.incors.plaf.kunststoff.KunststoffListUI, paintCell[java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int], void, null, selModel>
<java.awt.Component, getBackground[], java.awt.Color, com.incors.plaf.kunststoff.KunststoffListUI, paintCell[java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int], void, null, renderer>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffListUI, paintCell[java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int], void, null, renderer>
<javax.swing.JComponent, setOpaque[boolean], void, com.incors.plaf.kunststoff.KunststoffListUI, paintCell[java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int], void, null, renderer>
<javax.swing.JComponent, setOpaque[boolean], void, com.incors.plaf.kunststoff.KunststoffListUI, paintCell[java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int], void, null, renderer>
<SAD, getTextComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, myComponent>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, myComponent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, getTextComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, myComponent>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, myComponent>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, myComponent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTextFieldUI, paintBackground[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<javax.swing.JTabbedPane, getSelectedIndex[], int, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabPane>
<javax.swing.plaf.basic.BasicTabbedPaneUI, lastTabInRun[int, int], int, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, this>
<javax.swing.JTabbedPane, getTabCount[], int, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabPane>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getHeight[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getWidth[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getWidth[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getWidth[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<java.awt.Rectangle, getHeight[], double, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, tabRect>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTab[java.awt.Graphics, int, java.awt.Rectangle[], int, java.awt.Rectangle, java.awt.Rectangle], void, null, KunststoffUtilities>
<java.awt.Graphics, setColor[java.awt.Color], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, UIManager>
<java.awt.Graphics, setColor[java.awt.Color], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<javax.swing.JTabbedPane, getBackgroundAt[int], java.awt.Color, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, tabPane>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.incors.plaf.kunststoff.KunststoffTabbedPaneUI, paintTabBackground[java.awt.Graphics, int, int, int, int, int, int, boolean], void, null, g>
<javax.swing.plaf.metal.MetalCheckBoxIcon, getControlSize[], int, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, nothing here>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffCheckBoxIcon, paintIcon[java.awt.Component, java.awt.Graphics, int, int], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Color, getRed[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColor[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Color, getGreen[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColor[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Color, getBlue[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColor[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Color, getRed[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColorUIResource[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Color, getGreen[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColorUIResource[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Color, getBlue[], int, com.incors.plaf.kunststoff.KunststoffUtilities, getTranslucentColorUIResource[java.awt.Color, int], java.awt.Color, null, color>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Rectangle, getHeight[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Rectangle, getY[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Rectangle, getWidth[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Rectangle, getX[], double, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, rect>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.Graphics2D, fill[java.awt.Shape], void, com.incors.plaf.kunststoff.KunststoffUtilities, drawGradient[java.awt.Graphics, java.awt.Color, java.awt.Color, java.awt.Rectangle, java.awt.Rectangle, boolean], void, null, g2D>
<java.awt.image.ColorModel, getPixelSize[], int, com.incors.plaf.kunststoff.KunststoffUtilities, isToolkitTrueColor[java.awt.Component], boolean, null, getColorModel()>
<java.awt.Toolkit, getColorModel[], java.awt.image.ColorModel, com.incors.plaf.kunststoff.KunststoffUtilities, isToolkitTrueColor[java.awt.Component], boolean, getPixelSize[], getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, com.incors.plaf.kunststoff.KunststoffUtilities, isToolkitTrueColor[java.awt.Component], boolean, getColorModel[], c>
<java.lang.Class, getResource[java.lang.String], java.net.URL, com.incors.plaf.kunststoff.KunststoffTreeUI, KunststoffTreeUI[javax.swing.JComponent], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends com.incors.plaf.kunststoff.KunststoffTreeUI>, com.incors.plaf.kunststoff.KunststoffTreeUI, KunststoffTreeUI[javax.swing.JComponent], void, getResource[java.lang.String], nothing here>
<java.lang.Class, getResource[java.lang.String], java.net.URL, com.incors.plaf.kunststoff.KunststoffTreeUI, KunststoffTreeUI[javax.swing.JComponent], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends com.incors.plaf.kunststoff.KunststoffTreeUI>, com.incors.plaf.kunststoff.KunststoffTreeUI, KunststoffTreeUI[javax.swing.JComponent], void, getResource[java.lang.String], nothing here>
<java.lang.Throwable, printStackTrace[], void, com.incors.plaf.kunststoff.KunststoffTreeUI, KunststoffTreeUI[javax.swing.JComponent], void, null, e>
<java.awt.Graphics, drawImage[java.awt.Image, int, int, java.awt.image.ImageObserver], boolean, com.incors.plaf.kunststoff.KunststoffTreeUI, paintExpandControl[java.awt.Graphics, java.awt.Rectangle, java.awt.Insets, java.awt.Rectangle, javax.swing.tree.TreePath, int, boolean, boolean, boolean], void, null, g>
<javax.swing.ImageIcon, getImage[], java.awt.Image, com.incors.plaf.kunststoff.KunststoffTreeUI, paintExpandControl[java.awt.Graphics, java.awt.Rectangle, java.awt.Insets, java.awt.Rectangle, javax.swing.tree.TreePath, int, boolean, boolean, boolean], void, null, m_iconExpanded>
<java.awt.Graphics, drawImage[java.awt.Image, int, int, java.awt.image.ImageObserver], boolean, com.incors.plaf.kunststoff.KunststoffTreeUI, paintExpandControl[java.awt.Graphics, java.awt.Rectangle, java.awt.Insets, java.awt.Rectangle, javax.swing.tree.TreePath, int, boolean, boolean, boolean], void, null, g>
<javax.swing.ImageIcon, getImage[], java.awt.Image, com.incors.plaf.kunststoff.KunststoffTreeUI, paintExpandControl[java.awt.Graphics, java.awt.Rectangle, java.awt.Insets, java.awt.Rectangle, javax.swing.tree.TreePath, int, boolean, boolean, boolean], void, null, m_iconCollapsed>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffUtilities>
<javax.swing.JScrollBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, scrollbar>
<javax.swing.JScrollBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, scrollbar>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollBarUI, paintThumb[java.awt.Graphics, javax.swing.JComponent, java.awt.Rectangle], void, null, KunststoffUtilities>
<javax.swing.JComponent, setOpaque[boolean], void, com.incors.plaf.kunststoff.ModifiedDefaultListCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Container, addPropertyChangeListener[java.beans.PropertyChangeListener], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, installUI[javax.swing.JComponent], void, null, c>
<java.awt.Component, removePropertyChangeListener[java.beans.PropertyChangeListener], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, uninstallUI[javax.swing.JComponent], void, null, c>
<javax.swing.plaf.metal.MetalInternalFrameTitlePane, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setPalette[boolean], void, null, titlePane>
<java.lang.String, equals[java.lang.Object], boolean, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, frameType>
<javax.swing.LookAndFeel, installBorder[javax.swing.JComponent, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, LookAndFeel>
<javax.swing.plaf.metal.MetalInternalFrameTitlePane, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, titlePane>
<java.lang.String, equals[java.lang.Object], boolean, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, frameType>
<javax.swing.LookAndFeel, installBorder[javax.swing.JComponent, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, LookAndFeel>
<javax.swing.plaf.metal.MetalInternalFrameTitlePane, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, titlePane>
<javax.swing.LookAndFeel, installBorder[javax.swing.JComponent, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, LookAndFeel>
<javax.swing.plaf.metal.MetalInternalFrameTitlePane, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, null, titlePane>
<java.beans.PropertyChangeEvent, getPropertyName[], java.lang.String, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, e>
<java.lang.String, equals[java.lang.Object], boolean, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, name>
<java.beans.PropertyChangeEvent, getNewValue[], java.lang.Object, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, e>
<com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setFrameType[java.lang.String], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, nothing here>
<java.beans.PropertyChangeEvent, getNewValue[], java.lang.Object, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, e>
<java.lang.String, equals[java.lang.Object], boolean, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, name>
<java.beans.PropertyChangeEvent, getNewValue[], java.lang.Object, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, e>
<com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, nothing here>
<java.lang.Boolean, booleanValue[], boolean, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, getNewValue())>
<java.beans.PropertyChangeEvent, getNewValue[], java.lang.Object, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, booleanValue[], e>
<com.incors.plaf.kunststoff.KunststoffInternalFrameUI, setPalette[boolean], void, com.incors.plaf.kunststoff.KunststoffInternalFrameUI.PaletteListener, propertyChange[java.beans.PropertyChangeEvent], void, null, nothing here>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, nothing here>
<javax.swing.plaf.basic.BasicArrowButton, getDirection[], int, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, nothing here>
<javax.swing.plaf.basic.BasicArrowButton, getDirection[], int, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, nothing here>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffUtilities>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffScrollButton, paint[java.awt.Graphics], void, null, KunststoffUtilities>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffTableHeaderUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Component, getParent[], java.awt.Container, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JToolBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, ((JToolBar)parent)>
<java.awt.Component, getLocation[], java.awt.Point, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToggleButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getParent[], java.awt.Container, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, menuItem>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Component, getLocation[], java.awt.Point, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffMenuUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JProgressBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, prog>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JToolBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, ((JToolBar)c)>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffToolBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffPresentationTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffNotebookTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme, addCustomEntriesToTable[javax.swing.UIDefaults], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.UIManager, installLookAndFeel[javax.swing.UIManager.LookAndFeelInfo], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, KunststoffLookAndFeel[], void, null, UIManager>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initClassDefaults[javax.swing.UIDefaults], void, null, nothing here>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, null, table>
<java.lang.Throwable, printStackTrace[], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, putDefault[javax.swing.UIDefaults, java.lang.String], void, null, ex>
<com.incors.plaf.kunststoff.KunststoffLookAndFeel, setCurrentTheme[javax.swing.plaf.metal.MetalTheme], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, createDefaultTheme[], void, null, nothing here>
<javax.swing.plaf.metal.MetalLookAndFeel, setCurrentTheme[javax.swing.plaf.metal.MetalTheme], void, com.incors.plaf.kunststoff.KunststoffLookAndFeel, setCurrentTheme[javax.swing.plaf.metal.MetalTheme], void, null, MetalLookAndFeel>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initSystemColorDefaults[javax.swing.UIDefaults], void, null, table>
<SAD, getTranslucentColorUIResource[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initSystemColorDefaults[javax.swing.UIDefaults], void, null, KunststoffUtilities>
<javax.swing.plaf.metal.MetalLookAndFeel, getTextHighlightColor[], javax.swing.plaf.ColorUIResource, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initSystemColorDefaults[javax.swing.UIDefaults], void, null, nothing here>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.kunststoff.KunststoffLookAndFeel, initComponentDefaults[javax.swing.UIDefaults], void, null, table>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, getComponentGradientColorReflection[], javax.swing.plaf.ColorUIResource, null, gradientTheme>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, getComponentGradientColorShadow[], javax.swing.plaf.ColorUIResource, null, gradientTheme>
<SAD, getTextComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, getTextComponentGradientColorReflection[], javax.swing.plaf.ColorUIResource, null, gradientTheme>
<SAD, getTextComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, getTextComponentGradientColorShadow[], javax.swing.plaf.ColorUIResource, null, gradientTheme>
<SAD, getBackgroundGradientShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffLookAndFeel, getBackgroundGradientShadow[], int, null, gradientTheme>
<javax.swing.JComponent, isOpaque[], boolean, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Component, getParent[], java.awt.Container, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JToolBar, getOrientation[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, ((JToolBar)parent)>
<java.awt.Component, getLocation[], java.awt.Point, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<java.awt.Component, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, parent>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorReflection[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<SAD, getComponentGradientColorShadow[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffLookAndFeel>
<SAD, getTranslucentColor[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getWidth[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, getHeight[], int, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<SAD, drawGradient[], SADNESS, com.incors.plaf.kunststoff.KunststoffButtonUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, KunststoffUtilities>
<java.awt.Color, getRed[], int, com.incors.plaf.ColorUIResource2, getRed[], int, null, myColor>
<java.awt.Color, getGreen[], int, com.incors.plaf.ColorUIResource2, getGreen[], int, null, myColor>
<java.awt.Color, getBlue[], int, com.incors.plaf.ColorUIResource2, getBlue[], int, null, myColor>
<java.awt.Color, getAlpha[], int, com.incors.plaf.ColorUIResource2, getAlpha[], int, null, myColor>
<java.awt.Color, getRGB[], int, com.incors.plaf.ColorUIResource2, getRGB[], int, null, myColor>
<java.awt.Color, brighter[], java.awt.Color, com.incors.plaf.ColorUIResource2, brighter[], java.awt.Color, null, myColor>
<java.awt.Color, darker[], java.awt.Color, com.incors.plaf.ColorUIResource2, darker[], java.awt.Color, null, myColor>
<java.awt.Color, hashCode[], int, com.incors.plaf.ColorUIResource2, hashCode[], int, null, myColor>
<java.awt.Color, equals[java.lang.Object], boolean, com.incors.plaf.ColorUIResource2, equals[java.lang.Object], boolean, null, myColor>
<java.awt.Color, toString[], java.lang.String, com.incors.plaf.ColorUIResource2, toString[], java.lang.String, null, myColor>
<java.awt.Color, getRGBComponents[float[]], float[], com.incors.plaf.ColorUIResource2, getRGBComponents[float[]], float[], null, myColor>
<java.awt.Color, getRGBColorComponents[float[]], float[], com.incors.plaf.ColorUIResource2, getRGBColorComponents[float[]], float[], null, myColor>
<java.awt.Color, getComponents[float[]], float[], com.incors.plaf.ColorUIResource2, getComponents[float[]], float[], null, myColor>
<java.awt.Color, getColorComponents[float[]], float[], com.incors.plaf.ColorUIResource2, getColorComponents[float[]], float[], null, myColor>
<java.awt.Color, getComponents[java.awt.color.ColorSpace, float[]], float[], com.incors.plaf.ColorUIResource2, getComponents[java.awt.color.ColorSpace, float[]], float[], null, myColor>
<java.awt.Color, getColorComponents[java.awt.color.ColorSpace, float[]], float[], com.incors.plaf.ColorUIResource2, getColorComponents[java.awt.color.ColorSpace, float[]], float[], null, myColor>
<java.awt.Color, getColorSpace[], java.awt.color.ColorSpace, com.incors.plaf.ColorUIResource2, getColorSpace[], java.awt.color.ColorSpace, null, myColor>
<java.awt.Color, createContext[java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints], java.awt.PaintContext, com.incors.plaf.ColorUIResource2, createContext[java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints], java.awt.PaintContext, null, myColor>
<java.awt.Color, getTransparency[], int, com.incors.plaf.ColorUIResource2, getTransparency[], int, null, myColor>
<SAD, addMenu[], SADNESS, JavaPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, JavaPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addMenu[], parent>
<SAD, loadMenu[], SADNESS, JavaPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addOptionPane[], SADNESS, JavaPlugin, createOptionPanes[OptionsDialog], void, null, javaGroup>
<SAD, addOptionPane[], SADNESS, JavaPlugin, createOptionPanes[OptionsDialog], void, null, javaGroup>
<SAD, addOptionPane[], SADNESS, JavaPlugin, createOptionPanes[OptionsDialog], void, null, javaGroup>
<SAD, addOptionGroup[], SADNESS, JavaPlugin, createOptionPanes[OptionsDialog], void, null, parent>
<SAD, addAction[], SADNESS, JavaPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, JavaPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, JavaPlugin, start[], void, null, Jext>
<SAD, getTextArea[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setBracketBreak[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, equals[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, breakBracket")>
<SAD, getProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setSwitchIndent[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, equals[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, indentSwitch")>
<SAD, getProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Integer>
<SAD, getProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setPreferredLineLength[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, equals[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, softTab")>
<SAD, getProperty[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setSpaceIndentation[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, beautifier>
<SAD, getTabSize[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setTabIndentation[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, beautifier>
<SAD, init[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, getLength[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, hasMoreFormattedLines[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<javax.swing.text.Element, getElementCount[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getText[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, formatLine[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, hasMoreFormattedLines[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, nextFormattedLine[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<javax.swing.text.Document, remove[int, int], void, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, getLength[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, summarize[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, hasMoreFormattedLines[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, getLength[], int, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, nextFormattedLine[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, format>
<SAD, endCompoundEdit[], SADNESS, Beautifier, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<TokenSource, getNextLine[], java.lang.String, TokenSource, TokenSource[JBrowseParser.LineSource, int], void, null, nothing here>
<SAD, getLine[], SADNESS, TokenSource, getNextLine[], java.lang.String, null, ls>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, getNextToken[], java.lang.String, null, st>
<SAD, isExhausted[], SADNESS, TokenSource, getNextToken[], java.lang.String, null, ls>
<TokenSource, getNextLine[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, TokenSource, getNextToken[], java.lang.String, null, out>
<java.lang.Throwable, getMessage[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, e>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, TokenSource, getNextToken[], java.lang.String, null, e>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, getNextToken[], java.lang.String, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, st>
<java.io.PrintStream, println[java.lang.String], void, TokenSource, getNextToken[], java.lang.String, null, out>
<java.lang.Throwable, getMessage[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, e>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, TokenSource, getNextToken[], java.lang.String, null, e>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, getNextToken[], java.lang.String, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, st>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, getNextToken[], java.lang.String, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, st>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, currentToken>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, lineString>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, lineString>
<TokenSource, skipRestOfLine[], void, TokenSource, getNextToken[], java.lang.String, null, nothing here>
<java.lang.String, charAt[int], char, TokenSource, getNextToken[], java.lang.String, null, lineString>
<java.lang.String, indexOf[java.lang.String, int], int, TokenSource, getNextToken[], java.lang.String, null, lineString>
<TokenSource, getNextLine[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, nothing here>
<java.lang.String, indexOf[java.lang.String], int, TokenSource, getNextToken[], java.lang.String, null, lineString>
<java.lang.String, length[], int, TokenSource, getNextToken[], java.lang.String, null, lineString>
<TokenSource, getNextLine[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, nothing here>
<java.lang.String, substring[int], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, lineString>
<java.io.PrintStream, println[java.lang.String], void, TokenSource, getNextToken[], java.lang.String, null, out>
<java.lang.Throwable, getMessage[], java.lang.String, TokenSource, getNextToken[], java.lang.String, null, e>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, TokenSource, getNextToken[], java.lang.String, null, e>
<SAD, isExhausted[], SADNESS, TokenSource, skipRestOfLine[], void, null, ls>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, skipRestOfLine[], void, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, TokenSource, skipRestOfLine[], void, null, st>
<TokenSource, getNextLine[], java.lang.String, TokenSource, skipRestOfLine[], void, null, nothing here>
<java.util.StringTokenizer, hasMoreTokens[], boolean, TokenSource, skipRestOfLine[], void, null, st>
<TokenSource, getNextToken[], java.lang.String, TokenSource, skipUntil[java.lang.String], boolean, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[java.lang.String], boolean, null, skipToToken>
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[java.lang.String], boolean, null, "{">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[java.lang.String], boolean, null, "(">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[java.lang.String], boolean, null, "}">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[java.lang.String], boolean, null, ")">
<TokenSource, getNextToken[], java.lang.String, TokenSource, skipUntil[java.lang.String], boolean, null, nothing here>
<TokenSource, getNextToken[], java.lang.String, TokenSource, skipUntil[char[]], java.lang.String, null, nothing here>
<java.lang.String, length[], int, TokenSource, skipUntil[char[]], java.lang.String, null, curToken>
<java.lang.String, indexOf[java.lang.String], int, TokenSource, skipUntil[char[]], java.lang.String, null, skipCharStr>
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[char[]], java.lang.String, null, "{">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[char[]], java.lang.String, null, "(">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[char[]], java.lang.String, null, "}">
<java.lang.String, equals[java.lang.Object], boolean, TokenSource, skipUntil[char[]], java.lang.String, null, ")">
<TokenSource, getNextToken[], java.lang.String, TokenSource, skipUntil[char[]], java.lang.String, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, main[java.lang.String[]], void, null, "-t">
<JSBeautifier, setTabIndentation[], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.lang.String, startsWith[java.lang.String], boolean, JSBeautifier, main[java.lang.String[]], void, null, arg>
<java.lang.Integer, intValue[], int, JSBeautifier, main[java.lang.String[]], void, null, substring(2))>
<java.lang.Integer, valueOf[java.lang.String], java.lang.Integer, JSBeautifier, main[java.lang.String[]], void, null, Integer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, main[java.lang.String[]], void, null, arg>
<JSBeautifier, setSpaceIndentation[int], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.lang.String, startsWith[java.lang.String], boolean, JSBeautifier, main[java.lang.String[]], void, null, arg>
<java.lang.Integer, intValue[], int, JSBeautifier, main[java.lang.String[]], void, null, substring(2))>
<java.lang.Integer, valueOf[java.lang.String], java.lang.Integer, JSBeautifier, main[java.lang.String[]], void, null, Integer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, main[java.lang.String[]], void, null, arg>
<JSBeautifier, setMaxInStatementIndetation[int], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, main[java.lang.String[]], void, null, "-ib">
<JSBeautifier, setBracketIndent[boolean], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, main[java.lang.String[]], void, null, "-fs">
<JSBeautifier, setSwitchIndent[boolean], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.lang.String, startsWith[java.lang.String], boolean, JSBeautifier, main[java.lang.String[]], void, null, arg>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.lang.System, exit[int], void, JSBeautifier, main[java.lang.String[]], void, null, System>
<java.util.Vector, addElement[java.lang.Object], void, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<JSBeautifier, beautifyReader[java.io.BufferedReader, java.io.PrintWriter], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintWriter, close[], void, JSBeautifier, main[java.lang.String[]], void, null, outWriter>
<java.util.Vector, size[], int, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<JSBeautifier, init[], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<JSBeautifier, beautifyReader[java.io.BufferedReader, java.io.PrintWriter], void, JSBeautifier, main[java.lang.String[]], void, null, beautifier>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.PrintWriter, close[], void, JSBeautifier, main[java.lang.String[]], void, null, outWriter>
<java.io.BufferedReader, close[], void, JSBeautifier, main[java.lang.String[]], void, null, inReader>
<java.io.PrintStream, println[java.lang.String], void, JSBeautifier, main[java.lang.String[]], void, null, err>
<java.io.BufferedReader, readLine[], java.lang.String, JSBeautifier, beautifyReader[java.io.BufferedReader, java.io.PrintWriter], void, null, inReader>
<java.io.PrintWriter, println[java.lang.String], void, JSBeautifier, beautifyReader[java.io.BufferedReader, java.io.PrintWriter], void, null, outWriter>
<JSBeautifier, beautify[java.lang.String], java.lang.String, JSBeautifier, beautifyReader[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<JSBeautifier, init[], void, JSBeautifier, JSBeautifier[], void, null, nothing here>
<JSBeautifier, setSpaceIndentation[int], void, JSBeautifier, JSBeautifier[], void, null, nothing here>
<JSBeautifier, setMaxInStatementIndetation[int], void, JSBeautifier, JSBeautifier[], void, null, nothing here>
<JSBeautifier, setBracketIndent[boolean], void, JSBeautifier, JSBeautifier[], void, null, nothing here>
<JSBeautifier, setSwitchIndent[boolean], void, JSBeautifier, JSBeautifier[], void, null, nothing here>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, tempStacks>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, bracketBlockStateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, trim[], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "switch">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "switch">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenStatementStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.lang.Boolean, booleanValue[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], parenStatementStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, ((Integer)poppedIndent)>
<java.lang.Boolean, booleanValue[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, currentHeader>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockParenDepthStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockStatementStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "if">
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "else">
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "else">
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "while">
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "catch">
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "case">
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "default">
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "static">
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "synchronized">
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "static">
<java.util.Vector, lastElement[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "synchronized">
<java.util.Vector, lastElement[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headers[h]>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headers[h]>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.lang.Boolean, booleanValue[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, ((Integer)poppedIndent)>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockParenDepthStack>
<java.lang.Integer, intValue[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], blockParenDepthStack>
<java.lang.Boolean, booleanValue[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], blockStatementStack>
<java.util.Stack, search[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, isEmpty[], tempStacks>
<java.util.Vector, removeAllElements[], void, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, removeAllElements[], tempStacks>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, push[java.lang.Object], tempStacks>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, preBlockStatements[headerNum]>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, preBlockStatements[headerNum]>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nonAssignmentOperators[n]>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nonAssignmentOperators[n]>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, assignmentOperators[a]>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, assignmentOperators[a]>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, assignmentOperators[a]>
<java.lang.String, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, assignmentOperators[a]>
<JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<JSBeautifier, isLegalNameChar[char], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.String, equals[java.lang.Object], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, "{">
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.lang.StringBuffer, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, length[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, insert[int, java.lang.String], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, insert[int, char], java.lang.StringBuffer, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.lang.StringBuffer, toString[], java.lang.String, JSBeautifier, beautify[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, length[], int, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, line>
<JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, nothing here>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, parenIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, parenIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.lang.Integer, intValue[], int, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.lang.String, length[], int, JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, null, line>
<java.lang.String, charAt[int], char, JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, getNextProgramCharDistance[java.lang.String, int], int, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, line>
<java.lang.String, length[], int, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, possibleHeaders[p]>
<java.lang.String, length[], int, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, line>
<java.lang.String, length[], int, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, possibleHeaders[p]>
<java.lang.String, charAt[int], char, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, line>
<JSBeautifier, isLegalNameChar[char], boolean, JSBeautifier, findLegalHeader[java.lang.String, int, java.lang.String[]], int, null, nothing here>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, UMLTree, UMLTree[], void, null, nothing here>
<javax.swing.JTree, setVisibleRowCount[int], void, UMLTree, UMLTree[], void, null, nothing here>
<SAD, getDisplayOptions[], SADNESS, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, options>
<SAD, getFilterOptions[], SADNESS, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, options>
<javax.swing.JTree, setCellRenderer[javax.swing.tree.TreeCellRenderer], void, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, nothing here>
<UMLTree$Model, setFilterOptions[Options.FilterIro], void, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, tm>
<javax.swing.tree.DefaultTreeModel, reload[], void, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, tm>
<javax.swing.JTree, expandRow[int], void, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, nothing here>
<SAD, getTopLevelPath[], SADNESS, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, results>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, UMLTree, display[UMLTree.Model, Options, JBrowseParser.Results], void, null, nothing here>
<javax.swing.JTree, getModel[], javax.swing.tree.TreeModel, UMLTree, updateVisibleToggled[Options], void, null, nothing here>
<SAD, getFilterOptions[], SADNESS, UMLTree, updateVisibleToggled[Options], void, null, options>
<javax.swing.JTree, getPathForRow[int], javax.swing.tree.TreePath, UMLTree, updateVisibleToggled[Options], void, null, nothing here>
<javax.swing.JTree, getDescendantToggledPaths[javax.swing.tree.TreePath], java.util.Enumeration<javax.swing.tree.TreePath>, UMLTree, updateVisibleToggled[Options], void, null, nothing here>
<java.util.Enumeration, hasMoreElements[], boolean, UMLTree, updateVisibleToggled[Options], void, null, e>
<java.util.Enumeration, nextElement[], java.lang.Object, UMLTree, updateVisibleToggled[Options], void, null, e>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, UMLTree, updateVisibleToggled[Options], void, null, aPath>
<UMLTree$Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], UMLTree, updateVisibleToggled[Options], void, null, aNode>
<UMLTree$Model, fireTreeNodesChanged[javax.swing.tree.TreeNode, int[], java.lang.Object[]], void, UMLTree, updateVisibleToggled[Options], void, null, tm>
<javax.swing.tree.DefaultTreeModel, getPathToRoot[javax.swing.tree.TreeNode], javax.swing.tree.TreeNode[], UMLTree.Model, fireTreeNodesChanged[javax.swing.tree.TreeNode, int[], java.lang.Object[]], void, null, nothing here>
<UMLTree$Node, getChildAt[int, Options.FilterIro], UMLTree.Node, UMLTree.Model, getChild[java.lang.Object, int], java.lang.Object, null, ((Node)parent)>
<javax.swing.tree.DefaultMutableTreeNode, getChildAt[int], javax.swing.tree.TreeNode, UMLTree.Model, getChild[java.lang.Object, int], java.lang.Object, null, ((Node)parent)>
<UMLTree$Node, getChildCount[Options.FilterIro], int, UMLTree.Model, getChildCount[java.lang.Object], int, null, ((Node)parent)>
<javax.swing.tree.DefaultMutableTreeNode, getChildCount[], int, UMLTree.Model, getChildCount[java.lang.Object], int, null, ((Node)parent)>
<UMLTree$Model, getChildCount[java.lang.Object], int, UMLTree.Model, isLeaf[java.lang.Object], boolean, null, nothing here>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, get[int], java.lang.Object, UMLTree.Node, alphaSort[], void, null, children>
<UMLTree$Node, getElement[], UML.Element, UMLTree.Node, alphaSort[], void, null, node>
<SAD, setShowArguments[], SADNESS, UMLTree.Node, alphaSort[], void, null, display>
<SAD, getName[], SADNESS, UMLTree.Node, alphaSort[], void, null, operation>
<SAD, listArgs[], SADNESS, UMLTree.Node, alphaSort[], void, null, operation>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, UMLTree.Node, alphaSort[], void, null, methods>
<SAD, isInterface[], SADNESS, UMLTree.Node, alphaSort[], void, null, elm>
<SAD, isClass[], SADNESS, UMLTree.Node, alphaSort[], void, null, elm>
<UMLTree$Node, alphaSort[], void, UMLTree.Node, alphaSort[], void, null, node>
<java.util.ArrayList, add[java.lang.Object], boolean, UMLTree.Node, alphaSort[], void, null, sortedList>
<java.util.Set, toArray[java.lang.Object[]], java.lang.Object[], UMLTree.Node, alphaSort[], void, null, keySet()>
<java.util.HashMap, keySet[], java.util.Set, UMLTree.Node, alphaSort[], void, toArray[java.lang.Object[]], methods>
<java.util.HashMap, size[], int, UMLTree.Node, alphaSort[], void, null, methods>
<java.util.Arrays, sort[java.lang.Object[]], void, UMLTree.Node, alphaSort[], void, null, Arrays>
<java.util.ArrayList, add[java.lang.Object], boolean, UMLTree.Node, alphaSort[], void, null, sortedList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, UMLTree.Node, alphaSort[], void, null, methods>
<java.util.Vector, removeAllElements[], void, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, addAll[java.util.Collection], boolean, UMLTree.Node, alphaSort[], void, null, children>
<javax.swing.tree.DefaultMutableTreeNode, pathFromAncestorEnumeration[javax.swing.tree.TreeNode], java.util.Enumeration, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, nothing here>
<java.util.Enumeration, hasMoreElements[], boolean, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, e>
<java.util.Enumeration, nextElement[], java.lang.Object, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, e>
<java.util.Vector, addElement[java.lang.Object], void, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<java.util.Vector, size[], int, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<java.util.Vector, copyInto[java.lang.Object[]], void, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<SAD, isVisible[], SADNESS, UMLTree.Node, isVisible[Options.FilterIro], boolean, null, Element)getUserObject())>
<javax.swing.tree.DefaultMutableTreeNode, getUserObject[], java.lang.Object, UMLTree.Node, isVisible[Options.FilterIro], boolean, isVisible[], nothing here>
<SAD, getElementType[], SADNESS, UMLTree.Node, getElementType[], UML.Type, null, Element)userObject)>
<SAD, setName[], SADNESS, UMLTree.Node, setName[java.lang.String], void, null, Element)userObject)>
<javax.swing.tree.DefaultMutableTreeNode, getParent[], javax.swing.tree.TreeNode, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, this>
<java.util.Vector, size[], int, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, children>
<java.util.Vector, elementAt[int], java.lang.Object, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, children>
<SAD, isVisible[], SADNESS, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, Element)nodeObject)>
<UMLTree$Node, getChildCount[Options.FilterIro], int, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, nothing here>
<java.util.Vector, size[], int, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, children>
<java.util.Vector, elementAt[int], java.lang.Object, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, children>
<SAD, isVisible[], SADNESS, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, Element)nodeObject)>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, tree>
<javax.swing.tree.DefaultMutableTreeNode, getUserObject[], java.lang.Object, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, node>
<SAD, getElementType[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<javax.swing.JLabel, setText[java.lang.String], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<SAD, toString[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<SAD, getAbstractItalic[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, options>
<SAD, isAbstract[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<javax.swing.JComponent, setFont[java.awt.Font], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<javax.swing.JComponent, setFont[java.awt.Font], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<SAD, getStaticUlined[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, options>
<SAD, isStatic[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<SAD, getInverseOptions[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, options>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<SAD, toString[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, tree>
<SAD, toString[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, e>
<SAD, getIcon[], SADNESS, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, type>
<javax.swing.JLabel, setIcon[javax.swing.Icon], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<javax.swing.JComponent, setFont[java.awt.Font], void, UMLTree.CellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, lab>
<javax.swing.Icon, getIconWidth[], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, getIcon()>
<javax.swing.JLabel, getIcon[], javax.swing.Icon, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, getIconWidth[], nothing here>
<java.lang.Math, max[int, int], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, Math>
<javax.swing.JLabel, getIconTextGap[], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, setColor[java.awt.Color], void, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, g>
<javax.swing.JComponent, getHeight[], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getWidth[], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getHeight[], int, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.Class, getResource[java.lang.String], java.net.URL, UMLTree.CellRenderer, paintComponent[java.awt.Graphics], void, null, class>
<java.lang.String, toString[], java.lang.String, UML.Type, toString[], java.lang.String, null, label>
<UML$Element, getElementType[], UML.Type, UML.Element, getParentElementType[], UML.Type, null, parent>
<SAD, isAbstract[], SADNESS, UML.Element, isAbstract[], boolean, null, RWModifier>
<SAD, isInterface[], SADNESS, UML.Element, isAbstract[], boolean, null, RWModifier>
<SAD, isStatic[], SADNESS, UML.Element, isStatic[], boolean, null, RWModifier>
<SAD, isInterface[], SADNESS, UML.Element, isInterface[], boolean, null, RWModifier>
<SAD, isClass[], SADNESS, UML.Element, isClass[], boolean, null, RWModifier>
<SAD, getShowLineNum[], SADNESS, UML.PackageMember, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, toString[], SADNESS, UML.PackageMember, toString[Options.DisplayIro], java.lang.String, null, RWModifier>
<SAD, getTopLevelVisIndex[], SADNESS, UML.PackageMember, isVisible[Options.FilterIro], boolean, null, RWModifier>
<SAD, getTopLevelVisIndex[], SADNESS, UML.PackageMember, isVisible[Options.FilterIro], boolean, null, filterOpt>
<UML$Element, getParentElement[], UML.Element, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, nothing here>
<UML$Element, getName[], java.lang.String, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, parent>
<UML$Element, getParentElement[], UML.Element, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, parent>
<SAD, getShowLineNum[], SADNESS, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, toString[], SADNESS, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, RWModifier>
<SAD, getShowNestedName[], SADNESS, UML.NestedMember, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getVisLevelIndex[], SADNESS, UML.NestedMember, isVisible[Options.FilterIro], boolean, null, RWModifier>
<SAD, getMemberVisIndex[], SADNESS, UML.NestedMember, isVisible[Options.FilterIro], boolean, null, filterOpt>
<UML$Element, isClass[], boolean, UML.Generalization, toString[Options.DisplayIro], java.lang.String, null, parent>
<SAD, getShowLineNum[], SADNESS, UML.Generalization, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowIconKeywords[], SADNESS, UML.Generalization, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<UML$Type, toString[], java.lang.String, UML.Generalization, toString[Options.DisplayIro], java.lang.String, null, type>
<SAD, getShowGeneralizations[], SADNESS, UML.Generalization, isVisible[Options.FilterIro], boolean, null, filterOpt>
<SAD, getShowLineNum[], SADNESS, UML.Message, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowIconKeywords[], SADNESS, UML.Message, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<java.util.Vector, addElement[java.lang.Object], void, UML.Operation, addArgument[java.lang.String, java.lang.String], void, null, argList>
<SAD, isAbstract[], SADNESS, UML.Operation, isAbstract[], boolean, null, RWModifier>
<UML$Element, getParentElementType[], UML.Type, UML.Operation, isAbstract[], boolean, null, nothing here>
<SAD, isNative[], SADNESS, UML.Operation, isBodyRequired[], boolean, null, RWModifier>
<UML$Operation, isAbstract[], boolean, UML.Operation, isBodyRequired[], boolean, null, nothing here>
<SAD, getMemberVisIndex[], SADNESS, UML.Operation, isVisible[Options.FilterIro], boolean, null, RWModifier>
<SAD, getMemberVisIndex[], SADNESS, UML.Operation, isVisible[Options.FilterIro], boolean, null, filterOpt>
<SAD, getShowArguments[], SADNESS, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, null, displayOpt>
<java.util.Vector, size[], int, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, null, argList>
<UML$Operation$Argument, toString[Options.DisplayIro], java.lang.String, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, toString[Options.DisplayIro], argList>
<UML$Operation$Argument, toString[Options.DisplayIro], java.lang.String, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, toString[Options.DisplayIro], argList>
<SAD, getTypeIsSuffixed[], SADNESS, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowLineNum[], SADNESS, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, toString[], SADNESS, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, RWModifier>
<UML$Operation, listArgs[Options.DisplayIro], java.lang.String, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getShowLineNum[], SADNESS, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, toString[], SADNESS, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, RWModifier>
<UML$Operation, listArgs[Options.DisplayIro], java.lang.String, UML.Operation, toString[Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getTypeIsSuffixed[], SADNESS, UML.Operation.Argument, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowArgumentNames[], SADNESS, UML.Operation.Argument, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowArgumentNames[], SADNESS, UML.Operation.Argument, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowLineNum[], SADNESS, UML.Throws, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getShowIconKeywords[], SADNESS, UML.Throws, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<UML$Type, toString[], java.lang.String, UML.Throws, toString[Options.DisplayIro], java.lang.String, null, type>
<SAD, getShowThrows[], SADNESS, UML.Throws, isVisible[Options.FilterIro], boolean, null, filterOpt>
<java.lang.String, indexOf[java.lang.String], int, UML.Attribute, isPrimitive[], boolean, null, name>
<java.lang.String, indexOf[java.lang.String], int, UML.Attribute, isPrimitive[], boolean, null, PRIMITIVE_TYPES>
<SAD, getMemberVisIndex[], SADNESS, UML.Attribute, isVisible[Options.FilterIro], boolean, null, RWModifier>
<SAD, getMemberVisIndex[], SADNESS, UML.Attribute, isVisible[Options.FilterIro], boolean, null, filterOpt>
<SAD, getShowAttributes[], SADNESS, UML.Attribute, isVisible[Options.FilterIro], boolean, null, filterOpt>
<SAD, getShowPrimitives[], SADNESS, UML.Attribute, isVisible[Options.FilterIro], boolean, null, filterOpt>
<UML$Attribute, isPrimitive[], boolean, UML.Attribute, isVisible[Options.FilterIro], boolean, null, nothing here>
<SAD, getShowLineNum[], SADNESS, UML.Attribute, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, toString[], SADNESS, UML.Attribute, toString[Options.DisplayIro], java.lang.String, null, RWModifier>
<SAD, getTypeIsSuffixed[], SADNESS, UML.Attribute, toString[Options.DisplayIro], java.lang.String, null, displayOpt>
<SAD, getTextArea[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSystemClipboard[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, getSystemClipboard[], textArea>
<java.lang.String, replace[char, char], java.lang.String, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, stringFlavor))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, getContents(this)>
<java.awt.datatransfer.Clipboard, getContents[java.lang.Object], java.awt.datatransfer.Transferable, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, getTransferData[java.awt.datatransfer.DataFlavor], clipboard>
<SAD, getJextParent[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSourceName[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<SAD, usesJavaTokenMarker[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<SAD, getOptions[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<SAD, getFilterOptions[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, options>
<SAD, getDisplayOptions[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, options>
<SAD, setOptions[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<SAD, setRootNode[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<SAD, parse[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, setRootNode[], parser>
<SAD, getClassCount[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, results>
<SAD, getInterfaceCount[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, results>
<InsertClassName, getClassName[], java.lang.String, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.datatransfer.Clipboard, setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner], void, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, clipboard>
<SAD, paste[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.awt.datatransfer.Clipboard, setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner], void, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, clipboard>
<SAD, grabFocus[], SADNESS, InsertClassName, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<InsertClassName, getClassArray[], BackStab[], InsertClassName, getClassName[], java.lang.String, null, nothing here>
<java.util.Arrays, sort[int[]], void, InsertClassName, getClassName[], java.lang.String, null, Arrays>
<SAD, getCaretLine[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<SAD, getCaretPosition[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<SAD, getText[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<SAD, getLine[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, classes[i]>
<SAD, getName[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, classes[i]>
<java.lang.String, indexOf[java.lang.String, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<SAD, getLineStartOffset[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<SAD, findWordEnd[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, TextUtilities>
<java.lang.String, indexOf[java.lang.String, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, indexOf[java.lang.String, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, indexOf[int, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<SAD, findMatchingBracket[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, TextUtilities>
<SAD, getDocument[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<java.lang.String, indexOf[int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, indexOf[int, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, length[], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, length[], int, InsertClassName, getClassName[], java.lang.String, null, text>
<SAD, getLineEndOffset[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<SAD, getLineOfOffset[], SADNESS, InsertClassName, getClassName[], java.lang.String, null, textArea>
<java.lang.String, indexOf[java.lang.String, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, lastIndexOf[java.lang.String, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, lastIndexOf[int, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<java.lang.String, lastIndexOf[int, int], int, InsertClassName, getClassName[], java.lang.String, null, text>
<SAD, breadthFirstEnumeration[], SADNESS, InsertClassName, getClassArray[], BackStab[], null, root>
<java.util.Enumeration, hasMoreElements[], boolean, InsertClassName, getClassArray[], BackStab[], null, treeEnum>
<SAD, getUserObject[], SADNESS, InsertClassName, getClassArray[], BackStab[], null, nextElement())>
<java.util.Enumeration, nextElement[], java.lang.Object, InsertClassName, getClassArray[], BackStab[], getUserObject[], treeEnum>
<SAD, fromElement[], SADNESS, InsertClassName, getClassArray[], BackStab[], null, BackStab>
<SAD, isInterface[], SADNESS, InsertClassName, getClassArray[], BackStab[], null, bs>
<SAD, isClass[], SADNESS, InsertClassName, getClassArray[], BackStab[], null, bs>
<java.util.Vector, add[java.lang.Object], boolean, InsertClassName, getClassArray[], BackStab[], null, workVector>
<java.util.Vector, toArray[java.lang.Object[]], java.lang.Object[], InsertClassName, getClassArray[], BackStab[], null, workVector>
<SAD, addAction[], SADNESS, JBrowsePlugin, start[], void, null, Jext>
<SAD, getJextParent[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, indexOfComponent[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, indexOfComponent[], view>
<SAD, remove[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, remove[], view>
<SAD, getCursor[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, view>
<SAD, setCursor[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, view>
<SAD, addTreeSelectionListener[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, umlTree>
<SAD, addMouseListener[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, umlTree>
<SAD, addJextListener[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, view>
<SAD, add[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, add[], view>
<SAD, setSelectedComponent[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, setSelectedComponent[], view>
<SAD, setCursor[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, view>
<SAD, setCursor[], SADNESS, JBrowsePlugin.OpenAction, actionPerformed[java.awt.event.ActionEvent], void, null, view>
<SAD, getPreferredSize[], SADNESS, JBrowsePlugin.OptPane, getComponent[], java.awt.Component, null, this>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, JBrowsePlugin.OptPane, getComponent[], java.awt.Component, null, scroller>
<SAD, getProperty[], SADNESS, JBrowsePlugin.PropAccessor, getProperty[java.lang.String], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, JBrowsePlugin.PropAccessor, getProperty[java.lang.String, java.lang.String], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, JBrowsePlugin.PropAccessor, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, Jext>
<SAD, setProperty[], SADNESS, JBrowsePlugin.PropAccessor, setProperty[java.lang.String, java.lang.String], java.lang.Object, null, Jext>
<SAD, getRowForLocation[], SADNESS, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, umlTree>
<java.awt.event.MouseEvent, getX[], int, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<java.awt.event.MouseEvent, getY[], int, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<SAD, getMaxSelectionRow[], SADNESS, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, umlTree>
<java.awt.event.MouseEvent, getClickCount[], int, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<JBrowsePlugin$TreeEventAdapter, verifyBuffer[], boolean, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, getLastSelectedPathComponent[], SADNESS, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, umlTree>
<JBrowsePlugin$TreeEventAdapter, setPosition[UMLTree.Node], void, JBrowsePlugin.TreeEventAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, isSelectionEmpty[], SADNESS, JBrowsePlugin.TreeEventAdapter, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, umlTree>
<JBrowsePlugin$TreeEventAdapter, verifyBuffer[], boolean, JBrowsePlugin.TreeEventAdapter, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, nothing here>
<SAD, getLastPathComponent[], SADNESS, JBrowsePlugin.TreeEventAdapter, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getSelectionPath()>
<SAD, getSelectionPath[], SADNESS, JBrowsePlugin.TreeEventAdapter, valueChanged[javax.swing.event.TreeSelectionEvent], void, getLastPathComponent[], umlTree>
<JBrowsePlugin$TreeEventAdapter, setPosition[UMLTree.Node], void, JBrowsePlugin.TreeEventAdapter, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, nothing here>
<SAD, getPosition[], SADNESS, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, node>
<SAD, getDefaultRootElement[], SADNESS, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, getDocument()>
<SAD, getDocument[], SADNESS, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, getDefaultRootElement[], getTextArea()>
<JEditLineSource, getTextArea[], JextTextArea, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, getDocument[], ls>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, map>
<javax.swing.text.Position, getOffset[], int, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, pos>
<SAD, select[], SADNESS, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, select[], view>
<javax.swing.text.Element, getStartOffset[], int, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, JBrowsePlugin.TreeEventAdapter, setPosition[UMLTree.Node], void, null, lineElement>
<SAD, getDocument[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<SAD, getTextArea[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getDocument[], view>
<SAD, getDocument[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<JEditLineSource, getTextArea[], JextTextArea, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getDocument[], ls>
<SAD, getFile[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<JEditLineSource, getTextArea[], JextTextArea, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getFile[], ls>
<SAD, getFile[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<SAD, getTextArea[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getFile[], view>
<java.io.File, getPath[], java.lang.String, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, lsFile>
<SAD, getName[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<JEditLineSource, getTextArea[], JextTextArea, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getName[], ls>
<java.io.File, getPath[], java.lang.String, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, viewFile>
<SAD, getName[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, getTextArea()>
<SAD, getTextArea[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, getName[], view>
<SAD, error[], SADNESS, JBrowsePlugin.TreeEventAdapter, verifyBuffer[], boolean, null, GUIUtilities>
<JEditLineSource, reset[], void, JEditLineSource, JEditLineSource[JextFrame], void, null, nothing here>
<SAD, getTextArea[], SADNESS, JEditLineSource, reset[], void, null, view>
<SAD, getDefaultRootElement[], SADNESS, JEditLineSource, reset[], void, null, getDocument()>
<SAD, getDocument[], SADNESS, JEditLineSource, reset[], void, getDefaultRootElement[], buffer>
<SAD, getFile[], SADNESS, JEditLineSource, reset[], void, null, buffer>
<SAD, getName[], SADNESS, JEditLineSource, reset[], void, null, getFile()>
<SAD, getFile[], SADNESS, JEditLineSource, reset[], void, getName[], buffer>
<SAD, createPosition[], SADNESS, JEditLineSource, createPosition[int], java.lang.Object, null, getDocument()>
<SAD, getDocument[], SADNESS, JEditLineSource, createPosition[int], java.lang.Object, createPosition[], buffer>
<javax.swing.text.Element, getElementCount[], int, JEditLineSource, getLine[int], java.lang.String, null, map>
<java.io.PrintStream, println[java.lang.String], void, JEditLineSource, getLine[int], java.lang.String, null, out>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, JEditLineSource, getLine[int], java.lang.String, null, map>
<javax.swing.text.Element, getStartOffset[], int, JEditLineSource, getLine[int], java.lang.String, null, lineElement>
<SAD, getText[], SADNESS, JEditLineSource, getLine[int], java.lang.String, null, getDocument()>
<SAD, getDocument[], SADNESS, JEditLineSource, getLine[int], java.lang.String, getText[], buffer>
<javax.swing.text.Element, getEndOffset[], int, JEditLineSource, getLine[int], java.lang.String, null, lineElement>
<javax.swing.text.Element, getElementCount[], int, JEditLineSource, isExhausted[], boolean, null, map>
<javax.swing.text.Element, getElementCount[], int, JEditLineSource, getTotalLines[], int, null, map>
<JBrowse$Activator, getOwner[], java.awt.Frame, JBrowse, JBrowse[JBrowse.Activator], void, null, activator>
<JBrowse$Activator, getPropertyAccessor[], PropertyAccessor, JBrowse, JBrowse[JBrowse.Activator], void, null, activator>
<JBrowse$Activator, getJBrowseParser[], JBrowseParser, JBrowse, JBrowse[JBrowse.Activator], void, null, activator>
<JBrowse$Activator, getUMLTree[], UMLTree, JBrowse, JBrowse[JBrowse.Activator], void, null, activator>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, JBrowse, JBrowse[JBrowse.Activator], void, null, contentPane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, JBrowse, JBrowse[JBrowse.Activator], void, null, contentPane>
<JBrowse$OptionDialog, getOptions[], Options, JBrowse, JBrowse[JBrowse.Activator], void, null, optionDialog>
<SAD, getFilterOptions[], SADNESS, JBrowse, JBrowse[JBrowse.Activator], void, null, options>
<SAD, getDisplayOptions[], SADNESS, JBrowse, JBrowse[JBrowse.Activator], void, null, options>
<JBrowse$TreePane, init[], void, JBrowse, JBrowse[JBrowse.Activator], void, null, treePane>
<SAD, setOptions[], SADNESS, JBrowse, JBrowse[JBrowse.Activator], void, null, parser>
<SAD, setRootNode[], SADNESS, JBrowse, JBrowse[JBrowse.Activator], void, null, parser>
<java.util.EventObject, getSource[], java.lang.Object, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, e>
<SAD, getShowStatusBar[], SADNESS, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, options>
<javax.swing.JComponent, setVisible[boolean], void, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, statusPanel>
<javax.swing.JComponent, setVisible[boolean], void, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, statusPanel>
<JBrowse, setPreferredSize[], void, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, nothing here>
<SAD, getChildCount[], SADNESS, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, root>
<SAD, display[], SADNESS, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, umlTree>
<SAD, getChildCount[], SADNESS, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, root>
<SAD, updateVisibleToggled[], SADNESS, java.lang.Object, stateChanged[javax.swing.event.ChangeEvent], void, null, umlTree>
<SAD, parse[], SADNESS, JBrowse, JBrowse[JBrowse.Activator], void, null, parser>
<JBrowse, showResults[JBrowseParser.Results], void, JBrowse, JBrowse[JBrowse.Activator], void, null, nothing here>
<JBrowse, showResults[JBrowseParser.Results], void, JBrowse, JBrowse[JBrowse.Activator], void, null, nothing here>
<java.awt.Component, setCursor[java.awt.Cursor], void, JBrowse, parseNow[], void, null, nothing here>
<SAD, setModel[], SADNESS, JBrowse, parseNow[], void, null, umlTree>
<SAD, parse[], SADNESS, JBrowse, parseNow[], void, null, parser>
<JBrowse, showResults[JBrowseParser.Results], void, JBrowse, parseNow[], void, null, nothing here>
<java.awt.Component, paintAll[java.awt.Graphics], void, JBrowse, parseNow[], void, null, nothing here>
<javax.swing.JComponent, getGraphics[], java.awt.Graphics, JBrowse, parseNow[], void, null, nothing here>
<java.awt.Component, setCursor[java.awt.Cursor], void, JBrowse, parseNow[], void, null, nothing here>
<SAD, getBatchMode[], SADNESS, JBrowse, jextEventFired[JextEvent], void, null, getJextFrame()>
<SAD, getJextFrame[], SADNESS, JBrowse, jextEventFired[JextEvent], void, getBatchMode[], evt>
<SAD, getWhat[], SADNESS, JBrowse, jextEventFired[JextEvent], void, null, evt>
<JBrowse, parseNow[], void, JBrowse, jextEventFired[JextEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<JBrowse, parseNow[], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<JBrowse, setPreferredSize[], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<JBrowse$OptionDialog, reInit[], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Toolkit, getScreenSize[], java.awt.Dimension, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, getScreenSize[], nothing here>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Component, getLocation[], java.awt.Point, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Window, setLocation[int, int], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Window, setLocation[int, int], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Window, setLocation[int, int], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Dialog, setVisible[boolean], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<java.awt.Component, paintAll[java.awt.Graphics], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, optionDialog>
<javax.swing.JComponent, getGraphics[], java.awt.Graphics, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Component, paintAll[java.awt.Graphics], void, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JComponent, getGraphics[], java.awt.Graphics, JBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Container, validate[], void, JBrowse, setPreferredSize[], void, null, topPanel>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, setPreferredSize[], void, null, nothing here>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, setPreferredSize[], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, JBrowse, setPreferredSize[], void, getSize[], scpTreePane>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, JBrowse, setPreferredSize[], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, JBrowse, setPreferredSize[], void, getPreferredSize[], scpTreePane>
<SAD, getPreferredSize[], SADNESS, JBrowse, setPreferredSize[], void, null, umlTree>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse, setPreferredSize[], void, null, getVerticalScrollBar()>
<javax.swing.JScrollPane, getVerticalScrollBar[], javax.swing.JScrollBar, JBrowse, setPreferredSize[], void, setVisible[boolean], scpTreePane>
<java.awt.Component, isVisible[], boolean, JBrowse, setPreferredSize[], void, null, getVerticalScrollBar()>
<javax.swing.JScrollPane, getVerticalScrollBar[], javax.swing.JScrollBar, JBrowse, setPreferredSize[], void, isVisible[], scpTreePane>
<java.awt.Component, isVisible[], boolean, JBrowse, setPreferredSize[], void, null, statusPanel>
<java.awt.Container, validate[], void, JBrowse, setPreferredSize[], void, null, statusPanel>
<java.lang.Math, max[int, int], int, JBrowse, setPreferredSize[], void, null, Math>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, JBrowse, setPreferredSize[], void, null, statusPanel>
<java.lang.Math, max[int, int], int, JBrowse, setPreferredSize[], void, null, Math>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, JBrowse, setPreferredSize[], void, null, topPanel>
<java.awt.Component, setSize[java.awt.Dimension], void, JBrowse, setPreferredSize[], void, null, nothing here>
<java.awt.Component, paintAll[java.awt.Graphics], void, JBrowse, setPreferredSize[], void, null, nothing here>
<javax.swing.JComponent, getGraphics[], java.awt.Graphics, JBrowse, setPreferredSize[], void, null, nothing here>
<SAD, display[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, umlTree>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse, showResults[JBrowseParser.Results], void, null, classLabel>
<SAD, getClassCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse, showResults[JBrowseParser.Results], void, null, interfaceLabel>
<SAD, getInterfaceCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse, showResults[JBrowseParser.Results], void, null, attributeLabel>
<SAD, getObjAttrCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<SAD, getPrimAttrCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse, showResults[JBrowseParser.Results], void, null, methodLabel>
<SAD, getMethodCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<SAD, getErrorCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse, showResults[JBrowseParser.Results], void, null, errorLabel>
<SAD, getErrorCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse, showResults[JBrowseParser.Results], void, null, errorLabel>
<java.awt.Container, validate[], void, JBrowse, showResults[JBrowseParser.Results], void, null, topPanel>
<java.awt.Component, getSize[], java.awt.Dimension, JBrowse, showResults[JBrowseParser.Results], void, null, nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, JBrowse, showResults[JBrowseParser.Results], void, null, topPanel>
<JBrowse, setPreferredSize[], void, JBrowse, showResults[JBrowseParser.Results], void, null, nothing here>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse, showResults[JBrowseParser.Results], void, null, errorLabel>
<SAD, getClassCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<SAD, getInterfaceCount[], SADNESS, JBrowse, showResults[JBrowseParser.Results], void, null, results>
<java.awt.Toolkit, beep[], void, JBrowse, showResults[JBrowseParser.Results], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, JBrowse, showResults[JBrowseParser.Results], void, beep[], nothing here>
<java.awt.Component, setName[java.lang.String], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, this>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, this>
<java.lang.Class, getResource[java.lang.String], java.net.URL, JBrowse.TreePane, TreePane[java.lang.String], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends JBrowse.TreePane>, JBrowse.TreePane, TreePane[java.lang.String], void, getResource[java.lang.String], this>
<java.lang.Class, getResource[java.lang.String], java.net.URL, JBrowse.TreePane, TreePane[java.lang.String], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends JBrowse.TreePane>, JBrowse.TreePane, TreePane[java.lang.String], void, getResource[java.lang.String], this>
<java.lang.Class, getResource[java.lang.String], java.net.URL, JBrowse.TreePane, TreePane[java.lang.String], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends JBrowse.TreePane>, JBrowse.TreePane, TreePane[java.lang.String], void, getResource[java.lang.String], this>
<javax.swing.AbstractButton, setMargin[java.awt.Insets], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, parseBtn>
<javax.swing.AbstractButton, setMargin[java.awt.Insets], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, resizeBtn>
<javax.swing.AbstractButton, setMargin[java.awt.Insets], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, configBtn>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, parseBtn>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, resizeBtn>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, configBtn>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, parseBtn>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, resizeBtn>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, configBtn>
<SAD, getIcon[], SADNESS, JBrowse.TreePane, TreePane[java.lang.String], void, null, ERROR>
<javax.swing.JLabel, setIconTextGap[int], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, errorLabel>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, errorLabel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, TreePane[java.lang.String], void, null, leftPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, TreePane[java.lang.String], void, null, leftPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, TreePane[java.lang.String], void, null, leftPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, TreePane[java.lang.String], void, null, leftPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, topPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, this>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, JBrowse.TreePane, TreePane[java.lang.String], void, null, this>
<SAD, getIcon[], SADNESS, JBrowse.TreePane, init[], void, null, CLASS>
<SAD, getIcon[], SADNESS, JBrowse.TreePane, init[], void, null, INTERFACE>
<SAD, getIcon[], SADNESS, JBrowse.TreePane, init[], void, null, ATTRIBUTE>
<SAD, getIcon[], SADNESS, JBrowse.TreePane, init[], void, null, METHOD>
<javax.swing.JLabel, setIconTextGap[int], void, JBrowse.TreePane, init[], void, null, classLabel>
<javax.swing.JLabel, setIconTextGap[int], void, JBrowse.TreePane, init[], void, null, interfaceLabel>
<javax.swing.JLabel, setIconTextGap[int], void, JBrowse.TreePane, init[], void, null, attributeLabel>
<javax.swing.JLabel, setIconTextGap[int], void, JBrowse.TreePane, init[], void, null, methodLabel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, init[], void, null, classLabel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, init[], void, null, interfaceLabel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, init[], void, null, attributeLabel>
<javax.swing.JComponent, setToolTipText[java.lang.String], void, JBrowse.TreePane, init[], void, null, methodLabel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowse.TreePane, init[], void, null, classLabel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowse.TreePane, init[], void, null, interfaceLabel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowse.TreePane, init[], void, null, attributeLabel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowse.TreePane, init[], void, null, methodLabel>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowse.TreePane, init[], void, null, classLabel>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowse.TreePane, init[], void, null, interfaceLabel>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowse.TreePane, init[], void, null, attributeLabel>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowse.TreePane, init[], void, null, methodLabel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, init[], void, null, statusPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, init[], void, null, statusPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, init[], void, null, statusPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.TreePane, init[], void, null, statusPanel>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, JBrowse.TreePane, init[], void, null, this>
<SAD, getShowStatusBar[], SADNESS, JBrowse.TreePane, init[], void, null, options>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse.TreePane, init[], void, null, statusPanel>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse.TreePane, init[], void, null, statusPanel>
<SAD, getSourceName[], SADNESS, JBrowse.TreePane, init[], void, null, parser>
<SAD, usesJavaTokenMarker[], SADNESS, JBrowse.TreePane, init[], void, null, ((JBrowseLineParser)parser)>
<java.lang.String, endsWith[java.lang.String], boolean, JBrowse.TreePane, init[], void, null, toUpperCase()>
<java.lang.String, toUpperCase[], java.lang.String, JBrowse.TreePane, init[], void, endsWith[java.lang.String], fileName>
<javax.swing.JLabel, setText[java.lang.String], void, JBrowse.TreePane, init[], void, null, errorLabel>
<java.awt.Container, validate[], void, JBrowse.TreePane, init[], void, null, topPanel>
<SAD, setPropertyAccessor[], SADNESS, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, optionPane>
<JBrowse, getPropertyAccessor[], PropertyAccessor, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, parent>
<SAD, load[], SADNESS, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, optionPane>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, add[java.lang.String, java.awt.Component], nothing here>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, btnSetAsDefaults>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, buttons>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, btnRestoreDefaults>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, buttons>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, JBrowse.OptionDialog, OptionDialog[java.awt.Frame, JBrowse, java.lang.String], void, add[java.lang.String, java.awt.Component], nothing here>
<SAD, getOptions[], SADNESS, JBrowse.OptionDialog, getOptions[], Options, null, optionPane>
<SAD, setOptions[], SADNESS, JBrowse.OptionDialog, setOptions[], void, null, optionPane>
<SAD, isInitGui[], SADNESS, JBrowse.OptionDialog, reInit[], void, null, optionPane>
<SAD, initGui[], SADNESS, JBrowse.OptionDialog, reInit[], void, null, optionPane>
<java.awt.Window, pack[], void, JBrowse.OptionDialog, reInit[], void, null, nothing here>
<SAD, isInitModel[], SADNESS, JBrowse.OptionDialog, reInit[], void, null, optionPane>
<SAD, initModel[], SADNESS, JBrowse.OptionDialog, reInit[], void, null, optionPane>
<SAD, addChangeListener[], SADNESS, JBrowse.OptionDialog, reInit[], void, null, getOptions()>
<JBrowse$OptionDialog, getOptions[], Options, JBrowse.OptionDialog, reInit[], void, addChangeListener[], nothing here>
<JBrowse, getOptionListener[], javax.swing.event.ChangeListener, JBrowse.OptionDialog, reInit[], void, null, parent>
<java.util.EventObject, getSource[], java.lang.Object, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, save[], SADNESS, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, optionPane>
<SAD, getShowStatusBar[], SADNESS, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, getOptions()>
<JBrowse$OptionDialog, getOptions[], Options, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, getShowStatusBar[], nothing here>
<SAD, load[], SADNESS, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, optionPane>
<SAD, initModel[], SADNESS, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, optionPane>
<JBrowse, showResults[JBrowseParser.Results], void, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getShowStatusBar[], SADNESS, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, getOptions()>
<JBrowse$OptionDialog, getOptions[], Options, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, getShowStatusBar[], nothing here>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, statusPanel>
<javax.swing.JComponent, setVisible[boolean], void, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, statusPanel>
<JBrowse, setPreferredSize[], void, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.lang.System, getProperty[java.lang.String], java.lang.String, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, System>
<java.lang.String, startsWith[java.lang.String], boolean, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, osName>
<java.lang.System, getProperty[java.lang.String], java.lang.String, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, System>
<java.lang.String, substring[int, int], java.lang.String, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, mrjVersion>
<java.lang.Double, doubleValue[], double, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, valueOf(majorMRJVersion)>
<java.lang.Double, valueOf[java.lang.String], java.lang.Double, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, doubleValue[], Double>
<java.lang.String, startsWith[java.lang.String], boolean, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, osName>
<java.lang.String, indexOf[java.lang.String], int, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, osName>
<BrowserLauncher, loadClasses[], boolean, JBrowse.OptionDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, getDeclaredConstructor[java.lang.Class[]], java.lang.reflect.Constructor, BrowserLauncher, loadClasses[], boolean, null, aeTargetClass>
<java.lang.Class, getDeclaredConstructor[java.lang.Class[]], java.lang.reflect.Constructor, BrowserLauncher, loadClasses[], boolean, null, appleEventClass>
<java.lang.Class, getDeclaredConstructor[java.lang.Class[]], java.lang.reflect.Constructor, BrowserLauncher, loadClasses[], boolean, null, aeDescClass>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, osUtilsClass>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, appleEventClass>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, appleEventClass>
<java.lang.Class, getDeclaredField[java.lang.String], java.lang.reflect.Field, BrowserLauncher, loadClasses[], boolean, null, aeClass>
<java.lang.reflect.Field, get[java.lang.Object], java.lang.Object, BrowserLauncher, loadClasses[], boolean, null, keyDirectObjectField>
<java.lang.Class, getDeclaredField[java.lang.String], java.lang.reflect.Field, BrowserLauncher, loadClasses[], boolean, null, appleEventClass>
<java.lang.reflect.Field, get[java.lang.Object], java.lang.Object, BrowserLauncher, loadClasses[], boolean, null, autoGenerateReturnIDField>
<java.lang.Class, getDeclaredField[java.lang.String], java.lang.reflect.Field, BrowserLauncher, loadClasses[], boolean, null, appleEventClass>
<java.lang.reflect.Field, get[java.lang.Object], java.lang.Object, BrowserLauncher, loadClasses[], boolean, null, anyTransactionIDField>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, cnfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsme>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, iae>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, getDeclaredField[java.lang.String], java.lang.reflect.Field, BrowserLauncher, loadClasses[], boolean, null, mrjFileUtilsClass>
<java.lang.reflect.Field, get[java.lang.Object], java.lang.Object, BrowserLauncher, loadClasses[], boolean, null, systemFolderField>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, mrjFileUtilsClass>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, mrjFileUtilsClass>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, mrjFileUtilsClass>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, cnfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsme>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, se>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, iae>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, getConstructor[java.lang.Class[]], java.lang.reflect.Constructor, BrowserLauncher, loadClasses[], boolean, null, linker>
<java.lang.reflect.Constructor, newInstance[java.lang.Object[]], java.lang.Object, BrowserLauncher, loadClasses[], boolean, null, constructor>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, cnfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsme>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, ite>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, ie>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, iae>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, BrowserLauncher, loadClasses[], boolean, null, Class>
<java.lang.Class, getDeclaredMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, BrowserLauncher, loadClasses[], boolean, null, mrjFileUtilsClass>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, cnfe>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, loadClasses[], boolean, null, nsme>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, makeOSType>
<java.lang.reflect.Constructor, newInstance[java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, aeTargetConstructor>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, makeOSType>
<java.lang.reflect.Constructor, newInstance[java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, appleEventConstructor>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, iae>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, ie>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, ite>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, findFolder>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, iare>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, iae>
<java.lang.Object, getClass[], java.lang.Class<? extends java.lang.Throwable>, BrowserLauncher, locateBrowser[], java.lang.Object, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, BrowserLauncher, locateBrowser[], java.lang.Object, getClass[], ite>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, BrowserLauncher, locateBrowser[], java.lang.Object, getMessage[], ite>
<java.io.File, list[], java.lang.String[], BrowserLauncher, locateBrowser[], java.lang.Object, null, systemFolder>
<java.io.File, isFile[], boolean, BrowserLauncher, locateBrowser[], java.lang.Object, null, file>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, getFileType>
<java.lang.String, equals[java.lang.Object], boolean, BrowserLauncher, locateBrowser[], java.lang.Object, null, FINDER_TYPE>
<java.lang.Object, toString[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, fileType>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, locateBrowser[], java.lang.Object, null, getFileCreator>
<java.lang.String, equals[java.lang.Object], boolean, BrowserLauncher, locateBrowser[], java.lang.Object, null, FINDER_CREATOR>
<java.lang.Object, toString[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, fileCreator>
<java.io.File, toString[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, file>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, iare>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, iae>
<java.lang.Object, getClass[], java.lang.Class<? extends java.lang.Throwable>, BrowserLauncher, locateBrowser[], java.lang.Object, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, BrowserLauncher, locateBrowser[], java.lang.Object, getClass[], ite>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, locateBrowser[], java.lang.Object, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, BrowserLauncher, locateBrowser[], java.lang.Object, getMessage[], ite>
<BrowserLauncher, locateBrowser[], java.lang.Object, BrowserLauncher, openURL[java.lang.String], void, null, nothing here>
<java.lang.reflect.Constructor, newInstance[java.lang.Object[]], java.lang.Object, BrowserLauncher, openURL[java.lang.String], void, null, aeDescConstructor>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, openURL[java.lang.String], void, null, putParameter>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, openURL[java.lang.String], void, null, sendNoReply>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, ite>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, iae>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, ie>
<java.lang.Runtime, exec[java.lang.String[]], java.lang.Process, BrowserLauncher, openURL[java.lang.String], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, BrowserLauncher, openURL[java.lang.String], void, exec[java.lang.String[]], Runtime>
<BrowserLauncher, ICStart[int[], int], int, BrowserLauncher, openURL[java.lang.String], void, null, nothing here>
<java.lang.String, getBytes[], byte[], BrowserLauncher, openURL[java.lang.String], void, null, url>
<BrowserLauncher, ICLaunchURL[int, byte[], byte[], int, int[], int[]], int, BrowserLauncher, openURL[java.lang.String], void, null, nothing here>
<BrowserLauncher, ICStop[int[]], int, BrowserLauncher, openURL[java.lang.String], void, null, nothing here>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, BrowserLauncher, openURL[java.lang.String], void, null, openURL>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, ite>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, iae>
<java.lang.Runtime, exec[java.lang.String[]], java.lang.Process, BrowserLauncher, openURL[java.lang.String], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, BrowserLauncher, openURL[java.lang.String], void, exec[java.lang.String[]], Runtime>
<java.lang.Process, waitFor[], int, BrowserLauncher, openURL[java.lang.String], void, null, process>
<java.lang.Process, exitValue[], int, BrowserLauncher, openURL[java.lang.String], void, null, process>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, ie>
<java.lang.Runtime, exec[java.lang.String[]], java.lang.Process, BrowserLauncher, openURL[java.lang.String], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, BrowserLauncher, openURL[java.lang.String], void, exec[java.lang.String[]], Runtime>
<java.lang.Process, waitFor[], int, BrowserLauncher, openURL[java.lang.String], void, null, process>
<java.lang.Runtime, exec[java.lang.String[]], java.lang.Process, BrowserLauncher, openURL[java.lang.String], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, BrowserLauncher, openURL[java.lang.String], void, exec[java.lang.String[]], Runtime>
<java.lang.Throwable, getMessage[], java.lang.String, BrowserLauncher, openURL[java.lang.String], void, null, ie>
<java.lang.Runtime, exec[java.lang.String[]], java.lang.Process, BrowserLauncher, openURL[java.lang.String], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, BrowserLauncher, openURL[java.lang.String], void, exec[java.lang.String[]], Runtime>
<SAD, getName[], SADNESS, JBrowseLineParser, getSourceName[], java.lang.String, null, ls>
<SAD, getTokenMarker[], SADNESS, JBrowseLineParser, usesJavaTokenMarker[], boolean, null, getTextArea()>
<SAD, getTextArea[], SADNESS, JBrowseLineParser, usesJavaTokenMarker[], boolean, getTokenMarker[], ((JEditLineSource)ls)>
<SAD, getFilterOptions[], SADNESS, JBrowseLineParser, setOptions[Options], void, null, options>
<SAD, getDisplayOptions[], SADNESS, JBrowseLineParser, setOptions[Options], void, null, options>
<SAD, reset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, reset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<JBrowseLineParser, isReady[], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, getName[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<java.lang.String, endsWith[java.lang.String], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, toUpperCase()>
<java.lang.String, toUpperCase[], java.lang.String, JBrowseLineParser, parse[], JBrowseParser.Results, endsWith[java.lang.String], fileName>
<java.lang.String, substring[int, int], java.lang.String, JBrowseLineParser, parse[], JBrowseParser.Results, null, fileName>
<java.lang.String, indexOf[int], int, JBrowseLineParser, parse[], JBrowseParser.Results, null, fileName>
<SAD, setName[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, setPosition[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, createPosition[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getChildCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, removeAllChildren[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, getNextToken[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getCurrentPos[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<java.lang.String, charAt[int], char, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, lastMsgStr>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, lastMsgStr>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setAbstract[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setFinal[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setPublic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setStrict[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setSynchronized[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setClass[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, isClassOrInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, isClassOrInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incInterfaceCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, isStatic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incClassCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, incClassCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, isPublic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, className>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getTopLevelPath[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, setTopLevelPath[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getPathFrom[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, getTopLevelPath[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, setTopLevelPath[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getPathFrom[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, lastMsgStr>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "{">
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, isClass[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incInterfaceCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, isStatic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incClassCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, incClassCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setAbstract[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setFinal[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setClass[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setNative[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setPrivate[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setProtected[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setPublic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setStatic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setStrict[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setSynchronized[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setTransient[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setVolatile[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, isPrimitive[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, Attribute)currentElement)>
<SAD, incPrimAttrCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, incObjAttrCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, ",">
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<java.lang.String, toCharArray[], char[], JBrowseLineParser, parse[], JBrowseParser.Results, null, ",;">
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, memberType>
<SAD, getName[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getName[], parentNode>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, isInterface[], parentNode>
<SAD, isValidForConstructor[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, isInterface[], parentNode>
<SAD, isValidForConstructor[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, setConstructor[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, Operation)currentElement)>
<SAD, isBodyRequired[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, Operation)currentElement)>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, incMethodCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, isInterface[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getParentElement()>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, isInterface[], getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<SAD, isValidInterfaceMethod[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, isAbstract[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, isValidAbstractMethod[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, setStatic[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, RWModifier>
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "">
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "">
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "[">
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, addArgument[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, Operation)currentElement)>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, lastToken>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "">
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "[">
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "[">
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "]">
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, "[">
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.Character, isJavaIdentifierStart[char], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, Character>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, skipUntil[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.lang.String, equals[java.lang.Object], boolean, JBrowseLineParser, parse[], JBrowseParser.Results, null, token>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getParentElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, getElement()>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, getParentElement[], parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getParent[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getCurrentPos[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, getMessage[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, e>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getCurrentLineNum[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getCurrentPos[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ts>
<SAD, getStartOffset[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, ls>
<SAD, incErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<SAD, getElement[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, parentNode>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getClassCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, getInterfaceCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<SAD, removeAllChildren[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, setErrorCount[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, results>
<JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, JBrowseLineParser, parse[], JBrowseParser.Results, null, nothing here>
<SAD, getAlphaSort[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, displayOpt>
<SAD, alphaSort[], SADNESS, JBrowseLineParser, parse[], JBrowseParser.Results, null, root>
<SAD, setPosition[], SADNESS, JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, null, node>
<SAD, createPosition[], SADNESS, JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, null, ls>
<SAD, insert[], SADNESS, JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, null, parentNode>
<SAD, getChildCount[], SADNESS, JBrowseLineParser, insertAsNode[UML.Element, int, UMLTree.Node], UMLTree.Node, null, parentNode>
<java.lang.String, toString[], java.lang.String, ParseState, toString[], java.lang.String, null, label>
<java.lang.String, toString[], java.lang.String, ParseSubState, toString[], java.lang.String, null, label>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<JSLineBreaker, init[], void, JSLineBreaker, JSLineBreaker[], void, null, nothing here>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, trim()>
<java.lang.String, trim[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, length[], line>
<java.util.Vector, addElement[java.lang.Object], void, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineVector>
<java.lang.String, charAt[int], char, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, wsBuffer>
<java.lang.String, charAt[int], char, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.String, charAt[int], char, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, key>
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, "(">
<java.lang.String, startsWith[java.lang.String], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, key>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, key>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, key>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, key>
<JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, JSLineBreaker, breakLine[java.lang.String], void, null, nothing here>
<java.lang.StringBuffer, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.StringBuffer, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, wsBuffer>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, previousAfterCut>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, line>
<java.util.Vector, isEmpty[], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.lang.String, length[], int, JSLineBreaker, breakLine[java.lang.String], void, null, breakStr>
<java.lang.StringBuffer, toString[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, outBuffer>
<java.lang.String, substring[int, int], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, outString>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineBuffer>
<JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, JSLineBreaker, breakLine[java.lang.String], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, wsBuffer>
<java.lang.StringBuffer, toString[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineBuffer>
<java.lang.String, substring[int], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, outString>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineBuffer>
<JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, JSLineBreaker, breakLine[java.lang.String], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, wsBuffer>
<java.lang.StringBuffer, toString[], java.lang.String, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineBuffer>
<java.util.Vector, isEmpty[], boolean, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Stack, peek[], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.lang.String, trim[], java.lang.String, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLine>
<java.util.Vector, lastElement[], java.lang.Object, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.lang.String, length[], int, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLine>
<java.lang.String, length[], int, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, previousBrokenLine>
<java.lang.String, startsWith[java.lang.String], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLine>
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ",">
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ",">
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ",">
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ";">
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ")">
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, "]">
<java.util.Vector, setElementAt[java.lang.Object, int], void, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.util.Vector, size[], int, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.lang.String, equals[java.lang.Object], boolean, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, ",">
<java.util.Vector, addElement[java.lang.Object], void, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.lang.Integer, intValue[], int, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, breakStr))>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, prefTable>
<java.lang.Integer, intValue[], int, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, breakStr))>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, prefTable>
<java.util.Vector, size[], int, JSLineBreaker, hasMoreBrokenLines[], boolean, null, brokenLineVector>
<JSLineBreaker, hasMoreBrokenLines[], boolean, JSLineBreaker, nextBrokenLine[], java.lang.String, null, nothing here>
<java.util.Vector, firstElement[], java.lang.Object, JSLineBreaker, nextBrokenLine[], java.lang.String, null, brokenLineVector>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, nextBrokenLine[], java.lang.String, null, brokenLineVector>
<java.io.PrintStream, println[java.lang.String], void, JSLineBreaker.LineBreak, dump[], void, null, out>
<SAD, getVisSymbols[], SADNESS, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, displayOpt>
<java.lang.reflect.Modifier, isPrivate[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isProtected[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isPrivate[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isProtected[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getStaticUlined[], SADNESS, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, displayOpt>
<java.lang.reflect.Modifier, isStatic[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getAbstractItalic[], SADNESS, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, displayOpt>
<java.lang.reflect.Modifier, isAbstract[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isFinal[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getShowMiscMod[], SADNESS, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, displayOpt>
<java.lang.reflect.Modifier, isVolatile[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isTransient[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isSynchronized[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isNative[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<RWModifier, isStrict[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<SAD, getShowIconKeywords[], SADNESS, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, displayOpt>
<RWModifier, isClass[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isInterface[int], boolean, RWModifier, toString[int, Options.DisplayIro], java.lang.String, null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, RWModifier, getVisLevelIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isProtected[int], boolean, RWModifier, getVisLevelIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isPrivate[int], boolean, RWModifier, getVisLevelIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, RWModifier, getTopLevelVisIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, RWModifier, getMemberVisIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isProtected[int], boolean, RWModifier, getMemberVisIndex[int], int, null, nothing here>
<java.lang.reflect.Modifier, isPrivate[int], boolean, RWModifier, getMemberVisIndex[int], int, null, nothing here>
<Options, setShowStatusBar[boolean], void, Options, load[PropertyAccessor], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "off">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setShowAttributes[boolean], void, Options, load[PropertyAccessor], void, null, filterOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setShowPrimitives[boolean], void, Options, load[PropertyAccessor], void, null, filterOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setShowGeneralizations[boolean], void, Options, load[PropertyAccessor], void, null, filterOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setShowThrows[boolean], void, Options, load[PropertyAccessor], void, null, filterOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<java.lang.Integer, parseInt[java.lang.String], int, Options, load[PropertyAccessor], void, null, Integer>
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setTopLevelVisIndex[int], void, Options, load[PropertyAccessor], void, null, filterOpt>
<java.lang.Integer, parseInt[java.lang.String], int, Options, load[PropertyAccessor], void, null, Integer>
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Filter, setMemberVisIndex[int], void, Options, load[PropertyAccessor], void, null, filterOpt>
<Options$Display, setShowArguments[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setShowArgumentNames[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setShowNestedName[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setShowIconKeywords[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setShowMiscMod[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setAlphaSort[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setShowLineNum[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<java.lang.Integer, parseInt[java.lang.String], int, Options, load[PropertyAccessor], void, null, Integer>
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setStyleIndex[int], void, Options, load[PropertyAccessor], void, null, displayOpt>
<Options$Display, setVisSymbols[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setAbstractItalic[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setStaticUlined[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<Options$Display, setTypeIsSuffixed[boolean], void, Options, load[PropertyAccessor], void, null, displayOpt>
<java.lang.String, equals[java.lang.Object], boolean, Options, load[PropertyAccessor], void, null, "on">
<SAD, getProperty[], SADNESS, Options, load[PropertyAccessor], void, null, props>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options, getShowStatusBar[], boolean, Options, save[PropertyAccessor], void, null, nothing here>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Filter, getShowAttributes[], boolean, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Filter, getShowPrimitives[], boolean, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Filter, getShowGeneralizations[], boolean, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Filter, getShowThrows[], boolean, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<java.lang.String, valueOf[int], java.lang.String, Options, save[PropertyAccessor], void, null, String>
<Options$Filter, getTopLevelVisIndex[], int, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<java.lang.String, valueOf[int], java.lang.String, Options, save[PropertyAccessor], void, null, String>
<Options$Filter, getMemberVisIndex[], int, Options, save[PropertyAccessor], void, null, filterOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowArguments[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowArgumentNames[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowNestedName[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowIconKeywords[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowMiscMod[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getAlphaSort[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getShowLineNum[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<java.lang.String, valueOf[int], java.lang.String, Options, save[PropertyAccessor], void, null, String>
<Options$Display, getStyleIndex[], int, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getVisSymbols[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getAbstractItalic[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getStaticUlined[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<SAD, setProperty[], SADNESS, Options, save[PropertyAccessor], void, null, props>
<Options$Display, getTypeIsSuffixed[], boolean, Options, save[PropertyAccessor], void, null, displayOpt>
<Options$Filter, toString[], java.lang.String, Options, toString[], java.lang.String, null, filterOpt>
<Options$Display, toString[], java.lang.String, Options, toString[], java.lang.String, null, displayOpt>
<SAD, addComponent[], SADNESS, ClassBrowserOptions, ClassBrowserOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, ClassBrowserOptions, ClassBrowserOptions[], void, null, Jext>
<SAD, getProperty[], SADNESS, ClassBrowserOptions, ClassBrowserOptions[], void, null, Jext>
<SAD, setProperty[], SADNESS, ClassBrowserOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, ClassBrowserOptions, save[], void, null, defaultDocURL>
<SAD, init[], SADNESS, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, cb>
<SAD, getProperty[], SADNESS, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, add[java.awt.Component], f>
<SAD, setFrame[], SADNESS, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, cb>
<java.awt.Window, setSize[java.awt.Dimension], void, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, f>
<javax.swing.JFrame, setDefaultCloseOperation[int], void, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, f>
<javax.swing.JFrame, setIconImage[java.awt.Image], void, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, f>
<SAD, getJextIconImage[], SADNESS, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, GUIUtilities>
<SAD, centerComponent[], SADNESS, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.awt.Window, setVisible[boolean], void, ClassBrowserGUI, actionPerformed[java.awt.event.ActionEvent], void, null, f>
<SAD, getFilterOptions[], SADNESS, JBrowseParser.LineSource, createPosition[int], java.lang.Object, null, options>
<SAD, getDisplayOptions[], SADNESS, JBrowseParser.LineSource, createPosition[int], java.lang.Object, null, options>
<SAD, setLayout[], SADNESS, JBrowseOptionPane, JBrowseOptionPane[], void, null, nothing here>
<SAD, load[], SADNESS, JBrowseOptionPane, JBrowseOptionPane[], void, null, options>
<JBrowseOptionPane, initGui[], void, JBrowseOptionPane, JBrowseOptionPane[], void, null, nothing here>
<JBrowseOptionPane, initModel[], void, JBrowseOptionPane, JBrowseOptionPane[], void, null, nothing here>
<SAD, setName[], SADNESS, JBrowseOptionPane, JBrowseOptionPane[java.lang.String], void, null, nothing here>
<SAD, setLayout[], SADNESS, JBrowseOptionPane, JBrowseOptionPane[java.lang.String], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, isSelected[], cbxShowAttributes>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setEnabled[], cbxShowPrimitives>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setSelected[], cbxShowPrimitives>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setEnabled[], cbxShowPrimitives>
<javax.swing.JComboBox, getSelectedIndex[], int, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, cmbTopLevelVis>
<javax.swing.JComboBox, getSelectedIndex[], int, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, cmbMemberVis>
<javax.swing.JComboBox, getSelectedIndex[], int, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, cmbStyle>
<JBrowseOptionPane, refreshDisplayOptions[int], void, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, isSelected[], cbxShowArguments>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setEnabled[], cbxShowArgumentNames>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setSelected[], cbxShowArgumentNames>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, setEnabled[], cbxShowArgumentNames>
<JBrowseOptionPane, setOptions[], void, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getListener[], SADNESS, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, options>
<javax.swing.event.ChangeListener, stateChanged[javax.swing.event.ChangeEvent], void, JBrowseOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, cl>
<SAD, load[], SADNESS, JBrowseOptionPane, load[], void, null, options>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getName[], SADNESS, JBrowseOptionPane, initGui[], void, null, nothing here>
<javax.swing.JComponent, setFont[java.awt.Font], void, JBrowseOptionPane, initGui[], void, null, titleLabel>
<JBrowseOptionPane, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, nothing here>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane, initGui[], void, null, generalPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxStatusBar>
<JBrowseOptionPane, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, nothing here>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane, initGui[], void, null, attrPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane, initGui[], void, null, attrPanel>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowAttributes>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowPrimitives>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowGeneralizations>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowThrows>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, JBrowseOptionPane, initGui[], void, null, cmbTopLevelVis>
<JBrowseOptionPane$OptionPanel, addComponent[java.lang.String, java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, JBrowseOptionPane, initGui[], void, null, cmbTopLevelVis>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, JBrowseOptionPane, initGui[], void, null, cmbMemberVis>
<JBrowseOptionPane$OptionPanel, addComponent[java.lang.String, java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, filterPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, JBrowseOptionPane, initGui[], void, null, cmbMemberVis>
<JBrowseOptionPane, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, nothing here>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane, initGui[], void, null, argPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowArguments>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane, initGui[], void, null, argPanel>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowArgumentNames>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowNestedName>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowIconKeywords>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowMiscMod>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxAlphaSort>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxShowLineNum>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, JBrowseOptionPane, initGui[], void, null, cmbStyle>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, JBrowseOptionPane, initGui[], void, null, cmbStyle>
<JBrowseOptionPane$OptionPanel, addComponent[java.lang.String, java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, getProperty[], SADNESS, JBrowseOptionPane, initGui[], void, null, props>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxVisSymbols>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxAbstractItalic>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxStaticUlined>
<SAD, addActionListener[], SADNESS, JBrowseOptionPane, initGui[], void, null, cbxTypeIsSuffixed>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<JBrowseOptionPane$OptionPanel, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, displayPanel>
<JBrowseOptionPane, addComponent[java.awt.Component], void, JBrowseOptionPane, initGui[], void, null, nothing here>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxStatusBar>
<SAD, getShowStatusBar[], SADNESS, JBrowseOptionPane, initModel[], void, null, options>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowAttributes>
<SAD, getShowAttributes[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowPrimitives>
<SAD, getShowPrimitives[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowGeneralizations>
<SAD, getShowGeneralizations[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowThrows>
<SAD, getShowThrows[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<javax.swing.JComboBox, setSelectedIndex[int], void, JBrowseOptionPane, initModel[], void, null, cmbTopLevelVis>
<SAD, getTopLevelVisIndex[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<javax.swing.JComboBox, setSelectedIndex[int], void, JBrowseOptionPane, initModel[], void, null, cmbMemberVis>
<SAD, getMemberVisIndex[], SADNESS, JBrowseOptionPane, initModel[], void, null, filterOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowArguments>
<SAD, getShowArguments[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowArgumentNames>
<SAD, getShowArgumentNames[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowNestedName>
<SAD, getShowNestedName[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowIconKeywords>
<SAD, getShowIconKeywords[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowMiscMod>
<SAD, getShowMiscMod[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxAlphaSort>
<SAD, getAlphaSort[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowLineNum>
<SAD, getShowLineNum[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<javax.swing.JComboBox, setSelectedIndex[int], void, JBrowseOptionPane, initModel[], void, null, cmbStyle>
<SAD, getStyleIndex[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxVisSymbols>
<SAD, getVisSymbols[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxAbstractItalic>
<SAD, getAbstractItalic[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxStaticUlined>
<SAD, getStaticUlined[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxTypeIsSuffixed>
<SAD, getTypeIsSuffixed[], SADNESS, JBrowseOptionPane, initModel[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, isSelected[], cbxShowArguments>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setEnabled[], cbxShowArgumentNames>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowArgumentNames>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setEnabled[], cbxShowArgumentNames>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, isSelected[], cbxShowAttributes>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setEnabled[], cbxShowPrimitives>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setSelected[], cbxShowPrimitives>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, initModel[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, initModel[], void, setEnabled[], cbxShowPrimitives>
<JBrowseOptionPane, refreshDisplayOptions[int], void, JBrowseOptionPane, initModel[], void, null, nothing here>
<SAD, save[], SADNESS, JBrowseOptionPane, save[], void, null, options>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxVisSymbols>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxAbstractItalic>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxStaticUlined>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxTypeIsSuffixed>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxVisSymbols>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxAbstractItalic>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxStaticUlined>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxTypeIsSuffixed>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxVisSymbols>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxAbstractItalic>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxStaticUlined>
<SAD, setSelected[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setSelected[], cbxTypeIsSuffixed>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxVisSymbols>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxAbstractItalic>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxStaticUlined>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxTypeIsSuffixed>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxVisSymbols>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxAbstractItalic>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxStaticUlined>
<SAD, setEnabled[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, refreshDisplayOptions[int], void, setEnabled[], cbxTypeIsSuffixed>
<SAD, setShowStatusBar[], SADNESS, JBrowseOptionPane, setOptions[], void, null, options>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxStatusBar>
<SAD, setShowAttributes[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowAttributes>
<SAD, setShowPrimitives[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowPrimitives>
<SAD, setShowGeneralizations[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowGeneralizations>
<SAD, setShowThrows[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowThrows>
<SAD, setTopLevelVisIndex[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, setMemberVisIndex[], SADNESS, JBrowseOptionPane, setOptions[], void, null, filterOpt>
<SAD, setShowArguments[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowArguments>
<SAD, setShowArgumentNames[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowArgumentNames>
<SAD, setShowNestedName[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowNestedName>
<SAD, setShowIconKeywords[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowIconKeywords>
<SAD, setShowMiscMod[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowMiscMod>
<SAD, setAlphaSort[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxAlphaSort>
<SAD, setShowLineNum[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxShowLineNum>
<SAD, setStyleIndex[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, setVisSymbols[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxVisSymbols>
<SAD, setAbstractItalic[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxAbstractItalic>
<SAD, setStaticUlined[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxStaticUlined>
<SAD, setTypeIsSuffixed[], SADNESS, JBrowseOptionPane, setOptions[], void, null, displayOpt>
<SAD, isSelected[], SADNESS, JBrowseOptionPane, setOptions[], void, null, getModel()>
<SAD, getModel[], SADNESS, JBrowseOptionPane, setOptions[], void, isSelected[], cbxTypeIsSuffixed>
<SAD, setConstraints[], SADNESS, JBrowseOptionPane, addComponent[java.awt.Component], void, null, gridBag>
<SAD, add[], SADNESS, JBrowseOptionPane, addComponent[java.awt.Component], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, JBrowseOptionPane.OptionPanel, OptionPanel[], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, JBrowseOptionPane.OptionPanel, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane.OptionPanel, addComponent[java.lang.String, java.awt.Component], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, JBrowseOptionPane.OptionPanel, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane.OptionPanel, addComponent[java.lang.String, java.awt.Component], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, JBrowseOptionPane.OptionPanel, addComponent[java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, JBrowseOptionPane.OptionPanel, addComponent[java.awt.Component], void, null, nothing here>
<SAD, addComponent[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<SAD, setSelected[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, breakBracket>
<java.lang.String, equals[java.lang.Object], boolean, BeautifierOptions, BeautifierOptions[], void, null, "true">
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<SAD, setSelected[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, indentSwitch>
<java.lang.String, equals[java.lang.Object], boolean, BeautifierOptions, BeautifierOptions[], void, null, "true">
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, BeautifierOptions, BeautifierOptions[], void, null, prefLineLength>
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, BeautifierOptions, BeautifierOptions[], void, null, prefLineLength>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, BeautifierOptions, BeautifierOptions[], void, null, Cursor>
<SAD, getProperty[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, Jext>
<javax.swing.JComponent, setBackground[java.awt.Color], void, BeautifierOptions, BeautifierOptions[], void, null, settingsInfo>
<SAD, getBackground[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, nothing here>
<javax.swing.text.JTextComponent, setEditable[boolean], void, BeautifierOptions, BeautifierOptions[], void, null, settingsInfo>
<javax.swing.JTextArea, setLineWrap[boolean], void, BeautifierOptions, BeautifierOptions[], void, null, settingsInfo>
<javax.swing.JTextArea, setWrapStyleWord[boolean], void, BeautifierOptions, BeautifierOptions[], void, null, settingsInfo>
<SAD, addComponent[], SADNESS, BeautifierOptions, BeautifierOptions[], void, null, nothing here>
<SAD, setProperty[], SADNESS, BeautifierOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, BeautifierOptions, save[], void, null, breakBracket>
<SAD, setProperty[], SADNESS, BeautifierOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, BeautifierOptions, save[], void, null, indentSwitch>
<SAD, setProperty[], SADNESS, BeautifierOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, BeautifierOptions, save[], void, null, prefLineLength>
<java.util.StringTokenizer, hasMoreTokens[], boolean, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, st>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.util.StringTokenizer, nextToken[], java.lang.String, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, st>
<java.util.Vector, size[], int, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.lang.String, replace[char, char], java.lang.String, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, startsWith[java.lang.String], boolean, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, substring[int], java.lang.String, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, endsWith[java.lang.String], boolean, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, substring[int, int], java.lang.String, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, length[], int, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, lastIndexOf[java.lang.String], int, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, substring[int, int], java.lang.String, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<java.lang.String, substring[int], java.lang.String, ClassBrowser, splitClassname[java.lang.String], java.lang.String[], null, classname>
<ClassBrowser, splitClassname[java.lang.String], java.lang.String[], ClassBrowser, addClass[java.lang.String], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, addClass[java.lang.String], void, null, packages>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, addClass[java.lang.String], void, null, packages>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, addClass[java.lang.String], void, null, pack>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, ClassBrowser, addJar[java.lang.String], void, null, f>
<java.util.Enumeration, hasMoreElements[], boolean, ClassBrowser, addJar[java.lang.String], void, null, e>
<java.util.zip.ZipEntry, getName[], java.lang.String, ClassBrowser, addJar[java.lang.String], void, null, nextElement())>
<java.util.Enumeration, nextElement[], java.lang.Object, ClassBrowser, addJar[java.lang.String], void, getName[], e>
<java.lang.String, endsWith[java.lang.String], boolean, ClassBrowser, addJar[java.lang.String], void, null, name>
<java.lang.String, indexOf[int], int, ClassBrowser, addJar[java.lang.String], void, null, name>
<ClassBrowser, addClass[java.lang.String], void, ClassBrowser, addJar[java.lang.String], void, null, nothing here>
<ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, ClassBrowser, sortMethods[java.lang.reflect.Method[]], void, null, nothing here>
<java.lang.String, compareTo[java.lang.String], int, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, getName()>
<java.lang.reflect.Method, getName[], java.lang.String, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, compareTo[java.lang.String], a[lo]>
<java.lang.reflect.Method, getName[], java.lang.String, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, mid>
<java.lang.String, compareTo[java.lang.String], int, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, getName()>
<java.lang.reflect.Method, getName[], java.lang.String, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, compareTo[java.lang.String], a[hi]>
<java.lang.reflect.Method, getName[], java.lang.String, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, mid>
<ClassBrowser, swap[java.lang.reflect.Method[], int, int], void, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, nothing here>
<ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, nothing here>
<ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, ClassBrowser, sortMethods[java.lang.reflect.Method[], int, int], void, null, nothing here>
<java.util.Vector, size[], int, ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], null, v>
<java.util.Arrays, sort[java.lang.Object[]], void, ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], null, Arrays>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, setClist[java.lang.String], void, null, packages>
<ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], ClassBrowser, setClist[java.lang.String], void, null, nothing here>
<javax.swing.JList, setListData[java.lang.Object[]], void, ClassBrowser, setClist[java.lang.String], void, null, classlist>
<java.lang.reflect.Method, getName[], java.lang.String, ClassBrowser, parseMethods[java.lang.reflect.Method[]], java.lang.String[], null, methods[i]>
<ClassBrowser, sortMethods[java.lang.reflect.Method[]], void, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, nothing here>
<java.lang.reflect.Modifier, isPublic[int], boolean, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, Modifier>
<java.lang.reflect.Method, getModifiers[], int, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, methods[i]>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<java.util.Vector, size[], int, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<javax.swing.JList, setListData[java.lang.Object[]], void, ClassBrowser, setMlist[java.lang.String], void, null, mlist>
<ClassBrowser, setConslist[java.lang.Class], void, ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<ClassBrowser, setTree[java.lang.Class], void, ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, ClassBrowser, setMlist[java.lang.String], void, null, Class>
<java.io.PrintStream, println[java.lang.Object], void, ClassBrowser, setMlist[java.lang.String], void, null, out>
<ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<java.lang.Class, getDeclaredMethods[], java.lang.reflect.Method[], ClassBrowser, setMlist[java.lang.String], void, null, selectedClass>
<javax.swing.JList, setListData[java.lang.Object[]], void, ClassBrowser, setMlist[java.lang.String], void, null, mlist>
<ClassBrowser, parseMethods[java.lang.reflect.Method[]], java.lang.String[], ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<ClassBrowser, setTree[java.lang.Class], void, ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<ClassBrowser, setConslist[java.lang.Class], void, ClassBrowser, setMlist[java.lang.String], void, null, nothing here>
<javax.swing.JList, setListData[java.lang.Object[]], void, ClassBrowser, setConslist[java.lang.Class], void, null, conslist>
<java.lang.Class, getConstructors[], java.lang.reflect.Constructor[], ClassBrowser, setConslist[java.lang.Class], void, null, clas>
<javax.swing.JList, setListData[java.lang.Object[]], void, ClassBrowser, setConslist[java.lang.Class], void, null, conslist>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, ClassBrowser, setMethodLine[java.lang.Object], void, null, methodLine>
<java.lang.Object, toString[], java.lang.String, ClassBrowser, setMethodLine[java.lang.Object], void, null, method>
<javax.swing.JTree, setModel[javax.swing.tree.TreeModel], void, ClassBrowser, setTree[java.lang.Class], void, null, tree>
<java.lang.Class, toString[], java.lang.String, ClassBrowser, setTree[java.lang.Class], void, null, clas>
<javax.swing.tree.DefaultMutableTreeNode, add[javax.swing.tree.MutableTreeNode], void, ClassBrowser, setTree[java.lang.Class], void, null, up>
<java.lang.Class, getSuperclass[], java.lang.Class, ClassBrowser, setTree[java.lang.Class], void, null, clas>
<javax.swing.JTree, setModel[javax.swing.tree.TreeModel], void, ClassBrowser, setTree[java.lang.Class], void, null, tree>
<javax.swing.tree.TreeNode, getParent[], javax.swing.tree.TreeNode, ClassBrowser, setTree[java.lang.Class], void, null, bottom>
<javax.swing.tree.DefaultTreeModel, getPathToRoot[javax.swing.tree.TreeNode], javax.swing.tree.TreeNode[], ClassBrowser, setTree[java.lang.Class], void, null, getModel())>
<javax.swing.JTree, getModel[], javax.swing.tree.TreeModel, ClassBrowser, setTree[java.lang.Class], void, getPathToRoot[javax.swing.tree.TreeNode], tree>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, ClassBrowser, setTree[java.lang.Class], void, null, tree>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, null, jp>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, null, jp>
<java.lang.System, getProperty[java.lang.String], java.lang.String, ClassBrowser, init[], void, null, System>
<ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], ClassBrowser, init[], void, null, nothing here>
<java.lang.String, endsWith[java.lang.String], boolean, ClassBrowser, init[], void, null, paths[i]>
<java.lang.String, endsWith[java.lang.String], boolean, ClassBrowser, init[], void, null, paths[i]>
<java.io.PrintStream, println[java.lang.String], void, ClassBrowser, init[], void, null, out>
<ClassBrowser, addJar[java.lang.String], void, ClassBrowser, init[], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, init[], void, null, packages>
<ClassBrowser, addJar[java.lang.String], void, ClassBrowser, init[], void, null, nothing here>
<java.lang.System, getProperty[java.lang.String], java.lang.String, ClassBrowser, init[], void, null, System>
<java.io.PrintStream, println[java.lang.String], void, ClassBrowser, init[], void, null, out>
<java.util.Hashtable, keys[], java.util.Enumeration, ClassBrowser, init[], void, null, packages>
<java.util.Enumeration, hasMoreElements[], boolean, ClassBrowser, init[], void, null, e>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, init[], void, null, v>
<java.util.Enumeration, nextElement[], java.lang.Object, ClassBrowser, init[], void, null, e>
<ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], ClassBrowser, init[], void, null, nothing here>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, ClassBrowser, init[], void, null, plist>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, ClassBrowser, init[], void, null, plist>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, ClassBrowser, init[], void, null, classlist>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, ClassBrowser, init[], void, null, classlist>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, ClassBrowser, init[], void, null, mlist>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, ClassBrowser, init[], void, null, mlist>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, ClassBrowser, init[], void, null, conslist>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, ClassBrowser, init[], void, null, conslist>
<ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, ClassBrowser, init[], void, null, nothing here>
<ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, ClassBrowser, init[], void, null, nothing here>
<ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, ClassBrowser, init[], void, null, nothing here>
<ClassBrowser, labeledPane[javax.swing.JComponent, java.lang.String], javax.swing.JPanel, ClassBrowser, init[], void, null, nothing here>
<SAD, addActionListener[], SADNESS, ClassBrowser, init[], void, null, apiButton>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, init[], void, null, bottompanel>
<javax.swing.text.JTextComponent, setEditable[boolean], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.JTextArea, setLineWrap[boolean], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.JTextArea, setWrapStyleWord[boolean], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.JTextArea, setFont[java.awt.Font], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.text.JTextComponent, setMargin[java.awt.Insets], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, ClassBrowser, init[], void, null, methodLine>
<javax.swing.BorderFactory, createRaisedBevelBorder[], javax.swing.border.Border, ClassBrowser, init[], void, null, BorderFactory>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, init[], void, null, bottompanel>
<javax.swing.JTree, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], void, ClassBrowser, init[], void, null, tree>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, ClassBrowser, init[], void, null, tree>
<javax.swing.BorderFactory, createRaisedBevelBorder[], javax.swing.border.Border, ClassBrowser, init[], void, null, BorderFactory>
<ClassBrowser, setTree[java.lang.Class], void, ClassBrowser, init[], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, init[], void, null, p>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, init[], void, null, bottompanel>
<javax.swing.JSplitPane, setTopComponent[java.awt.Component], void, ClassBrowser, init[], void, null, nothing here>
<javax.swing.JSplitPane, setBottomComponent[java.awt.Component], void, ClassBrowser, init[], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<javax.swing.JList, getSelectedValue[], java.lang.Object, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, classlist>
<javax.swing.JList, getSelectedValue[], java.lang.Object, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, plist>
<java.lang.String, startsWith[java.lang.String], boolean, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, packagename>
<java.lang.String, startsWith[java.lang.String], boolean, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, packagename>
<java.lang.String, startsWith[java.lang.String], boolean, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, packagename>
<SAD, getProperty[], SADNESS, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<java.lang.String, length[], int, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, packagename>
<java.lang.String, charAt[int], char, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, packagename>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, append(classname)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, append[java.lang.String], buf>
<SAD, openURL[], SADNESS, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, BrowserLauncher>
<java.lang.StringBuffer, toString[], java.lang.String, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<java.io.PrintStream, println[java.lang.String], void, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<java.lang.Throwable, printStackTrace[], void, ClassBrowser, actionPerformed[java.awt.event.ActionEvent], void, null, ioe>
<ClassBrowser, init[], void, ClassBrowser, main[java.lang.String[]], void, null, cb>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, ClassBrowser, main[java.lang.String[]], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, ClassBrowser, main[java.lang.String[]], void, add[java.lang.String, java.awt.Component], f>
<ClassBrowser, setFrame[javax.swing.JFrame], void, ClassBrowser, main[java.lang.String[]], void, null, cb>
<java.awt.Window, setSize[java.awt.Dimension], void, ClassBrowser, main[java.lang.String[]], void, null, f>
<java.awt.Window, show[], void, ClassBrowser, main[java.lang.String[]], void, null, f>
<ClassBrowser, driveToClass[java.lang.String], void, ClassBrowser, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, nothing here>
<java.lang.Object, toString[], java.lang.String, ClassBrowser, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getLastPathComponent()>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.TreeSelectionEvent], void, toString[], getPath()>
<javax.swing.event.TreeSelectionEvent, getPath[], javax.swing.tree.TreePath, ClassBrowser, valueChanged[javax.swing.event.TreeSelectionEvent], void, getLastPathComponent[], e>
<java.util.EventObject, getSource[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, e>
<javax.swing.JList, getSelectedValue[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, plist>
<ClassBrowser, setClist[java.lang.String], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, e>
<javax.swing.JList, getSelectedValue[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, classlist>
<ClassBrowser, setMlist[java.lang.String], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, e>
<javax.swing.JList, getSelectedIndex[], int, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, mlist>
<ClassBrowser, setMethodLine[java.lang.Object], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<ClassBrowser, setMethodLine[java.lang.Object], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, e>
<javax.swing.JList, getSelectedIndex[], int, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, conslist>
<ClassBrowser, setMethodLine[java.lang.Object], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<ClassBrowser, setMethodLine[java.lang.Object], void, ClassBrowser, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<ClassBrowser, splitClassname[java.lang.String], java.lang.String[], ClassBrowser, driveToClass[java.lang.String], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, driveToClass[java.lang.String], void, null, packages>
<java.lang.String, equals[java.lang.Object], boolean, ClassBrowser, driveToClass[java.lang.String], void, null, packagesList[i]>
<javax.swing.JList, setSelectedIndex[int], void, ClassBrowser, driveToClass[java.lang.String], void, null, plist>
<javax.swing.JList, ensureIndexIsVisible[int], void, ClassBrowser, driveToClass[java.lang.String], void, null, plist>
<java.lang.String, equals[java.lang.Object], boolean, ClassBrowser, driveToClass[java.lang.String], void, null, classesList[i]>
<javax.swing.JList, setSelectedIndex[int], void, ClassBrowser, driveToClass[java.lang.String], void, null, classlist>
<javax.swing.JList, ensureIndexIsVisible[int], void, ClassBrowser, driveToClass[java.lang.String], void, null, classlist>
<java.awt.Window, toFront[], void, ClassBrowser, toFront[], void, null, frame>
<javax.swing.JInternalFrame, toFront[], void, ClassBrowser, toFront[], void, null, iframe>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, main[java.lang.String[]], void, null, arg>
<JSFormatter, setBracketBreak[boolean], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, main[java.lang.String[]], void, null, "-ib">
<JSFormatter, setBracketBreak[boolean], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<JSFormatter, setBracketIndent[boolean], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, main[java.lang.String[]], void, null, "-fs">
<JSFormatter, setSwitchIndent[boolean], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, startsWith[java.lang.String], boolean, JSFormatter, main[java.lang.String[]], void, null, arg>
<java.lang.Integer, intValue[], int, JSFormatter, main[java.lang.String[]], void, null, substring(3))>
<java.lang.Integer, valueOf[java.lang.String], java.lang.Integer, JSFormatter, main[java.lang.String[]], void, null, Integer>
<java.lang.String, substring[int], java.lang.String, JSFormatter, main[java.lang.String[]], void, null, arg>
<JSFormatter, setPreferredLineLength[int], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, startsWith[java.lang.String], boolean, JSFormatter, main[java.lang.String[]], void, null, arg>
<java.lang.Integer, intValue[], int, JSFormatter, main[java.lang.String[]], void, null, substring(3))>
<java.lang.Integer, valueOf[java.lang.String], java.lang.Integer, JSFormatter, main[java.lang.String[]], void, null, Integer>
<java.lang.String, substring[int], java.lang.String, JSFormatter, main[java.lang.String[]], void, null, arg>
<JSFormatter, setLineLengthDeviation[int], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, main[java.lang.String[]], void, null, arg>
<JSFormatter, setNestedConnection[boolean], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.String, startsWith[java.lang.String], boolean, JSFormatter, main[java.lang.String[]], void, null, arg>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[java.lang.String], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.io.PrintStream, println[], void, JSFormatter, main[java.lang.String[]], void, null, err>
<java.lang.System, exit[int], void, JSFormatter, main[java.lang.String[]], void, null, System>
<java.util.Vector, addElement[java.lang.Object], void, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, isEmpty[], boolean, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.Throwable, printStackTrace[], void, JSFormatter, main[java.lang.String[]], void, null, e>
<java.io.BufferedReader, close[], void, JSFormatter, main[java.lang.String[]], void, null, inReader>
<java.lang.Throwable, printStackTrace[], void, JSFormatter, main[java.lang.String[]], void, null, e>
<java.io.PrintWriter, close[], void, JSFormatter, main[java.lang.String[]], void, null, outWriter>
<java.util.Vector, size[], int, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, elementAt[int], java.lang.Object, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, JSFormatter, main[java.lang.String[]], void, null, formatter>
<java.lang.Throwable, printStackTrace[], void, JSFormatter, main[java.lang.String[]], void, null, e>
<java.io.PrintWriter, close[], void, JSFormatter, main[java.lang.String[]], void, null, outWriter>
<java.io.BufferedReader, close[], void, JSFormatter, main[java.lang.String[]], void, null, inReader>
<java.lang.Throwable, printStackTrace[], void, JSFormatter, main[java.lang.String[]], void, null, e>
<JSFormatter, init[], void, JSFormatter, JSFormatter[], void, null, nothing here>
<SAD, init[], SADNESS, JSFormatter, init[], void, null, beautifier>
<SAD, init[], SADNESS, JSFormatter, init[], void, null, lineBreaker>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, init[], void, null, bracketBlockStateStack>
<JSFormatter, init[], void, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<JSFormatter, hasMoreFormattedLines[], boolean, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, inReader>
<JSFormatter, formatLine[java.lang.String], void, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<JSFormatter, hasMoreFormattedLines[], boolean, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<java.io.PrintWriter, println[java.lang.String], void, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, outWriter>
<JSFormatter, nextFormattedLine[], java.lang.String, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<JSFormatter, summarize[], void, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<JSFormatter, hasMoreFormattedLines[], boolean, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<java.io.PrintWriter, println[java.lang.String], void, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, outWriter>
<JSFormatter, nextFormattedLine[], java.lang.String, JSFormatter, format[java.io.BufferedReader, java.io.PrintWriter], void, null, nothing here>
<SAD, hasMoreBrokenLines[], SADNESS, JSFormatter, hasMoreFormattedLines[], boolean, null, lineBreaker>
<JSFormatter, isNewLineRequested[], boolean, JSFormatter, hasMoreFormattedLines[], boolean, null, nothing here>
<JSFormatter, hasMoreSummarizedLines[], boolean, JSFormatter, hasMoreFormattedLines[], boolean, null, nothing here>
<JSFormatter, format[java.lang.String], java.lang.String, JSFormatter, hasMoreFormattedLines[], boolean, null, nothing here>
<SAD, breakLine[], SADNESS, JSFormatter, hasMoreFormattedLines[], boolean, null, lineBreaker>
<JSFormatter, format[java.lang.String], java.lang.String, JSFormatter, formatLine[java.lang.String], void, null, nothing here>
<SAD, breakLine[], SADNESS, JSFormatter, formatLine[java.lang.String], void, null, lineBreaker>
<SAD, nextBrokenLine[], SADNESS, JSFormatter, nextFormattedLine[], java.lang.String, null, lineBreaker>
<JSFormatter, formatLine[java.lang.String], void, JSFormatter, summarize[], void, null, nothing here>
<SAD, setBracketIndent[], SADNESS, JSFormatter, setBracketIndent[boolean], void, null, beautifier>
<SAD, setSwitchIndent[], SADNESS, JSFormatter, setSwitchIndent[boolean], void, null, beautifier>
<SAD, setPreferredLineLength[], SADNESS, JSFormatter, setPreferredLineLength[int], void, null, lineBreaker>
<SAD, setLineLengthDeviation[], SADNESS, JSFormatter, setLineLengthDeviation[int], void, null, lineBreaker>
<SAD, setNestedConnection[], SADNESS, JSFormatter, setNestedConnection[boolean], void, null, lineBreaker>
<java.lang.String, indexOf[java.lang.String], int, JSFormatter, isNewLineRequested[], boolean, null, tempLine>
<java.lang.String, indexOf[java.lang.String], int, JSFormatter, isNewLineRequested[], boolean, null, tempLine>
<java.lang.String, indexOf[java.lang.String], int, JSFormatter, isNewLineRequested[], boolean, null, tempLine>
<java.lang.String, length[], int, JSFormatter, hasMoreSummarizedLines[], boolean, null, tempLine>
<java.lang.String, length[], int, JSFormatter, hasMoreSummarizedLines[], boolean, null, tempLine>
<java.lang.String, charAt[int], char, JSFormatter, hasMoreSummarizedLines[], boolean, null, tempLine>
<java.lang.String, charAt[int], char, JSFormatter, hasMoreSummarizedLines[], boolean, null, tempLine>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, trim[], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, substring[int], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "">
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, toString()>
<java.lang.StringBuffer, toString[], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], outBuffer>
<java.lang.StringBuffer, insert[int, char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "{">
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Vector, isEmpty[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, closingHeaders>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, closingHeader>
<java.lang.StringBuffer, toString[], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, setLength[int], void, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "static">
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, headers[h]>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, headers[h]>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, headers[h]>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "else">
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, headers[h]>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.Boolean, booleanValue[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, currentHeader>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, parenDepthsStack>
<java.lang.Boolean, booleanValue[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.util.Vector, isEmpty[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, parenDepthsStack>
<java.lang.Integer, intValue[], int, JSFormatter, format[java.lang.String], java.lang.String, null, pop())>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, intValue[], parenDepthsStack>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, statementHeaders[h]>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, statementHeaders[h]>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, charAt[int], char, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.Character, isLetterOrDigit[char], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, Character>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, Character>
<java.lang.Character, isLetterOrDigit[char], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, Character>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, longOperators[l]>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "--">
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "++">
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, *">
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<JSFormatter, clearPaddingSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, substring[int], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.String, length[], int, JSFormatter, format[java.lang.String], java.lang.String, null, line>
<java.lang.StringBuffer, toString[], java.lang.String, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.StringBuffer, setLength[int], void, JSFormatter, format[java.lang.String], java.lang.String, null, outBuffer>
<java.lang.String, equals[java.lang.Object], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, "">
<SAD, beautify[], SADNESS, JSFormatter, format[java.lang.String], java.lang.String, null, beautifier>
<JSFormatter, appendSpace[java.lang.StringBuffer], void, JSFormatter, format[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, length[], int, JSFormatter, appendSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, charAt[int], char, JSFormatter, appendSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, length[], int, JSFormatter, appendSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, JSFormatter, appendSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, length[], int, JSFormatter, clearPaddingSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, charAt[int], char, JSFormatter, clearPaddingSpace[java.lang.StringBuffer], void, null, buf>
<java.lang.StringBuffer, setLength[int], void, JSFormatter, clearPaddingSpace[java.lang.StringBuffer], void, null, buf>
<java.util.ArrayList, contains[java.lang.Object], boolean, TagsCompletion, unregisterTextArea[JextTextArea], void, null, registeredAreas>
<SAD, removeKeyListener[], SADNESS, TagsCompletion, unregisterTextArea[JextTextArea], void, null, textArea>
<java.util.ArrayList, remove[java.lang.Object], boolean, TagsCompletion, unregisterTextArea[JextTextArea], void, null, registeredAreas>
<java.util.ArrayList, contains[java.lang.Object], boolean, TagsCompletion, registerTextArea[JextTextArea], void, null, registeredAreas>
<SAD, addKeyListener[], SADNESS, TagsCompletion, registerTextArea[JextTextArea], void, null, textArea>
<java.util.ArrayList, add[java.lang.Object], boolean, TagsCompletion, registerTextArea[JextTextArea], void, null, registeredAreas>
<SAD, getWhat[], SADNESS, TagsCompletion, jextEventFired[JextEvent], void, null, evt>
<SAD, getTextArea[], SADNESS, TagsCompletion, jextEventFired[JextEvent], void, null, evt>
<SAD, getColorizingMode[], SADNESS, TagsCompletion, jextEventFired[JextEvent], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<TagsCompletion, registerTextArea[JextTextArea], void, TagsCompletion, jextEventFired[JextEvent], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, TagsCompletion, jextEventFired[JextEvent], void, null, mode>
<TagsCompletion, registerTextArea[JextTextArea], void, TagsCompletion, jextEventFired[JextEvent], void, null, nothing here>
<TagsCompletion, unregisterTextArea[JextTextArea], void, TagsCompletion, jextEventFired[JextEvent], void, null, nothing here>
<TagsCompletion, unregisterTextArea[JextTextArea], void, TagsCompletion, jextEventFired[JextEvent], void, null, nothing here>
<java.awt.event.KeyEvent, getKeyChar[], char, TagsCompletion, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, getModifiers[], int, TagsCompletion, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.lang.Character, isLetterOrDigit[char], boolean, TagsCompletion, keyPressed[java.awt.event.KeyEvent], void, null, Character>
<java.util.EventObject, getSource[], java.lang.Object, TagsCompletion, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, TagsCompletion, keyPressed[java.awt.event.KeyEvent], void, null, SwingUtilities>
<TagsCompletion, showCompleteTagList[JextTextArea], void, java.lang.Object, run[], void, null, nothing here>
<SAD, getDocument[], SADNESS, TagsCompletion, getWord[JextTextArea], java.lang.String, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, TagsCompletion, getWord[JextTextArea], java.lang.String, null, doc>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, TagsCompletion, getWord[JextTextArea], java.lang.String, null, map>
<javax.swing.text.Element, getElementIndex[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, map>
<SAD, getCaretPosition[], SADNESS, TagsCompletion, getWord[JextTextArea], java.lang.String, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, lineElement>
<SAD, getCaretPosition[], SADNESS, TagsCompletion, getWord[JextTextArea], java.lang.String, null, textArea>
<SAD, getText[], SADNESS, TagsCompletion, getWord[JextTextArea], java.lang.String, null, textArea>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, endDelimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, endDelimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, endDelimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, delimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, indexOf[int], int, TagsCompletion, getWord[JextTextArea], java.lang.String, null, endDelimiters>
<java.lang.String, charAt[int], char, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<java.lang.String, substring[int, int], java.lang.String, TagsCompletion, getWord[JextTextArea], java.lang.String, null, _line>
<TagsCompletion, getWord[JextTextArea], java.lang.String, TagsCompletion, showCompleteTagList[JextTextArea], void, null, nothing here>
<java.lang.String, startsWith[java.lang.String], boolean, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<TagsCompletion, buildTagsList[java.lang.String], Tag[], TagsCompletion, showCompleteTagList[JextTextArea], void, null, nothing here>
<java.lang.String, substring[int], java.lang.String, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<SAD, getJextParent[], SADNESS, TagsCompletion, showCompleteTagList[JextTextArea], void, null, textArea>
<java.lang.String, substring[int], java.lang.String, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<java.lang.String, startsWith[java.lang.String], boolean, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<TagsCompletion, buildEntitiesList[java.lang.String], Entity[], TagsCompletion, showCompleteTagList[JextTextArea], void, null, nothing here>
<java.lang.String, substring[int], java.lang.String, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<SAD, getJextParent[], SADNESS, TagsCompletion, showCompleteTagList[JextTextArea], void, null, textArea>
<java.lang.String, substring[int], java.lang.String, TagsCompletion, showCompleteTagList[JextTextArea], void, null, word>
<SAD, read[], SADNESS, TagsCompletion, loadEntitiesList[], void, null, EntitiesListReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, TagsCompletion, loadEntitiesList[], void, null, class>
<SAD, read[], SADNESS, TagsCompletion, loadTagsList[], void, null, TagsListReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, TagsCompletion, loadTagsList[], void, null, class>
<TagsCompletion, loadEntitiesList[], void, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, nothing here>
<java.util.Vector, size[], int, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, entitiesList>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, entitiesList>
<SAD, startsWith[], SADNESS, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, toString()>
<SAD, toString[], SADNESS, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], startsWith[], e>
<java.util.Vector, add[java.lang.Object], boolean, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, size[], int, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, clear[], void, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<TagsCompletion, loadTagsList[], void, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, nothing here>
<java.lang.String, startsWith[java.lang.String], boolean, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tag>
<java.lang.String, substring[int], java.lang.String, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tag>
<java.util.Vector, size[], int, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tagsList>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tagsList>
<SAD, isEmpty[], SADNESS, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, e>
<SAD, startsWith[], SADNESS, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, toString()>
<SAD, toString[], SADNESS, TagsCompletion, buildTagsList[java.lang.String], Tag[], startsWith[], e>
<java.util.Vector, add[java.lang.Object], boolean, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, size[], int, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, clear[], void, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<SAD, addComponent[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, activateTool>
<SAD, getBooleanProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, addActionListener[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, activateTool>
<SAD, addComponent[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, expandFullTag>
<SAD, getBooleanProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, setEnabled[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, expandFullTag>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, activateTool>
<SAD, addComponent[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, xhtml>
<SAD, getBooleanProperty[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, Jext>
<SAD, setEnabled[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, xhtml>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, TagsCompletionOptionPane[], void, null, activateTool>
<java.util.EventObject, getSource[], java.lang.Object, TagsCompletionOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, setEnabled[], SADNESS, TagsCompletionOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, expandFullTag>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, activateTool>
<SAD, setEnabled[], SADNESS, TagsCompletionOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, xhtml>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, actionPerformed[java.awt.event.ActionEvent], void, null, activateTool>
<SAD, setProperty[], SADNESS, TagsCompletionOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, save[], void, null, activateTool>
<SAD, setProperty[], SADNESS, TagsCompletionOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, save[], void, null, expandFullTag>
<SAD, setProperty[], SADNESS, TagsCompletionOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, TagsCompletionOptionPane, save[], void, null, xhtml>
<SAD, getTextArea[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLength[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getText[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLength[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, _tmp>
<java.lang.String, charAt[int], char, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, _tmp>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<HTMLIndenter, parse[java.lang.String, JextTextArea], void, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, _buf>
<SAD, endCompoundEdit[], SADNESS, HTMLIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, trim[], java.lang.String, HTMLIndenter, indentTag[java.lang.String], int, null, tag>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, HTMLIndenter, indentTag[java.lang.String], int, null, INDENT_ON_TAG[i]>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, HTMLIndenter, indentTag[java.lang.String], int, null, tag>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, createIndent[int], java.lang.StringBuffer, null, _buf>
<java.lang.String, length[], int, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, html>
<java.lang.String, charAt[int], char, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, html>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.String, indexOf[int], int, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _tag>
<java.lang.String, length[], int, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _tag>
<java.lang.String, substring[int, int], java.lang.String, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _tag>
<HTMLIndenter, indentTag[java.lang.String], int, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append(createIndent(indent - 1))>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.String], append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append(createIndent(indent))>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.String], append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, buf>
<java.lang.StringBuffer, delete[int, int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.StringBuffer, length[], int, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, buf>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], _buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, _buf>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, append[java.lang.StringBuffer], buf>
<HTMLIndenter, createIndent[int], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, buf>
<SAD, setText[], SADNESS, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, HTMLIndenter, parse[java.lang.String, JextTextArea], void, null, buf>
<SAD, setHandler[], SADNESS, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, parser>
<SAD, parse[], SADNESS, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<java.io.PrintStream, println[char[]], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getLine[], SADNESS, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<SAD, getColumn[], SADNESS, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.PrintStream, println[char[]], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getMessage[], SADNESS, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.lang.Throwable, printStackTrace[], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.InputStream, close[], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, fileName>
<java.io.InputStreamReader, close[], void, EntitiesListReader, read[java.io.InputStream, java.lang.String], boolean, null, reader>
<SAD, getTextArea[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<SAD, getCaretPosition[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElementCount[], int, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<NextTag, seekTag[java.lang.String, int, int], int, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, NextTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, NextTag, seekTag[java.lang.String, int, int], int, null, in>
<java.lang.String, charAt[int], char, NextTag, seekTag[java.lang.String, int, int], int, null, in>
<SAD, addMenu[], SADNESS, HTMLPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, HTMLPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addMenu[], parent>
<SAD, loadMenu[], SADNESS, HTMLPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<java.lang.String, equals[java.lang.Object], boolean, HTMLPlugin, register[JextFrame], void, null, "on">
<SAD, getProperty[], SADNESS, HTMLPlugin, register[JextFrame], void, null, Jext>
<SAD, addJextListener[], SADNESS, HTMLPlugin, register[JextFrame], void, null, parent>
<SAD, addOptionPane[], SADNESS, HTMLPlugin, createOptionPanes[OptionsDialog], void, null, htmlGroup>
<SAD, addOptionPane[], SADNESS, HTMLPlugin, createOptionPanes[OptionsDialog], void, null, htmlGroup>
<SAD, addOptionGroup[], SADNESS, HTMLPlugin, createOptionPanes[OptionsDialog], void, null, parent>
<SAD, addAction[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, HTMLPlugin, start[], void, null, Integer>
<SAD, getProperty[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, setProperty[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<SAD, setProperty[], SADNESS, HTMLPlugin, start[], void, null, Jext>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equals[java.lang.Object], boolean, TagsListHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, startElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, startElement[java.lang.String], void, null, name>
<SAD, addAttribute[], SADNESS, TagsListHandler, startElement[java.lang.String], void, null, tag>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, TagsListHandler, endElement[java.lang.String], void, null, name>
<SAD, add[], SADNESS, TagsListHandler, endElement[java.lang.String], void, null, tagsList>
<java.util.ArrayList, size[], int, Tag, attributesCount[], int, null, attributes>
<java.util.ArrayList, add[java.lang.Object], boolean, Tag, addAttribute[Attribute], void, null, attributes>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getClosingTag[], java.lang.String, null, append(name)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getClosingTag[], java.lang.String, append[char], append("</")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getClosingTag[], java.lang.String, append[java.lang.String], buf>
<java.lang.StringBuffer, toString[], java.lang.String, Tag, getClosingTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.util.ArrayList, size[], int, Tag, getOpeningTag[], java.lang.String, null, attributes>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, append[java.lang.Object], buf>
<java.util.ArrayList, get[int], java.lang.Object, Tag, getOpeningTag[], java.lang.String, null, attributes>
<SAD, getBooleanProperty[], SADNESS, Tag, getOpeningTag[], java.lang.String, null, Jext>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, Tag, getOpeningTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, buf>
<java.util.ArrayList, size[], int, Tag, getFullTag[], java.lang.String, null, attributes>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, append[java.lang.Object], buf>
<java.util.ArrayList, get[int], java.lang.Object, Tag, getFullTag[], java.lang.String, null, attributes>
<SAD, getBooleanProperty[], SADNESS, Tag, getFullTag[], java.lang.String, null, Jext>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, null, append(name)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, append[char], append(">|</")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Tag, getFullTag[], java.lang.String, append[java.lang.String], buf>
<java.lang.StringBuffer, toString[], java.lang.String, Tag, getFullTag[], java.lang.String, null, buf>
<SAD, getTextArea[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSelectedText[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<ToEntities, doEntities[java.lang.String], java.lang.String, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementCount[], int, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<ToEntities, doEntities[java.lang.String], java.lang.String, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, remove[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<SAD, insertString[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, insertString[], textArea>
<SAD, endCompoundEdit[], SADNESS, ToEntities, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, ToEntities, doEntities[java.lang.String], java.lang.String, null, html>
<java.lang.String, charAt[int], char, ToEntities, doEntities[java.lang.String], java.lang.String, null, html>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ToEntities, doEntities[java.lang.String], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, ToEntities, doEntities[java.lang.String], java.lang.String, null, html>
<java.lang.StringBuffer, toString[], java.lang.String, ToEntities, doEntities[java.lang.String], java.lang.String, null, buf>
<SAD, setHandler[], SADNESS, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, parser>
<SAD, parse[], SADNESS, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<java.io.PrintStream, println[char[]], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getLine[], SADNESS, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<SAD, getColumn[], SADNESS, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.PrintStream, println[char[]], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getMessage[], SADNESS, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.lang.Throwable, printStackTrace[], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.InputStream, close[], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, fileName>
<java.io.InputStreamReader, close[], void, TagsListReader, read[java.io.InputStream, java.lang.String], boolean, null, reader>
<SAD, getTextArea[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<SAD, getCaretPosition[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<PreviousTag, seekTag[java.lang.String, int], int, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, PreviousTag, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, charAt[int], char, PreviousTag, seekTag[java.lang.String, int], int, null, in>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, EntitiesListHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, EntitiesListHandler, startElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, EntitiesListHandler, endElement[java.lang.String], void, null, name>
<SAD, add[], SADNESS, EntitiesListHandler, endElement[java.lang.String], void, null, entitiesList>
<SAD, getTextArea[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSelectedText[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<ToAccents, doAccents[java.lang.String], java.lang.String, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementCount[], int, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<ToAccents, doAccents[java.lang.String], java.lang.String, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, remove[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<SAD, insertString[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, insertString[], textArea>
<SAD, endCompoundEdit[], SADNESS, ToAccents, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.lang.String, length[], int, ToAccents, doAccents[java.lang.String], java.lang.String, null, html>
<java.lang.String, charAt[int], char, ToAccents, doAccents[java.lang.String], java.lang.String, null, html>
<java.lang.String, substring[int, int], java.lang.String, ToAccents, doAccents[java.lang.String], java.lang.String, null, html>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, ToAccents, doAccents[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, ToAccents, doAccents[java.lang.String], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, ToAccents, doAccents[java.lang.String], java.lang.String, null, html>
<java.lang.StringBuffer, toString[], java.lang.String, ToAccents, doAccents[java.lang.String], java.lang.String, null, buf>
<SAD, getProperty[], SADNESS, IndenterOptionPane, IndenterOptionPane[], void, null, Jext>
<javax.swing.JComponent, setFont[java.awt.Font], void, IndenterOptionPane, IndenterOptionPane[], void, null, n>
<SAD, addComponent[], SADNESS, IndenterOptionPane, IndenterOptionPane[], void, null, nothing here>
<SAD, addComponent[], SADNESS, IndenterOptionPane, IndenterOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, IndenterOptionPane, IndenterOptionPane[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, IndenterOptionPane, IndenterOptionPane[], void, null, maxLineWidth>
<SAD, getProperty[], SADNESS, IndenterOptionPane, IndenterOptionPane[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, IndenterOptionPane, IndenterOptionPane[], void, null, maxLineWidth>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, IndenterOptionPane, IndenterOptionPane[], void, null, Cursor>
<SAD, setProperty[], SADNESS, IndenterOptionPane, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, IndenterOptionPane, save[], void, null, maxLineWidth>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Attribute, Attribute[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Attribute, Attribute[java.lang.String, java.lang.String], void, null, append('=')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Attribute, Attribute[java.lang.String, java.lang.String], void, append[char], buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, Attribute, Attribute[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, Attribute, Attribute[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, Attribute, Attribute[java.lang.String, java.lang.String], void, null, buf>
<SAD, getTextArea[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, pane>
<SAD, getProperty[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, Jext>
<javax.swing.JComponent, setFont[java.awt.Font], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, label>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, pane>
<javax.swing.JComponent, setFont[java.awt.Font], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<javax.swing.JList, setVisibleRowCount[int], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<javax.swing.JList, setSelectionMode[int], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<java.awt.FontMetrics, charWidth[char], int, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, scroll>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, pane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, pane>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, LineBorder>
<java.awt.Container, add[java.awt.Component], java.awt.Component, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, getContentPane()>
<javax.swing.JWindow, getContentPane[], java.awt.Container, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, add[java.awt.Component], nothing here>
<java.awt.Window, setBackground[java.awt.Color], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<SAD, requestFocus[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, GUIUtilities>
<java.awt.Window, pack[], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<SAD, getCaretLine[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<SAD, offsetToX[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<SAD, getSize[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, parent>
<SAD, getInsets[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<java.awt.Component, getSize[], java.awt.Dimension, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<java.awt.Window, setLocation[int, int], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<SAD, lineToY[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<java.awt.FontMetrics, getHeight[], int, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, fm>
<java.awt.FontMetrics, getDescent[], int, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, fm>
<java.awt.Window, setVisible[boolean], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, itemsList>
<SAD, setKeyEventInterceptor[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, parent>
<SAD, addCaretListener[], SADNESS, CompleteTagList, CompleteTagList[JextFrame, TagsCompletion, java.lang.String, java.lang.Object[], boolean], void, null, textArea>
<CompleteTagList, dispose[], void, CompleteTagList, caretUpdate[javax.swing.event.CaretEvent], void, null, nothing here>
<SAD, setKeyEventInterceptor[], SADNESS, CompleteTagList, dispose[], void, null, parent>
<SAD, removeCaretListener[], SADNESS, CompleteTagList, dispose[], void, null, textArea>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, CompleteTagList, dispose[], void, null, SwingUtilities>
<SAD, requestFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<SAD, setSelectedText[], SADNESS, CompleteTagList, insertEntity[], void, null, textArea>
<SAD, substring[], SADNESS, CompleteTagList, insertEntity[], void, null, getEntity()>
<SAD, getEntity[], SADNESS, CompleteTagList, insertEntity[], void, substring[], getSelectedValue())>
<javax.swing.JList, getSelectedValue[], java.lang.Object, CompleteTagList, insertEntity[], void, getEntity[], itemsList>
<java.lang.String, length[], int, CompleteTagList, insertEntity[], void, null, word>
<javax.swing.JList, getSelectedValue[], java.lang.Object, CompleteTagList, insertTag[], void, null, itemsList>
<java.lang.String, charAt[int], char, CompleteTagList, insertTag[], void, null, word>
<SAD, getClosingTag[], SADNESS, CompleteTagList, insertTag[], void, null, __tag__>
<java.lang.String, equals[java.lang.Object], boolean, CompleteTagList, insertTag[], void, null, "on">
<SAD, getProperty[], SADNESS, CompleteTagList, insertTag[], void, null, Jext>
<SAD, getFullTag[], SADNESS, CompleteTagList, insertTag[], void, null, __tag__>
<SAD, getOpeningTag[], SADNESS, CompleteTagList, insertTag[], void, null, __tag__>
<java.lang.String, substring[int], java.lang.String, CompleteTagList, insertTag[], void, null, tag>
<java.lang.String, length[], int, CompleteTagList, insertTag[], void, null, word>
<java.lang.String, indexOf[int], int, CompleteTagList, insertTag[], void, null, tag>
<java.lang.String, substring[int], java.lang.String, CompleteTagList, insertTag[], void, null, tag>
<java.lang.String, substring[int, int], java.lang.String, CompleteTagList, insertTag[], void, null, tag>
<SAD, setSelectedText[], SADNESS, CompleteTagList, insertTag[], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, CompleteTagList, insertTag[], void, null, textArea>
<SAD, setSelectedText[], SADNESS, CompleteTagList, insertTag[], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, CompleteTagList, insertTag[], void, null, textArea>
<SAD, setSelectedText[], SADNESS, CompleteTagList, insertTag[], void, null, textArea>
<java.awt.event.KeyEvent, getKeyChar[], char, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, setSelectedText[], SADNESS, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, textArea>
<java.lang.String, valueOf[char], java.lang.String, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<SAD, buildTagsList[], SADNESS, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, completion>
<SAD, buildEntitiesList[], SADNESS, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, completion>
<CompleteTagList, dispose[], void, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, setListData[java.lang.Object[]], void, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.KeyEvent, getKeyCode[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<CompleteTagList, insertTag[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<CompleteTagList, insertEntity[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<CompleteTagList, dispose[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<CompleteTagList, dispose[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, isActionKey[], boolean, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<CompleteTagList, dispose[], void, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, processKeyEvent[], SADNESS, CompleteTagList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<CompleteTagList, insertTag[], void, CompleteTagList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<CompleteTagList, insertEntity[], void, CompleteTagList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<CompleteTagList, dispose[], void, CompleteTagList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, setComponentOrientation[java.awt.ComponentOrientation], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getComponentOrientation[], java.awt.ComponentOrientation, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBackground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JList, getSelectionBackground[], java.awt.Color, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<SAD, toString[], SADNESS, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, t>
<SAD, attributesCount[], SADNESS, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, t>
<javax.swing.JComponent, setBackground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<SAD, isEmpty[], SADNESS, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, t>
<SAD, attributesCount[], SADNESS, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, t>
<javax.swing.JComponent, setForeground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Color, darker[], java.awt.Color, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, darker()>
<java.awt.Color, darker[], java.awt.Color, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, darker[], green>
<javax.swing.JComponent, setForeground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getForeground[], java.awt.Color, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<SAD, attributesCount[], SADNESS, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, t>
<javax.swing.JComponent, setForeground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setForeground[java.awt.Color], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JLabel, setText[java.lang.String], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.lang.Object, toString[], java.lang.String, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, value>
<javax.swing.JComponent, setOpaque[boolean], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setEnabled[boolean], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, isEnabled[], boolean, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setFont[java.awt.Font], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.UIManager, getBorder[java.lang.Object], javax.swing.border.Border, CompleteTagList.TagsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, UIManager>
<SAD, getJextParent[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, findMatchingBracket[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<SAD, getDocument[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineOfOffset[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, trim[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, getLineLength(pos))>
<SAD, getText[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineLength[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, s>
<SAD, trim[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, getLineLength(pos - 1))>
<SAD, getText[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineLength[], SADNESS, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, s>
<java.io.PrintStream, println[java.lang.Object], void, FunnyBrackets, actionPerformed[java.awt.event.ActionEvent], void, null, err>
<SAD, getTextArea[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.JComponent, setFont[java.awt.Font], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, label>
<javax.swing.JComponent, setOpaque[boolean], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, label>
<javax.swing.JComponent, setBackground[java.awt.Color], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, label>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, LineBorder>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, getContentPane()>
<javax.swing.JWindow, getContentPane[], java.awt.Container, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, add[java.awt.Component], nothing here>
<SAD, requestFocus[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, GUIUtilities>
<java.awt.Window, pack[], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getCaretLine[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, offsetToX[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getSize[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getInsets[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<java.awt.Component, getSize[], java.awt.Dimension, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Window, setLocation[int, int], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, lineToY[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<java.awt.FontMetrics, getHeight[], int, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, fm>
<java.awt.Window, setVisible[boolean], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, addMouseListener[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, setKeyEventInterceptor[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, parent>
<SAD, addCaretListener[], SADNESS, FunnyBracketsPopup, FunnyBracketsPopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, setKeyEventInterceptor[], SADNESS, FunnyBracketsPopup, dispose[], void, null, parent>
<SAD, removeCaretListener[], SADNESS, FunnyBracketsPopup, dispose[], void, null, textArea>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, FunnyBracketsPopup, dispose[], void, null, SwingUtilities>
<SAD, requestFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<FunnyBracketsPopup, dispose[], void, FunnyBracketsPopup, caretUpdate[javax.swing.event.CaretEvent], void, null, nothing here>
<FunnyBracketsPopup, dispose[], void, FunnyBracketsPopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, processKeyEvent[], SADNESS, FunnyBracketsPopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<FunnyBracketsPopup, dispose[], void, FunnyBracketsPopup.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.util.Vector, add[java.lang.Object], boolean, FunnyBracketsPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<SAD, loadMenuItem[], SADNESS, FunnyBracketsPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, setRunningMode[], SADNESS, FunnyBracketsPlugin, start[], void, null, fpHandler>
<SAD, addAction[], SADNESS, FunnyBracketsPlugin, start[], void, null, Jext>
<SAD, setRunningMode[], SADNESS, FunnyBracketsPlugin, stop[], void, null, fpHandler>
<PHPCompleteList, loadFunctionList[], boolean, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, out>
<java.util.Vector, size[], int, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, functionsList>
<java.util.Vector, elementAt[int], java.lang.Object, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, functionsList>
<SAD, startsWith[], SADNESS, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, name>
<java.util.Vector, add[java.lang.Object], boolean, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.util.Vector, size[], int, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.util.Vector, get[int], java.lang.Object, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, PHPCompleteList, loadFunctionList[], boolean, null, class>
<SAD, setHandler[], SADNESS, PHPCompleteList, loadFunctionList[], boolean, null, parser>
<SAD, parse[], SADNESS, PHPCompleteList, loadFunctionList[], boolean, setHandler[], parser>
<java.lang.Throwable, printStackTrace[], void, PHPCompleteList, loadFunctionList[], boolean, null, se>
<PHPParser, set[java.lang.String], void, PHPParser, PHPParser[java.lang.String], void, null, this>
<PHPParser, P_AVANT[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_DEBUT[], void, PHPParser, parse[], void, null, nothing here>
<java.lang.String, charAt[int], char, PHPParser, parse[], void, null, inputstr>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_DEBUT_PHP[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN_LIGNE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPParser, parse[], void, null, substring(ind - 1,ind + 1)>
<java.lang.String, substring[int, int], java.lang.String, PHPParser, parse[], void, equalsIgnoreCase[java.lang.String], inputstr>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, parse[], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPParser, parse[], void, null, substring(ind - 1,ind)>
<java.lang.String, substring[int, int], java.lang.String, PHPParser, parse[], void, equalsIgnoreCase[java.lang.String], inputstr>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_DEBUT_BLOC_CODE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN_BLOC_CODE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, setType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_DEBUT_BLOC_CONDITION[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN_BLOC_CONDITION[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_SEPARATEUR[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_ESPACE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN_PHP[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_KEYWORD_A[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_KEYWORD_B[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_KEYWORD_C[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchWord[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, matchSeparator[int, int, java.lang.String], boolean, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_KEYWORD_D[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN_LIGNE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_ESPACE[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_FIN[], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, unsetType[int], void, PHPParser, parse[], void, null, nothing here>
<PHPParser, P_APRES[], void, PHPParser, parse[], void, null, nothing here>
<java.lang.String, length[], int, PHPParser, set[java.lang.String], void, null, inputstr>
<PHPParser, testType[int], boolean, PHPParser, setType[int], void, null, nothing here>
<PHPParser, testType[int], boolean, PHPParser, unsetType[int], void, null, nothing here>
<java.lang.String, substring[int, int], java.lang.String, PHPParser, getStrLu[], java.lang.String, null, inputstr>
<java.lang.String, valueOf[char], java.lang.String, PHPParser, getStrLu[], java.lang.String, null, String>
<java.lang.String, charAt[int], char, PHPParser, matchWord[int, int, java.lang.String], boolean, null, inputstr>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPParser, matchWord[int, int, java.lang.String], boolean, null, substring(ind1,ind2)>
<java.lang.String, substring[int, int], java.lang.String, PHPParser, matchWord[int, int, java.lang.String], boolean, equalsIgnoreCase[java.lang.String], inputstr>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPParser, matchSeparator[int, int, java.lang.String], boolean, null, substring(ind1,ind2)>
<java.lang.String, substring[int, int], java.lang.String, PHPParser, matchSeparator[int, int, java.lang.String], boolean, equalsIgnoreCase[java.lang.String], inputstr>
<PHPParser, setType[int], void, PHPParser, beginWithPHP[], void, null, nothing here>
<PHPParser, unsetType[int], void, PHPParser, beginWithHTML[], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentPHP, get[], java.lang.String, null, newbuf>
<java.lang.String, indexOf[int, int], int, PHPIndentPHP, countChar[java.lang.String, char], int, null, s>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentPHP, parseLigne[], void, null, uneLigne>
<java.lang.String, length[], int, PHPIndentPHP, parseLigne[], void, null, s>
<PHPIndentPHP, countChar[java.lang.String, char], int, PHPIndentPHP, parseLigne[], void, null, nothing here>
<PHPIndentPHP, countChar[java.lang.String, char], int, PHPIndentPHP, parseLigne[], void, null, nothing here>
<java.lang.StringBuffer, length[], int, PHPIndentPHP, parseLigne[], void, null, newbuf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPHP, parseLigne[], void, null, tmpstr>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPHP, parseLigne[], void, null, tmpstr>
<SAD, createIndent[], SADNESS, PHPIndentPHP, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPHP, parseLigne[], void, null, tmpstr>
<SAD, createIndent[], SADNESS, PHPIndentPHP, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPIndentPHP, parseLigne[], void, null, tmpstr>
<java.lang.String, trim[], java.lang.String, PHPIndentPHP, parseLigne[], void, null, s>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPIndentPHP, parseLigne[], void, null, newbuf>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentPHP, parseLigne[], void, null, tmpstr>
<SAD, parse[], SADNESS, PHPIndentPHP, indent[], void, null, nothing here>
<PHPIndentPHP, parseLigne[], void, PHPIndentPHP, P_FIN_LIGNE[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPIndentPHP, P_FIN[], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPHP, P_FIN[], void, null, uneLigne>
<SAD, getStrLu[], SADNESS, PHPIndentPHP, P_FIN[], void, null, nothing here>
<PHPIndentPHP, parseLigne[], void, PHPIndentPHP, P_APRES[], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentPEAR, get[], java.lang.String, null, newbuf>
<java.lang.String, trim[], java.lang.String, PHPIndentPEAR, parseLigne[], void, null, toString()>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentPEAR, parseLigne[], void, trim[], uneLigne>
<java.lang.StringBuffer, length[], int, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<java.lang.String, length[], int, PHPIndentPEAR, parseLigne[], void, null, laligne>
<java.lang.String, charAt[int], char, PHPIndentPEAR, parseLigne[], void, null, laligne>
<SAD, testType[], SADNESS, PHPIndentPEAR, parseLigne[], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<SAD, createIndent[], SADNESS, PHPIndentPEAR, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<SAD, createIndent[], SADNESS, PHPIndentPEAR, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<SAD, createAlign[], SADNESS, PHPIndentPEAR, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<SAD, createAlign[], SADNESS, PHPIndentPEAR, parseLigne[], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPIndentPEAR, parseLigne[], void, null, newbuf>
<SAD, parse[], SADNESS, PHPIndentPEAR, indent[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPIndentPEAR, P_FIN_LIGNE[], void, null, nothing here>
<PHPIndentPEAR, parseLigne[], void, PHPIndentPEAR, P_FIN_LIGNE[], void, null, nothing here>
<PHPIndentPEAR, parseLigne[], void, PHPIndentPEAR, P_DEBUT_BLOC_CODE[], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, P_DEBUT_BLOC_CODE[], void, null, uneLigne>
<java.lang.StringBuffer, length[], int, PHPIndentPEAR, P_DEBUT_BLOC_CONDITION[], void, null, uneLigne>
<SAD, testType[], SADNESS, PHPIndentPEAR, P_ESPACE[], void, null, nothing here>
<java.lang.StringBuffer, length[], int, PHPIndentPEAR, P_KEYWORD_D[], void, null, uneLigne>
<java.lang.StringBuffer, charAt[int], char, PHPIndentPEAR, P_KEYWORD_D[], void, null, uneLigne>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, P_KEYWORD_D[], void, null, uneLigne>
<SAD, testType[], SADNESS, PHPIndentPEAR, P_FIN[], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentPEAR, P_FIN[], void, null, uneLigne>
<SAD, getStrLu[], SADNESS, PHPIndentPEAR, P_FIN[], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentPEAR, P_FIN[], void, null, uneLigne>
<PHPIndentPEAR, parseLigne[], void, PHPIndentPEAR, P_APRES[], void, null, nothing here>
<SAD, getJextParent[], SADNESS, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getVerticalTabbedPane[], SADNESS, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<javax.swing.JTabbedPane, indexOfTab[java.lang.String], int, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, tPane>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, tPane>
<javax.swing.JTabbedPane, removeTabAt[int], void, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, tPane>
<javax.swing.JTabbedPane, indexOfTab[java.lang.String], int, PHPBrowse, actionPerformed[java.awt.event.ActionEvent], void, null, tPane>
<SAD, getJextParent[], SADNESS, PHPIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, showWaitCursor[], SADNESS, PHPIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, modifier[], SADNESS, PHPIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, t>
<SAD, getTextArea[], SADNESS, PHPIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, PHPIndenter, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndent, createIndent[int, int], java.lang.StringBuffer, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndent, createAlign[int], java.lang.StringBuffer, null, _buf>
<SAD, getJextParent[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getLineText[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCurrentFile[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, substring[int, int], java.lang.String, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, currentFileName>
<java.lang.String, lastIndexOf[java.lang.String], int, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, currentFileName>
<SAD, getMatchEnumeration[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, re>
<SAD, hasMoreMatches[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, ren>
<SAD, nextMatch[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, ren>
<SAD, toString[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, rem>
<java.io.PrintStream, println[java.lang.Object], void, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, err>
<java.lang.String, length[], int, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, foundFileName>
<java.lang.String, charAt[int], char, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, foundFileName>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, filename>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, filename>
<java.lang.String, indexOf[java.lang.String], int, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, foundFileName>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, filename>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, filename>
<SAD, open[], SADNESS, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.lang.StringBuffer, toString[], java.lang.String, PHPQuickOpen, actionPerformed[java.awt.event.ActionEvent], void, null, filename>
<SAD, addJextListener[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, nothing here>
<javax.swing.tree.DefaultTreeCellRenderer, setOpenIcon[javax.swing.Icon], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setLeafIcon[javax.swing.Icon], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setClosedIcon[javax.swing.Icon], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setTextSelectionColor[java.awt.Color], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<SAD, parseColor[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, Jext>
<javax.swing.tree.DefaultTreeCellRenderer, setBackgroundSelectionColor[java.awt.Color], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<java.awt.Component, getBackground[], java.awt.Color, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.tree.DefaultTreeCellRenderer, setBorderSelectionColor[java.awt.Color], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, renderer>
<java.awt.Component, getBackground[], java.awt.Color, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, setCellRenderer[javax.swing.tree.TreeCellRenderer], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.tree.DefaultTreeSelectionModel, setSelectionMode[int], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, selectionModel>
<javax.swing.JTree, setSelectionModel[javax.swing.tree.TreeSelectionModel], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, setScrollsOnExpand[boolean], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, expandRow[int], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, setRootVisible[boolean], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, setShowsRootHandles[boolean], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<javax.swing.JTree, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, browserTree>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, this>
<java.lang.Thread, start[], void, PHPBrowseTab, PHPBrowseTab[JextFrame], void, null, thread>
<SAD, getWhat[], SADNESS, PHPBrowseTab, jextEventFired[JextEvent], void, null, evt>
<java.lang.Thread, isAlive[], boolean, PHPBrowseTab, jextEventFired[JextEvent], void, null, thread>
<java.lang.Thread, interrupt[], void, PHPBrowseTab, jextEventFired[JextEvent], void, null, thread>
<java.lang.Thread, start[], void, PHPBrowseTab, jextEventFired[JextEvent], void, null, thread>
<java.lang.Thread, sleep[long], void, PHPBrowseTab, run[], void, null, Thread>
<PHPBrowseTab, load[JextTextArea[]], void, PHPBrowseTab, run[], void, null, this>
<SAD, getTextAreas[], SADNESS, PHPBrowseTab, run[], void, null, parent>
<SAD, equals[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, null, getColorizingMode()>
<SAD, getColorizingMode[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, equals[], textAreas[i]>
<SAD, getName[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, null, textAreas[i]>
<SAD, getFile[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, null, textAreas[i]>
<SAD, parse[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, null, p>
<SAD, add[], SADNESS, PHPBrowseTab, load[JextTextArea[]], void, null, newroot>
<javax.swing.JTree, setModel[javax.swing.tree.TreeModel], void, PHPBrowseTab, load[JextTextArea[]], void, null, browserTree>
<java.util.EventObject, getSource[], java.lang.Object, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, tse>
<javax.swing.JTree, isSelectionEmpty[], boolean, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, source>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getSelectionPath()>
<javax.swing.JTree, getSelectionPath[], javax.swing.tree.TreePath, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, getLastPathComponent[], source>
<SAD, getTextArea[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, parent>
<SAD, getLine[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, node>
<SAD, getFile[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, node>
<java.io.File, equals[java.lang.Object], boolean, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, fi>
<SAD, getFile[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, textArea>
<SAD, getTextAreas[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, parent>
<java.io.File, equals[java.lang.Object], boolean, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, fi>
<SAD, getFile[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, openAreas[i]>
<SAD, setSelectedComponent[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, setSelectedComponent[], parent>
<SAD, getElement[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, getElement[], getDocument()>
<SAD, getDocument[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, getDefaultRootElement[], textArea>
<SAD, select[], SADNESS, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, lelement>
<javax.swing.text.Element, getEndOffset[], int, PHPBrowseTab, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, lelement>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPCompleteListHandler, startElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPCompleteListHandler, endElement[java.lang.String], void, null, name>
<SAD, add[], SADNESS, PHPCompleteListHandler, endElement[java.lang.String], void, null, functionsList>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPCompleteListHandler, endElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPCompleteListHandler, endElement[java.lang.String], void, null, name>
<SAD, getText[], SADNESS, PHPBrowseTabParser, PHPBrowseTabParser[PHPBrowseTabNode, JextTextArea], void, null, textArea>
<SAD, getLength[], SADNESS, PHPBrowseTabParser, PHPBrowseTabParser[PHPBrowseTabNode, JextTextArea], void, null, textArea>
<PHPBrowseTabParser, parseLigne[], void, PHPBrowseTabParser, P_FIN_LIGNE[], void, null, nothing here>
<PHPBrowseTabParser, parseLigne[], void, PHPBrowseTabParser, P_FIN_PHP[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPBrowseTabParser, P_FIN[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPBrowseTabParser, P_FIN[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPBrowseTabParser, P_FIN[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPBrowseTabParser, P_FIN[], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPBrowseTabParser, P_FIN[], void, null, uneLigne>
<SAD, getStrLu[], SADNESS, PHPBrowseTabParser, P_FIN[], void, null, nothing here>
<PHPBrowseTabParser, parseLigne[], void, PHPBrowseTabParser, P_APRES[], void, null, nothing here>
<java.lang.String, trim[], java.lang.String, PHPBrowseTabParser, parseLigne[], void, null, toString()>
<java.lang.StringBuffer, toString[], java.lang.String, PHPBrowseTabParser, parseLigne[], void, trim[], uneLigne>
<java.lang.String, length[], int, PHPBrowseTabParser, parseLigne[], void, null, s>
<SAD, getMatchEnumeration[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, re>
<SAD, hasMoreMatches[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, ren>
<SAD, nextMatch[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, ren>
<SAD, toString[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, rem>
<java.io.PrintStream, println[java.lang.Object], void, PHPBrowseTabParser, parseLigne[], void, null, err>
<java.lang.String, length[], int, PHPBrowseTabParser, parseLigne[], void, null, name>
<SAD, getLineOfOffset[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, textArea>
<SAD, getIndice[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, nothing here>
<SAD, getFile[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, textArea>
<SAD, add[], SADNESS, PHPBrowseTabParser, parseLigne[], void, null, root>
<SAD, getJextParent[], SADNESS, PHPBeautifier, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, showWaitCursor[], SADNESS, PHPBeautifier, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, modifier[], SADNESS, PHPBeautifier, actionPerformed[java.awt.event.ActionEvent], void, null, t>
<SAD, getTextArea[], SADNESS, PHPBeautifier, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, PHPBeautifier, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, beginCompoundEdit[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getLength[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, parse[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, truc>
<SAD, getPart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, truc>
<SAD, getNbPart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, truc>
<SAD, equalsIgnoreCase[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, getType()>
<SAD, getType[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, equalsIgnoreCase[], machin[j]>
<SAD, getText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getStart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, getSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, setIndentSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierFichier, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierFichier, modifier[JextTextArea], void, null, newstr>
<SAD, getText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getStart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, getSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, getText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getStart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, getSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, setIndentSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierFichier, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<SAD, getText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getStart[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, getSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, machin[j]>
<SAD, setIndentSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierFichier, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, z>
<SAD, setText[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, PHPModifierFichier, modifier[JextTextArea], void, null, newstr>
<SAD, endCompoundEdit[], SADNESS, PHPModifierFichier, modifier[JextTextArea], void, null, textArea>
<SAD, getSelectedText[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, beginCompoundEdit[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, getText[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, getLength[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, parse[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc1>
<SAD, equalsIgnoreCase[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, getSelectionStart())>
<SAD, getPartOffset[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc1>
<SAD, getSelectionStart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, beginWithPHP[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc2>
<SAD, parse[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc2>
<SAD, getPart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc2>
<SAD, getNbPart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, truc2>
<SAD, equalsIgnoreCase[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, getType()>
<SAD, getType[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, equalsIgnoreCase[], machin[j]>
<java.lang.String, substring[int, int], java.lang.String, PHPModifierSelection, modifier[JextTextArea], void, null, laselection>
<SAD, getStart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, getEnd[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, setIndentSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierSelection, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierSelection, modifier[JextTextArea], void, null, newstr>
<java.lang.String, substring[int, int], java.lang.String, PHPModifierSelection, modifier[JextTextArea], void, null, laselection>
<SAD, getStart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, getEnd[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<java.lang.String, substring[int, int], java.lang.String, PHPModifierSelection, modifier[JextTextArea], void, null, laselection>
<SAD, getStart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, getEnd[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, beginWithPHP[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, setIndentSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierSelection, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<java.lang.String, substring[int, int], java.lang.String, PHPModifierSelection, modifier[JextTextArea], void, null, laselection>
<SAD, getStart[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, getEnd[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, machin[j]>
<SAD, beginWithPHP[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, setIndentSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, getTabSize[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, indent[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPModifierSelection, modifier[JextTextArea], void, null, newstr>
<SAD, get[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, z>
<SAD, setSelectedText[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, PHPModifierSelection, modifier[JextTextArea], void, null, newstr>
<SAD, endCompoundEdit[], SADNESS, PHPModifierSelection, modifier[JextTextArea], void, null, textArea>
<SAD, getJextParent[], SADNESS, PHPIndenterBloc, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, showWaitCursor[], SADNESS, PHPIndenterBloc, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, modifier[], SADNESS, PHPIndenterBloc, actionPerformed[java.awt.event.ActionEvent], void, null, t>
<SAD, getTextArea[], SADNESS, PHPIndenterBloc, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, PHPIndenterBloc, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getTextArea[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.JComponent, setFont[java.awt.Font], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, label>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, pane>
<SAD, buildFunctionList[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, truc>
<javax.swing.JComponent, setFont[java.awt.Font], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<javax.swing.JList, setVisibleRowCount[int], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<javax.swing.JList, setSelectionMode[int], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<java.awt.FontMetrics, charWidth[char], int, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, scroll>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, pane>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, LineBorder>
<java.awt.Container, add[java.awt.Component], java.awt.Component, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, getContentPane()>
<javax.swing.JWindow, getContentPane[], java.awt.Container, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, add[java.awt.Component], nothing here>
<java.awt.Window, setBackground[java.awt.Color], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, requestFocus[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, GUIUtilities>
<java.awt.Window, pack[], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getCaretLine[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, offsetToX[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<SAD, getSize[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getInsets[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<java.awt.Component, getSize[], java.awt.Dimension, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Window, setLocation[int, int], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<SAD, lineToY[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<java.awt.FontMetrics, getHeight[], int, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, fm>
<java.awt.FontMetrics, getDescent[], int, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, fm>
<java.awt.Window, setVisible[boolean], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, itemsList>
<SAD, setKeyEventInterceptor[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, parent>
<SAD, addCaretListener[], SADNESS, PHPCompletePopup, PHPCompletePopup[JextFrame, java.lang.String], void, null, textArea>
<PHPCompletePopup, dispose[], void, PHPCompletePopup, caretUpdate[javax.swing.event.CaretEvent], void, null, nothing here>
<SAD, setKeyEventInterceptor[], SADNESS, PHPCompletePopup, dispose[], void, null, parent>
<SAD, removeCaretListener[], SADNESS, PHPCompletePopup, dispose[], void, null, textArea>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, PHPCompletePopup, dispose[], void, null, SwingUtilities>
<SAD, requestFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<SAD, setSelectedText[], SADNESS, PHPCompletePopup, insertFunction[], void, null, textArea>
<SAD, substring[], SADNESS, PHPCompletePopup, insertFunction[], void, null, name>
<javax.swing.JList, getSelectedValue[], java.lang.Object, PHPCompletePopup, insertFunction[], void, null, itemsList>
<java.lang.String, length[], int, PHPCompletePopup, insertFunction[], void, null, word>
<java.awt.event.KeyEvent, getKeyChar[], char, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, setSelectedText[], SADNESS, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, textArea>
<java.lang.String, valueOf[char], java.lang.String, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<SAD, buildFunctionList[], SADNESS, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, truc>
<javax.swing.JList, setListData[java.lang.Object[]], void, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.KeyEvent, getKeyCode[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<PHPCompletePopup, insertFunction[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<PHPCompletePopup, dispose[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<PHPCompletePopup, dispose[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, isActionKey[], boolean, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<PHPCompletePopup, dispose[], void, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, processKeyEvent[], SADNESS, PHPCompletePopup.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<PHPCompletePopup, insertFunction[], void, PHPCompletePopup.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<PHPCompletePopup, dispose[], void, PHPCompletePopup.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, setComponentOrientation[java.awt.ComponentOrientation], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getComponentOrientation[], java.awt.ComponentOrientation, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBackground[java.awt.Color], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JList, getSelectionBackground[], java.awt.Color, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBackground[java.awt.Color], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JLabel, setText[java.lang.String], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.lang.Object, toString[], java.lang.String, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, value>
<javax.swing.JComponent, setOpaque[boolean], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setEnabled[boolean], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, isEnabled[], boolean, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setFont[java.awt.Font], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.UIManager, getBorder[java.lang.Object], javax.swing.border.Border, PHPCompletePopup.FunctionsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, UIManager>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPModifier, PHPModifier[java.lang.String], void, null, s>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPModifier, PHPModifier[java.lang.String], void, null, s>
<SAD, addMenu[], SADNESS, PHPPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, PHPPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, addMenu[], parent>
<SAD, loadMenu[], SADNESS, PHPPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<SAD, addAction[], SADNESS, PHPPlugin, start[], void, null, Jext>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentHTML, get[], java.lang.String, null, newbuf>
<PHPIndentHTML, parse[java.lang.String], void, PHPIndentHTML, indent[], void, null, nothing here>
<PHPIndentHTML, onOneLine[], java.lang.String, PHPIndentHTML, indent[], void, null, nothing here>
<java.lang.String, length[], int, PHPIndentHTML, onOneLine[], java.lang.String, null, buffer>
<java.lang.String, length[], int, PHPIndentHTML, onOneLine[], java.lang.String, null, buffer>
<java.lang.String, charAt[int], char, PHPIndentHTML, onOneLine[], java.lang.String, null, buffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, onOneLine[], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, onOneLine[], java.lang.String, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentHTML, onOneLine[], java.lang.String, null, _buf>
<java.lang.String, trim[], java.lang.String, PHPIndentHTML, indentTag[java.lang.String], int, null, tag>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPIndentHTML, indentTag[java.lang.String], int, null, INDENT_ON_TAG[i]>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, PHPIndentHTML, indentTag[java.lang.String], int, null, tag>
<java.lang.String, length[], int, PHPIndentHTML, parse[java.lang.String], void, null, html>
<java.lang.String, charAt[int], char, PHPIndentHTML, parse[java.lang.String], void, null, html>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.String, indexOf[int], int, PHPIndentHTML, parse[java.lang.String], void, null, _tag>
<java.lang.String, length[], int, PHPIndentHTML, parse[java.lang.String], void, null, _tag>
<java.lang.String, substring[int, int], java.lang.String, PHPIndentHTML, parse[java.lang.String], void, null, _tag>
<PHPIndentHTML, indentTag[java.lang.String], int, PHPIndentHTML, parse[java.lang.String], void, null, nothing here>
<SAD, append[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, createIndent(indent - 1,INDENT_SIZE))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], newbuf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<SAD, append[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, createIndent(indent,INDENT_SIZE))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], newbuf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], newbuf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, newbuf>
<java.lang.StringBuffer, delete[int, int], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.StringBuffer, length[], int, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, newbuf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], _buf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], newbuf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, _buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, append('\n')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, append[java.lang.Object], newbuf>
<SAD, createIndent[], SADNESS, PHPIndentHTML, parse[java.lang.String], void, null, PHPIndent>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, PHPIndentHTML, parse[java.lang.String], void, null, newbuf>
<SAD, getJextParent[], SADNESS, PHPBeautifierBloc, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, showWaitCursor[], SADNESS, PHPBeautifierBloc, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, modifier[], SADNESS, PHPBeautifierBloc, actionPerformed[java.awt.event.ActionEvent], void, null, t>
<SAD, getTextArea[], SADNESS, PHPBeautifierBloc, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, PHPBeautifierBloc, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getTextArea[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, findWordStart[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<java.lang.String, substring[int, int], java.lang.String, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.String, length[], int, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<SAD, getJextParent[], SADNESS, PHPComplete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<PHPBufferPartList, getNbPart[], int, PHPBufferPartList, getPartOffset[int], java.lang.String, null, this>
<SAD, getStart[], SADNESS, PHPBufferPartList, getPartOffset[int], java.lang.String, null, tabPart[j]>
<SAD, getEnd[], SADNESS, PHPBufferPartList, getPartOffset[int], java.lang.String, null, tabPart[j]>
<SAD, getType[], SADNESS, PHPBufferPartList, getPartOffset[int], java.lang.String, null, tabPart[j]>
<java.io.PrintStream, println[java.lang.String], void, PHPBufferPartList, addPart[int, int, java.lang.String], void, null, err>
<SAD, getIndice[], SADNESS, PHPBufferPartList, P_DEBUT_PHP[], void, null, nothing here>
<PHPBufferPartList, addPart[int, int, java.lang.String], void, PHPBufferPartList, P_DEBUT_PHP[], void, null, this>
<SAD, getIndice[], SADNESS, PHPBufferPartList, P_FIN_PHP[], void, null, nothing here>
<PHPBufferPartList, addPart[int, int, java.lang.String], void, PHPBufferPartList, P_FIN_PHP[], void, null, this>
<SAD, getIndice[], SADNESS, PHPBufferPartList, P_APRES[], void, null, nothing here>
<SAD, testType[], SADNESS, PHPBufferPartList, P_APRES[], void, null, nothing here>
<PHPBufferPartList, addPart[int, int, java.lang.String], void, PHPBufferPartList, P_APRES[], void, null, this>
<PHPBufferPartList, addPart[int, int, java.lang.String], void, PHPBufferPartList, P_APRES[], void, null, this>
<SAD, lock[], SADNESS, JFrameEx, getHWND[], int, null, drawingSurfaceInfo>
<SAD, getSurface[], SADNESS, JFrameEx, getHWND[], int, null, drawingSurfaceInfo>
<SAD, getHWnd[], SADNESS, JFrameEx, getHWND[], int, null, win32DrawingSurface>
<SAD, unlock[], SADNESS, JFrameEx, getHWND[], int, null, drawingSurfaceInfo>
<javax.swing.SwingUtilities, convertPointFromScreen[java.awt.Point, java.awt.Component], void, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, SwingUtilities>
<javax.swing.SwingUtilities, getDeepestComponentAt[java.awt.Component, int, int], java.awt.Component, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, SwingUtilities>
<java.awt.Component, getParent[], java.awt.Container, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, c>
<java.awt.Container, getComponentCount[], int, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, cont>
<java.awt.Container, getComponent[int], java.awt.Component, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, cont>
<java.awt.Container, getComponent[int], java.awt.Component, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, cont>
<javax.swing.JScrollBar, getOrientation[], int, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, scrollBar>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, ((JScrollPane)cont)>
<javax.swing.JViewport, setBackingStoreEnabled[boolean], void, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, viewPort>
<java.lang.String, equals[java.lang.Object], boolean, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, "on">
<SAD, getProperty[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Jext>
<javax.swing.JScrollBar, getUnitIncrement[], int, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, scrollBar>
<javax.swing.JScrollBar, getUnitIncrement[int], int, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, scrollBar>
<SAD, getProperty[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Jext>
<SAD, equals[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, lineenabled")>
<SAD, getProperty[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Jext>
<SAD, getProperty[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Jext>
<SAD, intValue[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, line"))>
<java.lang.Integer, valueOf[java.lang.String], java.lang.Integer, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Integer>
<SAD, getProperty[], SADNESS, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, Jext>
<javax.swing.JScrollBar, getValue[], int, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, scrollBar>
<javax.swing.JScrollBar, setValue[int], void, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, scrollBar>
<java.awt.Component, getParent[], java.awt.Container, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, cont>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, JFrameEx, notifyMouseWheel[short, short, long, long], void, null, e>
<SAD, setBorder[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, nothing here>
<SAD, addComponent[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<SAD, addComponent[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<SAD, addComponent[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, nothing here>
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, "on">
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, cImageEnabled>
<java.lang.String, equals[java.lang.Object], boolean, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, "on">
<SAD, getProperty[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, Jext>
<SAD, setSelected[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, cLineEnabled>
<javax.swing.JComponent, setEnabled[boolean], void, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, tWheelMouseLineIncrement>
<SAD, addActionListener[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, cImageEnabled>
<SAD, isSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, cImageEnabled>
<SAD, setSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, cImageEnabled>
<SAD, addActionListener[], SADNESS, WheelMouseOptionPane, WheelMouseOptionPane[], void, null, cLineEnabled>
<SAD, isSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, cLineEnabled>
<SAD, setSelected[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, cLineEnabled>
<javax.swing.JComponent, setEnabled[boolean], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, tWheelMouseLineIncrement>
<SAD, setProperty[], SADNESS, WheelMouseOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, WheelMouseOptionPane, save[], void, null, cImageEnabled>
<SAD, setProperty[], SADNESS, WheelMouseOptionPane, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, WheelMouseOptionPane, save[], void, null, cLineEnabled>
<SAD, setProperty[], SADNESS, WheelMouseOptionPane, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, WheelMouseOptionPane, save[], void, null, tWheelMouseLineIncrement>
<java.lang.System, loadLibrary[java.lang.String], void, WheelMouseOptionPane, save[], void, null, System>
<WheelMousePlugin, startListeningForOtherWindows[], void, WheelMousePlugin, start[], void, null, nothing here>
<SAD, addOptionPane[], SADNESS, WheelMousePlugin, createOptionPanes[OptionsDialog], void, null, optionsDialog>
<SAD, setComponent[], SADNESS, WheelMousePlugin, addWheelMouseListener[java.awt.Component], void, null, jframeex>
<SAD, setComponent[], SADNESS, WheelMousePlugin, removeWheelMouseListener[java.awt.Component], void, null, jframeex>
<java.awt.Toolkit, addAWTEventListener[java.awt.event.AWTEventListener, long], void, WheelMousePlugin, startListeningForOtherWindows[], void, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, WheelMousePlugin, startListeningForOtherWindows[], void, addAWTEventListener[java.awt.event.AWTEventListener, long], Toolkit>
<java.awt.AWTEvent, getID[], int, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, wevt>
<WheelMousePlugin, addWheelMouseListener[java.awt.Component], void, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, nothing here>
<java.awt.event.ComponentEvent, getComponent[], java.awt.Component, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, wevt>
<java.awt.AWTEvent, getID[], int, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, wevt>
<WheelMousePlugin, removeWheelMouseListener[java.awt.Component], void, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, nothing here>
<java.awt.event.ComponentEvent, getComponent[], java.awt.Component, WheelMousePlugin.WindowAWTEvent, eventDispatched[java.awt.AWTEvent], void, null, wevt>
<SAD, findText[], SADNESS, FindAllAction, actionPerformed[java.awt.event.ActionEvent], void, null, findAll>
<SAD, addJextListener[], SADNESS, FindAll, FindAll[JextFrame], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, FindAll, FindAll[JextFrame], void, null, nothing here>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, FindAll, FindAll[JextFrame], void, null, fieldSearch>
<javax.swing.JComboBox, setEditable[boolean], void, FindAll, FindAll[JextFrame], void, null, fieldSearch>
<javax.swing.ComboBoxEditor, getEditorComponent[], java.awt.Component, FindAll, FindAll[JextFrame], void, null, getEditor()>
<javax.swing.JComboBox, getEditor[], javax.swing.ComboBoxEditor, FindAll, FindAll[JextFrame], void, getEditorComponent[], fieldSearch>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, FindAll, FindAll[JextFrame], void, null, fieldSearchEditor>
<javax.swing.JComponent, getFontMetrics[java.awt.Font], java.awt.FontMetrics, FindAll, FindAll[JextFrame], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, FindAll, FindAll[JextFrame], void, null, fieldSearch>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindAll, FindAll[JextFrame], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, FindAll, FindAll[JextFrame], void, null, pane2>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindAll, FindAll[JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, FindAll[JextFrame], void, null, "on">
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindAll, FindAll[JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, FindAll[JextFrame], void, null, "on">
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindAll, FindAll[JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, FindAll[JextFrame], void, null, "on">
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindAll, FindAll[JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, FindAll[JextFrame], void, null, "on">
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<javax.swing.JToolBar, setFloatable[boolean], void, FindAll, FindAll[JextFrame], void, null, toolBar>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, FindAll, FindAll[JextFrame], void, null, toolBar>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, FindAll, FindAll[JextFrame], void, null, Utilities>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, FindAll, FindAll[JextFrame], void, null, toolBar>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, FindAll, FindAll[JextFrame], void, null, pane2>
<SAD, setToolTipText[], SADNESS, FindAll, FindAll[JextFrame], void, null, find>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, FindAll, FindAll[JextFrame], void, null, find>
<SAD, addActionListener[], SADNESS, FindAll, FindAll[JextFrame], void, null, unHighlight>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindAll, FindAll[JextFrame], void, null, nothing here>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, FindAll, FindAll[JextFrame], void, null, results>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, FindAll, FindAll[JextFrame], void, null, results>
<javax.swing.JList, setModel[javax.swing.ListModel], void, FindAll, FindAll[JextFrame], void, null, results>
<java.awt.FontMetrics, charWidth[char], int, FindAll, FindAll[JextFrame], void, null, fm>
<javax.swing.JList, getFixedCellHeight[], int, FindAll, FindAll[JextFrame], void, null, results>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, FindAll, FindAll[JextFrame], void, null, scroller>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, FindAll, FindAll[JextFrame], void, null, scroller>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, FindAll, FindAll[JextFrame], void, null, nothing here>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<javax.swing.JComboBox, addItem[java.lang.Object], void, FindAll, FindAll[JextFrame], void, null, fieldSearch>
<SAD, getProperty[], SADNESS, FindAll, FindAll[JextFrame], void, null, Jext>
<FindAll, addSearchHistory[java.lang.String], void, FindAll, FindAll[JextFrame], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, FindAll, FindAll[JextFrame], void, null, fieldSearch>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, FindAll, exit[], void, null, fieldSearchEditor>
<javax.swing.JComboBox, getItemCount[], int, FindAll, exit[], void, null, fieldSearch>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, FindAll, exit[], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, FindAll, exit[], void, null, fieldSearch>
<SAD, unsetProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, FindAll, exit[], void, null, useRegexp>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, FindAll, exit[], void, null, ignoreCase>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, FindAll, exit[], void, null, highlight>
<SAD, setProperty[], SADNESS, FindAll, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, FindAll, exit[], void, null, allFiles>
<FindAll, removeHighlights[], void, FindAll, exit[], void, null, nothing here>
<SAD, repaint[], SADNESS, FindAll, exit[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll, exit[], void, repaint[], parent>
<SAD, getTextAreas[], SADNESS, FindAll, removeHighlights[], void, null, parent>
<SAD, getSearchHighlight[], SADNESS, FindAll, removeHighlights[], void, null, areas[i]>
<SAD, disable[], SADNESS, FindAll, removeHighlights[], void, null, h>
<FindAll, addSearchHistory[java.lang.String], void, FindAll, addSearchHistory[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, FindAll, addSearchHistory[], void, null, fieldSearchEditor>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, addSearchHistory[java.lang.String], void, null, c>
<javax.swing.JComboBox, getItemCount[], int, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, addSearchHistory[java.lang.String], void, null, getItemAt(i))>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, FindAll, addSearchHistory[java.lang.String], void, equals[java.lang.Object], fieldSearch>
<javax.swing.JComboBox, setSelectedIndex[int], void, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, setSelectedIndex[int], void, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, removeItemAt[int], void, FindAll, addSearchHistory[java.lang.String], void, null, fieldSearch>
<java.util.EventObject, getSource[], java.lang.Object, FindAll, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<FindAll, findAll[], void, FindAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, FindAll, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<FindAll, removeHighlights[], void, FindAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, repaint[], SADNESS, FindAll, actionPerformed[java.awt.event.ActionEvent], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll, actionPerformed[java.awt.event.ActionEvent], void, repaint[], parent>
<SAD, getSelectedText[], SADNESS, FindAll, findText[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll, findText[], void, getSelectedText[], parent>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, FindAll, findText[], void, null, fieldSearchEditor>
<javax.swing.JComponent, requestFocus[], void, FindAll, findText[], void, null, fieldSearchEditor>
<FindAll, findAll[], void, FindAll, findText[], void, null, nothing here>
<java.lang.String, length[], int, FindAll, findText[], void, null, text>
<javax.swing.JList, getModel[], javax.swing.ListModel, FindAll, findText[], void, null, results>
<javax.swing.ListModel, getSize[], int, FindAll, findText[], void, null, model>
<javax.swing.ListModel, getElementAt[int], java.lang.Object, FindAll, findText[], void, null, model>
<SAD, getPos[], SADNESS, FindAll, findText[], void, null, result>
<SAD, getSelectionStart[], SADNESS, FindAll, findText[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll, findText[], void, getSelectionStart[], parent>
<SAD, getSelectionEnd[], SADNESS, FindAll, findText[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll, findText[], void, getSelectionEnd[], parent>
<SAD, getTextArea[], SADNESS, FindAll, findText[], void, null, parent>
<SAD, getTextArea[], SADNESS, FindAll, findText[], void, null, result>
<javax.swing.JList, setSelectedIndex[int], void, FindAll, findText[], void, null, results>
<javax.swing.ListModel, getSize[], int, FindAll, findText[], void, null, model>
<javax.swing.JComponent, requestFocus[], void, FindAll, findText[], void, null, results>
<SAD, setSelectedComponent[], SADNESS, FindAll, findText[], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, FindAll, findText[], void, setSelectedComponent[], parent>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, findText[], void, null, "on">
<SAD, getProperty[], SADNESS, FindAll, findText[], void, null, Jext>
<SAD, setProperty[], SADNESS, FindAll, findText[], void, null, Jext>
<SAD, triggerTabbedPanes[], SADNESS, FindAll, findText[], void, null, parent>
<javax.swing.text.JTextComponent, getText[], java.lang.String, FindAll, findAll[], void, null, fieldSearchEditor>
<java.lang.String, length[], int, FindAll, findAll[], void, null, searchStr>
<SAD, setCursorOnWait[], SADNESS, FindAll, findAll[], void, null, Utilities>
<FindAll, addSearchHistory[], void, FindAll, findAll[], void, null, nothing here>
<javax.swing.DefaultListModel, removeAllElements[], void, FindAll, findAll[], void, null, resultModel>
<SAD, isSelected[], SADNESS, FindAll, findAll[], void, null, allFiles>
<SAD, getTextAreas[], SADNESS, FindAll, findAll[], void, null, parent>
<SAD, getTextArea[], SADNESS, FindAll, findAll[], void, null, parent>
<SAD, getDocument[], SADNESS, FindAll, findAll[], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, FindAll, findAll[], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, FindAll, findAll[], void, null, map>
<SAD, isSelected[], SADNESS, FindAll, findAll[], void, null, highlight>
<SAD, isSelected[], SADNESS, FindAll, findAll[], void, null, useRegexp>
<SAD, isSelected[], SADNESS, FindAll, findAll[], void, null, ignoreCase>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, FindAll, findAll[], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, FindAll, findAll[], void, null, lineElement>
<javax.swing.text.Document, getText[int, int], java.lang.String, FindAll, findAll[], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, FindAll, findAll[], void, null, lineElement>
<FindAll, nextMatch[java.lang.String, int], int[], FindAll, findAll[], void, null, nothing here>
<SAD, nextMatch[], SADNESS, FindAll, findAll[], void, null, matcher>
<javax.swing.text.Document, createPosition[int], javax.swing.text.Position, FindAll, findAll[], void, null, doc>
<javax.swing.text.Document, createPosition[int], javax.swing.text.Position, FindAll, findAll[], void, null, doc>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, FindAll, findAll[], void, null, resultModel>
<java.util.ArrayList, add[java.lang.Object], boolean, FindAll, findAll[], void, null, matches>
<SAD, setCursorOnWait[], SADNESS, FindAll, findAll[], void, null, Utilities>
<javax.swing.DefaultListModel, isEmpty[], boolean, FindAll, findAll[], void, null, resultModel>
<SAD, beep[], SADNESS, FindAll, findAll[], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, FindAll, findAll[], void, beep[], textArea>
<javax.swing.JList, setModel[javax.swing.ListModel], void, FindAll, findAll[], void, null, results>
<SAD, initSearchHighlight[], SADNESS, FindAll, findAll[], void, null, textArea>
<SAD, getSearchHighlight[], SADNESS, FindAll, findAll[], void, null, textArea>
<SAD, trigger[], SADNESS, FindAll, findAll[], void, null, h>
<SAD, setMatches[], SADNESS, FindAll, findAll[], void, null, h>
<SAD, getSearchHighlight[], SADNESS, FindAll, findAll[], void, null, textArea>
<SAD, trigger[], SADNESS, FindAll, findAll[], void, null, h>
<SAD, setMatches[], SADNESS, FindAll, findAll[], void, null, h>
<SAD, repaint[], SADNESS, FindAll, findAll[], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, FindAll, nextMatch[java.lang.String, int], int[], null, str>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, FindAll, nextMatch[java.lang.String, int], int[], null, fieldSearch>
<SAD, isSelected[], SADNESS, FindAll, nextMatch[java.lang.String, int], int[], null, ignoreCase>
<java.awt.Toolkit, beep[], void, FindAll, nextMatch[java.lang.String, int], int[], null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, FindAll, nextMatch[java.lang.String, int], int[], beep[], nothing here>
<SAD, getMatch[], SADNESS, FindAll, nextMatch[java.lang.String, int], int[], null, regexp>
<SAD, getStartIndex[], SADNESS, FindAll, nextMatch[java.lang.String, int], int[], null, match>
<SAD, getEndIndex[], SADNESS, FindAll, nextMatch[java.lang.String, int], int[], null, match>
<SAD, getWhat[], SADNESS, FindAll, jextEventFired[JextEvent], void, null, evt>
<FindAll, exit[], void, FindAll, jextEventFired[JextEvent], void, null, nothing here>
<javax.swing.JList, isSelectionEmpty[], boolean, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, results>
<javax.swing.event.ListSelectionEvent, getValueIsAdjusting[], boolean, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, evt>
<javax.swing.JList, getSelectedValue[], java.lang.Object, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, results>
<SAD, getTextArea[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<SAD, getTextArea[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, result>
<SAD, setSelectedComponent[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, setSelectedComponent[], parent>
<SAD, getTextArea[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, result>
<javax.swing.JComponent, requestFocus[], void, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, results>
<SAD, getPos[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, result>
<SAD, select[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, FindAll.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, select[], result>
<java.awt.event.KeyEvent, getKeyCode[], int, FindAll.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<FindAll, findAll[], void, FindAll.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, add[], SADNESS, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, getVerticalTabbedPane()>
<SAD, getVerticalTabbedPane[], SADNESS, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, add[], parent>
<SAD, getProperty[], SADNESS, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, Jext>
<SAD, setFindAll[], SADNESS, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, action>
<java.util.Vector, add[java.lang.Object], boolean, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<SAD, loadMenuItem[], SADNESS, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, GUIUtilities>
<SAD, addAction[], SADNESS, FindAllPlugin, start[], void, null, Jext>
<SAD, exit[], SADNESS, FindAllPlugin, stop[], void, null, findAll>
<SAD, getUpdater[], SADNESS, ChoiceForm, ChoiceForm[], void, null, PluginDownload>
<SAD, getPlugins[], SADNESS, ChoiceForm, ChoiceForm[], void, null, dataProvider>
<SAD, getUpdateWindow[], SADNESS, ChoiceForm, ChoiceForm[], void, null, PluginDownload>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, ChoiceForm, ChoiceForm[], void, null, nothing here>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, ChoiceForm, ChoiceForm[], void, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, ChoiceForm, ChoiceForm[], void, setReorderingAllowed[boolean], plugTable>
<javax.swing.JTable, setCellSelectionEnabled[boolean], void, ChoiceForm, ChoiceForm[], void, null, plugTable>
<javax.swing.JTable, setRowSelectionAllowed[boolean], void, ChoiceForm, ChoiceForm[], void, null, plugTable>
<javax.swing.JTable, setColumnSelectionAllowed[boolean], void, ChoiceForm, ChoiceForm[], void, null, plugTable>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, ChoiceForm, ChoiceForm[], void, null, getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, ChoiceForm, ChoiceForm[], void, getColumn[int], plugTable>
<javax.swing.table.TableColumn, setPreferredWidth[int], void, ChoiceForm, ChoiceForm[], void, null, column>
<javax.swing.table.TableColumn, setPreferredWidth[int], void, ChoiceForm, ChoiceForm[], void, null, column>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, ChoiceForm, ChoiceForm[], void, null, plugTable>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, ChoiceForm, ChoiceForm[], void, null, scroller>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, ChoiceForm, ChoiceForm[], void, null, rightPane>
<javax.swing.JComponent, setAlignmentX[float], void, ChoiceForm, ChoiceForm[], void, null, downBin>
<javax.swing.JComponent, setAlignmentX[float], void, ChoiceForm, ChoiceForm[], void, null, downSrc>
<javax.swing.JComponent, setAlignmentX[float], void, ChoiceForm, ChoiceForm[], void, null, details>
<javax.swing.JComponent, setAlignmentX[float], void, ChoiceForm, ChoiceForm[], void, null, install>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<javax.swing.Box, createRigidArea[java.awt.Dimension], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<javax.swing.Box, createRigidArea[java.awt.Dimension], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<javax.swing.Box, createRigidArea[java.awt.Dimension], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, rightPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, downPane>
<SAD, getMirrors[], SADNESS, ChoiceForm, ChoiceForm[], void, null, dataProvider>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, ChoiceForm, ChoiceForm[], void, null, mirrorsBox>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, ChoiceForm, ChoiceForm[], void, null, mirrorsBox>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, ChoiceForm, ChoiceForm[], void, null, upPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, upPane>
<javax.swing.Box, createRigidArea[java.awt.Dimension], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, upPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, upPane>
<javax.swing.Box, createRigidArea[java.awt.Dimension], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm, ChoiceForm[], void, null, upPane>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, ChoiceForm, ChoiceForm[], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, ChoiceForm, ChoiceForm[], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, ChoiceForm, ChoiceForm[], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, ChoiceForm, ChoiceForm[], void, null, nothing here>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm, ChoiceForm[], void, null, close>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm, ChoiceForm[], void, null, downBin>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm, ChoiceForm[], void, null, downSrc>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm, ChoiceForm[], void, null, details>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm, ChoiceForm[], void, null, install>
<java.awt.Window, dispose[], void, ChoiceForm, end[], void, null, parent>
<SAD, startUpdate[], SADNESS, ChoiceForm, end[], void, null, PluginDownload>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, ChoiceForm, getMirror[], java.lang.String, null, mirrorsBox>
<java.util.EventObject, getSource[], java.lang.Object, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, ae>
<ChoiceForm, end[], void, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JTable, getSelectedRows[], int[], ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugTable>
<java.awt.Dialog, show[], void, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, (new DetailForm(plugins[row],true))>
<SAD, install[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, java.lang.Object, run[], void, null, JOptionPane>
<java.lang.Throwable, printStackTrace[], void, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, ioe>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, JOptionPane>
<SAD, getDisplayName[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<SAD, downloadBin[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<SAD, getDisplayName[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<ChoiceForm, getMirror[], java.lang.String, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, downloadSrc[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<SAD, getDisplayName[], SADNESS, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, plugins[row]>
<ChoiceForm, getMirror[], java.lang.String, ChoiceForm, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.Throwable, printStackTrace[], void, ChoiceForm.DownloadErrorNotify, run[java.lang.Object, java.lang.Throwable], void, null, excep>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, ChoiceForm.DownloadErrorNotify, run[java.lang.Object, java.lang.Throwable], void, null, JOptionPane>
<SAD, getDisplayName[], SADNESS, ChoiceForm.DetailForm, DetailForm[PluginDesc, boolean], void, null, plugin>
<ChoiceForm$DetailForm, buildUI[], void, ChoiceForm.DetailForm, DetailForm[PluginDesc, boolean], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, ChoiceForm.DetailForm, buildUI[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, ChoiceForm.DetailForm, buildUI[], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.JDialog, getContentPane[], java.awt.Container, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, ChoiceForm.DetailForm, buildUI[], void, null, close>
<java.awt.Window, dispose[], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, this>
<javax.swing.JComponent, setAlignmentX[float], void, ChoiceForm.DetailForm, buildUI[], void, null, close>
<SAD, getAuthors[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, ChoiceForm.DetailForm, buildUI[], void, null, authTextBuf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, ChoiceForm.DetailForm, buildUI[], void, null, append("<br>")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, ChoiceForm.DetailForm, buildUI[], void, append[java.lang.Object], authTextBuf>
<java.lang.StringBuffer, toString[], java.lang.String, ChoiceForm.DetailForm, buildUI[], void, null, authTextBuf>
<SAD, getDesc[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<javax.swing.text.JTextComponent, setEditable[boolean], void, ChoiceForm.DetailForm, buildUI[], void, null, desc>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, ChoiceForm.DetailForm, buildUI[], void, null, desc>
<javax.swing.BorderFactory, createEtchedBorder[], javax.swing.border.Border, ChoiceForm.DetailForm, buildUI[], void, null, BorderFactory>
<javax.swing.text.JTextComponent, setEditable[boolean], void, ChoiceForm.DetailForm, buildUI[], void, null, authorPane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, ChoiceForm.DetailForm, buildUI[], void, null, authorPane>
<javax.swing.BorderFactory, createEtchedBorder[], javax.swing.border.Border, ChoiceForm.DetailForm, buildUI[], void, null, BorderFactory>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, ChoiceForm.DetailForm, buildUI[], void, null, mainPane>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getDisplayName[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getRelease[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getSrcUrl[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<ChoiceForm, getMirror[], java.lang.String, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getBinUrl[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<ChoiceForm, getMirror[], java.lang.String, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getBinSize[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<ChoiceForm$DetailForm, shortAdd[javax.swing.JComponent], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<SAD, getSrcSize[], SADNESS, ChoiceForm.DetailForm, buildUI[], void, null, plugin>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm.DetailForm, buildUI[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, ChoiceForm.DetailForm, buildUI[], void, add[java.awt.Component], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm.DetailForm, buildUI[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, ChoiceForm.DetailForm, buildUI[], void, add[java.awt.Component], nothing here>
<javax.swing.Box, createVerticalGlue[], java.awt.Component, ChoiceForm.DetailForm, buildUI[], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm.DetailForm, buildUI[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, ChoiceForm.DetailForm, buildUI[], void, add[java.awt.Component], nothing here>
<java.awt.Window, pack[], void, ChoiceForm.DetailForm, buildUI[], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, ChoiceForm.DetailForm, shortAdd[javax.swing.JComponent], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, ChoiceForm.DetailForm, shortAdd[javax.swing.JComponent], void, null, mainPane>
<SAD, getDisplayName[], SADNESS, ChoiceForm.PluginTableModel, getValueAt[int, int], java.lang.Object, null, plugins[row]>
<SAD, getRelease[], SADNESS, ChoiceForm.PluginTableModel, getValueAt[int, int], java.lang.Object, null, plugins[row]>
<SAD, getBinSize[], SADNESS, ChoiceForm.PluginTableModel, getValueAt[int, int], java.lang.Object, null, plugins[row]>
<SAD, getSrcSize[], SADNESS, ChoiceForm.PluginTableModel, getValueAt[int, int], java.lang.Object, null, plugins[row]>
<SAD, setHandler[], SADNESS, PlugReader, loadXml[java.io.Reader], boolean, null, parser>
<SAD, parse[], SADNESS, PlugReader, loadXml[java.io.Reader], boolean, setHandler[], parser>
<java.lang.Throwable, printStackTrace[], void, PlugReader, loadXml[java.io.Reader], boolean, null, e>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endDocument[], void, null, plugList>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endDocument[], void, null, mirrorList>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, PlugReader, attribute[java.lang.String, java.lang.String, boolean], void, null, attribs>
<java.lang.StringBuffer, setLength[int], void, PlugReader, startElement[java.lang.String], void, null, content>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<SAD, setUrlFormatter[], SADNESS, PlugReader, startElement[java.lang.String], void, null, currPlugin>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, deps>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, "">
<java.lang.Integer, parseInt[java.lang.String], int, PlugReader, startElement[java.lang.String], void, null, Integer>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, type>
<SAD, setBinName[], SADNESS, PlugReader, startElement[java.lang.String], void, null, currPlugin>
<SAD, setSrcName[], SADNESS, PlugReader, startElement[java.lang.String], void, null, currPlugin>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, mirrorList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, authors>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, elname>
<PlugReader, buildFormatter[java.lang.String], java.text.Format, PlugReader, startElement[java.lang.String], void, null, nothing here>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, PlugReader, charData[char[], int, int], void, null, content>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, elname>
<SAD, setDeps[], SADNESS, PlugReader, endElement[java.lang.String], void, null, currPlugin>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endElement[java.lang.String], void, null, deps>
<SAD, setAuthors[], SADNESS, PlugReader, endElement[java.lang.String], void, null, currPlugin>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endElement[java.lang.String], void, null, authors>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, plugList>
<java.util.ArrayList, clear[], void, PlugReader, endElement[java.lang.String], void, null, authors>
<java.util.ArrayList, clear[], void, PlugReader, endElement[java.lang.String], void, null, deps>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, elname>
<SAD, setDesc[], SADNESS, PlugReader, endElement[java.lang.String], void, null, currPlugin>
<java.lang.StringBuffer, toString[], java.lang.String, PlugReader, endElement[java.lang.String], void, null, content>
<java.lang.String, equals[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, elname>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, authors>
<java.lang.StringBuffer, toString[], java.lang.String, PlugReader, endElement[java.lang.String], void, null, content>
<java.util.HashMap, clear[], void, PlugReader, endElement[java.lang.String], void, null, attribs>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, null, pane>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, null, pane>
<SAD, getJextParent[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, getJextParent[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, textArea>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, ((JPanel)getContentPane())>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, setBorder[javax.swing.border.Border], nothing here>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, BorderFactory>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, pane>
<org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, host>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Cursor>
<org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, from>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Cursor>
<org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, to>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Cursor>
<org.jext.misc.JextMail, addComponent[java.lang.String, java.awt.Component], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, subject>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Cursor>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, btnPane>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, send>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, send>
<SAD, charAt[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, send>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, btnPane>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, cancel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, btnPane>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, details>
<SAD, charAt[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, details>
<javax.swing.text.JTextComponent, setEditable[boolean], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, tracer>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, add[java.awt.Component, java.lang.Object], nothing here>
<org.jext.misc.JextMail, load[], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<org.jext.misc.JextMail, save[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, parent>
<java.awt.Window, dispose[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<java.awt.Dialog, setResizable[boolean], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<SAD, centerComponentChild[], SADNESS, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, Utilities>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.JextMail, JextMail[org.jext.misc.JextTextArea], void, null, nothing here>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.misc.JextMail, load[], void, null, host>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.misc.JextMail, load[], void, null, from>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.misc.JextMail, load[], void, null, to>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.misc.JextMail, load[], void, null, subject>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, load[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.misc.JextMail, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, save[], void, null, host>
<SAD, setProperty[], SADNESS, org.jext.misc.JextMail, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, save[], void, null, from>
<SAD, setProperty[], SADNESS, org.jext.misc.JextMail, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, save[], void, null, to>
<SAD, setProperty[], SADNESS, org.jext.misc.JextMail, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, save[], void, null, subject>
<SAD, setEnabled[], SADNESS, org.jext.misc.JextMail, wait[boolean], void, null, send>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.misc.JextMail, wait[boolean], void, null, host>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.misc.JextMail, wait[boolean], void, null, to>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.misc.JextMail, wait[boolean], void, null, from>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.misc.JextMail, wait[boolean], void, null, subject>
<SAD, showWaitCursor[], SADNESS, org.jext.misc.JextMail, wait[boolean], void, null, parent>
<SAD, hideWaitCursor[], SADNESS, org.jext.misc.JextMail, wait[boolean], void, null, parent>
<org.jext.misc.JextMail, check[], boolean, org.jext.misc.JextMail, send[], void, null, nothing here>
<java.lang.Thread, setPriority[int], void, org.jext.misc.JextMail, send[], void, null, mailer>
<java.lang.Thread, setName[java.lang.String], void, org.jext.misc.JextMail, send[], void, null, mailer>
<java.lang.Thread, start[], void, org.jext.misc.JextMail, send[], void, null, mailer>
<org.jext.misc.JextMail, wait[boolean], void, org.jext.misc.JextMail, run[], void, null, nothing here>
<org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, org.jext.misc.JextMail, run[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, run[], void, null, host>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, run[], void, null, from>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, run[], void, null, to>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, run[], void, null, subject>
<SAD, showMessage[], SADNESS, org.jext.misc.JextMail, run[], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, run[], void, null, Jext>
<SAD, showMessage[], SADNESS, org.jext.misc.JextMail, run[], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, run[], void, null, Jext>
<org.jext.misc.JextMail, wait[boolean], void, org.jext.misc.JextMail, run[], void, null, nothing here>
<org.jext.misc.JextMail, stop[], void, org.jext.misc.JextMail, run[], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.JextMail, check[], boolean, null, getText()>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, equals[java.lang.Object], host>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, null, host>
<SAD, showMessage[], SADNESS, org.jext.misc.JextMail, check[], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, check[], boolean, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.JextMail, check[], boolean, null, getText()>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, equals[java.lang.Object], from>
<java.lang.String, indexOf[int], int, org.jext.misc.JextMail, check[], boolean, null, getText()>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, indexOf[int], from>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.JextMail, check[], boolean, null, getText()>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, equals[java.lang.Object], to>
<java.lang.String, indexOf[int], int, org.jext.misc.JextMail, check[], boolean, null, getText()>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.JextMail, check[], boolean, indexOf[int], to>
<SAD, showMessage[], SADNESS, org.jext.misc.JextMail, check[], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, check[], boolean, null, Jext>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.JextMail, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.misc.JextMail, send[], void, org.jext.misc.JextMail, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.JextMail, showDetails[], void, org.jext.misc.JextMail, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.JextMail, save[], void, org.jext.misc.JextMail, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Window, dispose[], void, org.jext.misc.JextMail, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Container, remove[java.awt.Component], void, org.jext.misc.JextMail, showDetails[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, showDetails[], void, remove[java.awt.Component], nothing here>
<SAD, setText[], SADNESS, org.jext.misc.JextMail, showDetails[], void, null, details>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, showDetails[], void, null, Jext>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.JextMail, showDetails[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.JextMail, showDetails[], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, setText[], SADNESS, org.jext.misc.JextMail, showDetails[], void, null, details>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, showDetails[], void, null, Jext>
<java.awt.Window, pack[], void, org.jext.misc.JextMail, showDetails[], void, null, nothing here>
<SAD, centerComponentChild[], SADNESS, org.jext.misc.JextMail, showDetails[], void, null, Utilities>
<javax.swing.JTextArea, append[java.lang.String], void, org.jext.misc.JextMail, trace[java.lang.String], void, null, tracer>
<javax.swing.text.JTextComponent, setCaretPosition[int], void, org.jext.misc.JextMail, trace[java.lang.String], void, null, tracer>
<javax.swing.text.Document, getLength[], int, org.jext.misc.JextMail, trace[java.lang.String], void, null, getDocument()>
<javax.swing.text.JTextComponent, getDocument[], javax.swing.text.Document, org.jext.misc.JextMail, trace[java.lang.String], void, getLength[], tracer>
<SAD, showMessage[], SADNESS, org.jext.misc.JextMail, error[java.lang.String], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.JextMail, error[java.lang.String], boolean, null, Jext>
<java.net.InetAddress, getLocalHost[], java.net.InetAddress, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, InetAddress>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, tracer>
<java.lang.String, indexOf[int], int, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, host>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, Integer>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, host>
<java.lang.String, substring[int, int], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, host>
<java.net.Socket, getInputStream[], java.io.InputStream, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, smtpPipe>
<java.net.Socket, getOutputStream[], java.io.OutputStream, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, smtpPipe>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.net.InetAddress, getHostName[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, ourselves>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.OutputStreamWriter, flush[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.OutputStreamWriter, flush[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.OutputStreamWriter, flush[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.OutputStreamWriter, flush[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[char[]], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<SAD, getDocument[], SADNESS, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, lineElement>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, doc>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, text>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<java.io.OutputStreamWriter, flush[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, response>
<org.jext.misc.JextMail, error[java.lang.String], boolean, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, out>
<org.jext.misc.JextMail, trace[java.lang.String], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, nothing here>
<java.net.Socket, close[], void, org.jext.misc.JextMail, sendMail[java.lang.String, java.lang.String, java.lang.String, java.lang.String], boolean, null, smtpPipe>
<SAD, getProperty[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, setLineSeparator[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, RE_CHAR_CLASSES)>
<SAD, set[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, RE_SYNTAX_PERL5)>
<SAD, getTabSize[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, getSoftTab[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<SAD, getText[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<SAD, getText[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<SAD, isMatch[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, indentPrevLineRE>
<java.lang.String, length[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, prevLine>
<java.lang.String, charAt[int], char, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, prevLine>
<java.lang.String, indexOf[int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, closeBrackets>
<java.lang.Math, max[int, int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, Math>
<java.lang.String, indexOf[int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, openBrackets>
<java.lang.String, length[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, line>
<java.lang.String, charAt[int], char, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, line>
<java.lang.String, indexOf[int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, closeBrackets>
<java.lang.String, indexOf[int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, openBrackets>
<SAD, findMatchingBracket[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, TextUtilities>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, getElement(lineIndex)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, map>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<SAD, getText[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, lineElement>
<SAD, getLeadingWhiteSpaceWidth[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, Utilities>
<SAD, remove[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<SAD, insertString[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, doc>
<SAD, createWhiteSpace[], SADNESS, org.jext.misc.Indent, indent[org.jext.misc.JextTextArea, int, boolean, boolean], boolean, null, Utilities>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, panelCard>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, parent>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, panelCard>
<SAD, getVirtualFolders[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, parent>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, buttonsPanel>
<SAD, getProperty[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, Jext>
<javax.swing.ButtonGroup, add[javax.swing.AbstractButton], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, group>
<javax.swing.ButtonGroup, add[javax.swing.AbstractButton], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, group>
<SAD, setSelected[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, workspaces>
<SAD, addActionListener[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, workspaces>
<SAD, addActionListener[], SADNESS, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, bookmarks>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, buttonsPanel>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, buttonsPanel>
<java.awt.CardLayout, first[java.awt.Container], void, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, carder>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.ProjectPanel, ProjectPanel[org.jext.misc.JextFrame], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.ProjectPanel.ToggleHandler, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<java.awt.CardLayout, first[java.awt.Container], void, org.jext.misc.ProjectPanel.ToggleHandler, actionPerformed[java.awt.event.ActionEvent], void, null, carder>
<java.awt.CardLayout, last[java.awt.Container], void, org.jext.misc.ProjectPanel.ToggleHandler, actionPerformed[java.awt.event.ActionEvent], void, null, carder>
<org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, org.jext.misc.StringSorter, sort[javax.swing.text.Document, boolean], void, null, nothing here>
<javax.swing.text.Document, getLength[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, boolean], void, null, doc>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, root>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, root>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, root>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, doc>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lineElement>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lineElement>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lines[i]>
<java.lang.String, substring[int, int], java.lang.String, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lines[i]>
<java.lang.String, length[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lines[i]>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, Arrays>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, buf>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lines[i]>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, buf>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, lines[i]>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, buf>
<javax.swing.text.Element, getStartOffset[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, getElement(fromIndex)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, getStartOffset[], root>
<javax.swing.text.Element, getEndOffset[], int, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, getElement(toIndex)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, getEndOffset[], root>
<javax.swing.text.Document, remove[int, int], void, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.StringSorter, sort[javax.swing.text.Document, int, int, boolean], void, null, buf>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<org.jext.misc.ZipExplorer, readZip[java.lang.String], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, btnPane>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, open>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, open>
<SAD, charAt[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, open>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, btnPane>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, cancel>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, add[java.lang.String, java.awt.Component], nothing here>
<org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, add[java.lang.String, java.awt.Component], nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<org.jext.misc.ZipExplorer, cancel[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<SAD, centerComponentChild[], SADNESS, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, Utilities>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.ZipExplorer, ZipExplorer[org.jext.misc.JextFrame, org.jext.misc.JextTextArea, java.lang.String], void, null, nothing here>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, setReorderingAllowed[boolean], zipTable>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, null, getColumn(1)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, getColumn[int], zipTable>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, org.jext.misc.ZipExplorer, createZipTableScroller[], javax.swing.JScrollPane, setPreferredSize[java.awt.Dimension], scroller>
<java.io.File, exists[], boolean, org.jext.misc.ZipExplorer, readZip[java.lang.String], void, null, zipped>
<SAD, showError[], SADNESS, org.jext.misc.ZipExplorer, readZip[java.lang.String], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, readZip[java.lang.String], void, null, Jext>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.misc.ZipExplorer, readZip[java.lang.String], void, null, zipFile>
<java.util.zip.ZipFile, getEntry[java.lang.String], java.util.zip.ZipEntry, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, zipFile>
<SAD, open[], SADNESS, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, textArea>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, zipFile>
<java.util.zip.ZipEntry, getSize[], long, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, entry>
<SAD, resetStatus[], SADNESS, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, parent>
<SAD, showError[], SADNESS, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, null, Jext>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<javax.swing.JTable, getSelectedRows[], int[], org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, zipTable>
<javax.swing.JTable, getSelectedRowCount[], int, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, zipTable>
<javax.swing.JTable, getValueAt[int, int], java.lang.Object, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, zipTable>
<javax.swing.JTable, getValueAt[int, int], java.lang.Object, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, zipTable>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, file>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, file>
<SAD, showError[], SADNESS, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, createFile[], SADNESS, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, path>
<org.jext.misc.ZipExplorer, readZipContent[java.lang.String], boolean, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.ZipExplorer, cancel[], void, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, saveRecent[], SADNESS, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<org.jext.misc.ZipExplorer, cancel[], void, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.ZipExplorer, cancel[], void, org.jext.misc.ZipExplorer, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.util.zip.ZipFile, close[], void, org.jext.misc.ZipExplorer, cancel[], void, null, zipFile>
<java.awt.Window, dispose[], void, org.jext.misc.ZipExplorer, cancel[], void, null, nothing here>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.misc.ZipExplorer.ZipTableModel, ZipTableModel[], void, null, zipEntries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.misc.ZipExplorer.ZipTableModel, ZipTableModel[], void, null, zipEntries>
<java.util.zip.ZipEntry, isDirectory[], boolean, org.jext.misc.ZipExplorer.ZipTableModel, ZipTableModel[], void, null, name>
<org.jext.misc.ZipExplorer$ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, org.jext.misc.ZipExplorer.ZipTableModel, ZipTableModel[], void, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.misc.ZipExplorer.ZipTableModel, getRowCount[], int, null, zipContents>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, zipContents>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, file>
<java.lang.String, lastIndexOf[int], int, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, name>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, name>
<java.lang.String, substring[int, int], java.lang.String, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, name>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer.ZipTableModel, getColumnName[int], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.ZipExplorer.ZipTableModel, getColumnName[int], java.lang.String, null, Jext>
<java.util.ArrayList, size[], int, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.lang.String, compareTo[java.lang.String], int, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, getName()>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, compareTo[java.lang.String], z>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, file>
<java.util.ArrayList, add[int, java.lang.Object], void, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.lang.StringBuffer, deleteCharAt[int], java.lang.StringBuffer, org.jext.misc.PluginDesc, initDirectories[], boolean, null, sb>
<java.lang.StringBuffer, length[], int, org.jext.misc.PluginDesc, initDirectories[], boolean, null, sb>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.PluginDesc, initDirectories[], boolean, null, sb>
<java.io.File, exists[], boolean, org.jext.misc.PluginDesc, initDirectories[], boolean, null, currDir>
<java.io.File, isDirectory[], boolean, org.jext.misc.PluginDesc, initDirectories[], boolean, null, currDir>
<java.io.File, renameTo[java.io.File], boolean, org.jext.misc.PluginDesc, initDirectories[], boolean, null, currDir>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.PluginDesc, initDirectories[], boolean, null, bak")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.PluginDesc, initDirectories[], boolean, null, sb>
<java.io.File, mkdir[], boolean, org.jext.misc.PluginDesc, initDirectories[], boolean, null, currDir>
<org.jext.misc.PluginDesc, getSrcUrl[java.lang.String], java.net.URL, org.jext.misc.PluginDesc, downloadSrc[org.jext.misc.HandlingRunnable, java.lang.String], void, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDesc, downloadSrc[org.jext.misc.HandlingRunnable, java.lang.String], void, null, out>
<java.net.URL, toString[], java.lang.String, org.jext.misc.PluginDesc, downloadSrc[org.jext.misc.HandlingRunnable, java.lang.String], void, null, url>
<SAD, downloadFile[], SADNESS, org.jext.misc.PluginDesc, downloadSrc[org.jext.misc.HandlingRunnable, java.lang.String], void, null, Utilities>
<org.jext.misc.PluginDesc, getBinUrl[java.lang.String], java.net.URL, org.jext.misc.PluginDesc, downloadBin[org.jext.misc.HandlingRunnable, java.lang.String], void, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDesc, downloadBin[org.jext.misc.HandlingRunnable, java.lang.String], void, null, out>
<java.net.URL, toString[], java.lang.String, org.jext.misc.PluginDesc, downloadBin[org.jext.misc.HandlingRunnable, java.lang.String], void, null, url>
<SAD, downloadFile[], SADNESS, org.jext.misc.PluginDesc, downloadBin[org.jext.misc.HandlingRunnable, java.lang.String], void, null, Utilities>
<org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, org.jext.misc.PluginDesc, install[java.lang.Runnable], void, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, out>
<java.io.File, exists[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, file>
<java.lang.Runnable, run[], void, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, notifyMissing>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, zip>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entries>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entry>
<java.util.zip.ZipEntry, isDirectory[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entry>
<java.io.File, exists[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, outDir>
<java.io.File, mkdir[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, outDir>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, zip>
<java.lang.String, length[], int, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, indexOf[int], int, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, entryName>
<java.io.File, mkdir[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, (new File(outPath))>
<java.io.File, exists[], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, outFile>
<java.io.File, renameTo[java.io.File], boolean, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, outFile>
<SAD, copy[], SADNESS, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, Utilities>
<java.util.zip.ZipFile, close[], void, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, zip>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.PluginDesc, install[java.lang.Runnable, java.lang.String], void, null, ioe>
<java.text.Format, format[java.lang.Object], java.lang.String, org.jext.misc.PluginDesc, getSrcUrl[java.lang.String], java.net.URL, null, format>
<java.text.Format, format[java.lang.Object], java.lang.String, org.jext.misc.PluginDesc, getBinUrl[java.lang.String], java.net.URL, format[java.lang.Object], format>
<java.io.InputStream, read[byte[]], int, org.jext.misc.CopyThread, work[], java.lang.Object, null, in>
<java.io.OutputStream, write[byte[], int, int], void, org.jext.misc.CopyThread, work[], java.lang.Object, null, out>
<java.io.InputStream, close[], void, org.jext.misc.CopyThread, work[], java.lang.Object, null, in>
<java.io.OutputStream, close[], void, org.jext.misc.CopyThread, work[], java.lang.Object, null, out>
<SAD, getProperties[], SADNESS, org.jext.misc.PluginDownload, PluginDownload[], void, null, Jext>
<SAD, initProperties[], SADNESS, org.jext.misc.PluginDownload, PluginDownload[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, PluginDownload[], void, null, Jext>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.PluginDownload, PluginDownload[], void, null, mue>
<java.awt.Window, dispose[], void, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, ((JDialog)dial)>
<java.io.File, getPath[], java.lang.String, org.jext.misc.PluginDownload, downloadJar[], void, null, downloadedJarPath>
<java.net.URL, openStream[], java.io.InputStream, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, autoUpdateVersionUrl>
<java.io.InputStream, read[byte[]], int, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, releaseInp>
<java.io.InputStream, close[], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, releaseInp>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Integer>
<java.lang.String, trim[], java.lang.String, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, new String(buf)>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, dial>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, String>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, ioe>
<org.jext.misc.PluginDownload, downloadList[], void, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, nothing here>
<SAD, start[], SADNESS, org.jext.misc.PluginDownload, downloadJar[], void, null, t>
<SAD, downloadFile[], SADNESS, org.jext.misc.PluginDownload, downloadList[], void, null, Utilities>
<java.io.File, getPath[], java.lang.String, org.jext.misc.PluginDownload, downloadList[], void, null, downloadedListPath>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, excep>
<org.jext.misc.PluginDownload, showUpdateWindow[], void, org.jext.misc.HandlingRunnable, run[java.lang.Object, java.lang.Throwable], void, null, nothing here>
<java.io.File, exists[], boolean, org.jext.misc.PluginDownload, loadList[], boolean, null, downloadedListPath>
<java.io.File, getPath[], java.lang.String, org.jext.misc.PluginDownload, loadList[], boolean, null, downloadedListPath>
<SAD, loadXml[], SADNESS, org.jext.misc.PluginDownload, loadList[], boolean, null, getUpdater()>
<org.jext.misc.PluginDownload, getUpdater[], org.jext.misc.AbstractPlugReader, org.jext.misc.PluginDownload, loadList[], boolean, loadXml[], nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDownload, loadList[], boolean, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.PluginDownload, loadList[], boolean, null, ioe>
<java.io.Reader, close[], void, org.jext.misc.PluginDownload, loadList[], boolean, null, reader>
<org.jext.misc.PluginDownload, getDefaultJarPath[], java.lang.String, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, out>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, err>
<org.jext.misc.PluginDownload, getDefaultJarPath[], java.lang.String, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, nothing here>
<java.io.File, exists[], boolean, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, downloadedJarPath>
<java.io.File, getPath[], java.lang.String, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, downloadedJarPath>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, out>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, null, ioe>
<java.lang.Class, newInstance[], , org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, null, loadClass(className)>
<java.lang.ClassLoader, loadClass[java.lang.String], java.lang.Class<?>, org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, newInstance[], loader>
<java.lang.Class, newInstance[], , org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, null, loadClass(className)>
<java.lang.ClassLoader, loadClass[java.lang.String], java.lang.Class<?>, org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, newInstance[], defLoader>
<org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, org.jext.misc.PluginDownload, newUpdater[], org.jext.misc.AbstractPlugReader, null, nothing here>
<org.jext.misc.PluginDownload, getInstanceFromLoader[java.lang.String], java.lang.Object, org.jext.misc.PluginDownload, newUpdatePanel[], javax.swing.JPanel, null, nothing here>
<org.jext.misc.PluginDownload, newUpdater[], org.jext.misc.AbstractPlugReader, org.jext.misc.PluginDownload, getUpdater[], org.jext.misc.AbstractPlugReader, null, nothing here>
<java.lang.ClassLoader, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.misc.PluginDownload, getDtd[], java.io.Reader, null, loader>
<SAD, initDirectories[], SADNESS, org.jext.misc.PluginDownload, startUpdate[], void, null, PluginDesc>
<org.jext.misc.PluginDownload, downloadJar[], void, org.jext.misc.PluginDownload, startUpdate[], void, null, nothing here>
<org.jext.misc.PluginDownload, buildChainingClassLoader[], boolean, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, nothing here>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, Jext>
<org.jext.misc.PluginDownload, getDefaultJarPath[], java.lang.String, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, Jext>
<org.jext.misc.PluginDownload, loadList[], boolean, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, Jext>
<org.jext.misc.PluginDownload, newUpdatePanel[], javax.swing.JPanel, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, nothing here>
<javax.swing.JDialog, setContentPane[java.awt.Container], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, updateWindow>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, updateWindow>
<java.lang.System, exit[int], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, System>
<java.awt.Window, pack[], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, updateWindow>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, updateWindow>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, org.jext.misc.PluginDownload, showUpdateWindow[], void, null, err>
<org.jext.misc.PluginDownload, startUpdate[], void, org.jext.misc.PluginDownload, main[java.lang.String[]], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload.WaitDialog, WaitDialog[], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.PluginDownload.WaitDialog, WaitDialog[], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.PluginDownload.WaitDialog, WaitDialog[], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginDownload.WaitDialog, WaitDialog[], void, null, Jext>
<java.awt.Window, pack[], void, org.jext.misc.PluginDownload.WaitDialog, WaitDialog[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, title>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, dropDown>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, dropDown>
<SAD, getFlatMenus[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, dropDown>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, LineBorder>
<SAD, getName[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, getName[], parent>
<SAD, getWorkspacesNames[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, getWorkspacesNames[], parent>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, names[i]>
<SAD, setActionCommand[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, title>
<SAD, addActionListener[], SADNESS, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, title>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, null, dropDown>
<org.jext.misc.WorkspaceSwitcher, buildDropDownList[], void, org.jext.misc.WorkspaceSwitcher, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.ComponentEvent, getComponent[], java.awt.Component, org.jext.misc.WorkspaceSwitcher, mouseClicked[java.awt.event.MouseEvent], void, null, me>
<javax.swing.JPopupMenu, show[java.awt.Component, int, int], void, org.jext.misc.WorkspaceSwitcher, mouseClicked[java.awt.event.MouseEvent], void, null, dropDown>
<javax.swing.JComponent, getHeight[], int, org.jext.misc.WorkspaceSwitcher, mouseClicked[java.awt.event.MouseEvent], void, null, c>
<javax.swing.AbstractButton, getActionCommand[], java.lang.String, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, getSource())>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, getActionCommand[], evt>
<SAD, getTextArea[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getTabbedPane[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, indexOfComponent[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, textAreasPane>
<SAD, removeFile[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, workspaces>
<SAD, removeTabAt[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, textAreasPane>
<SAD, getTextAreas[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, createFile[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, selectWorkspaceOfName[], SADNESS, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, workspaces>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.misc.WorkspaceSwitcher.Switcher, actionPerformed[java.awt.event.ActionEvent], void, null, SwingUtilities>
<SAD, addFile[], SADNESS, java.lang.Object, run[], void, null, workspaces>
<SAD, add[], SADNESS, java.lang.Object, run[], void, null, textAreasPane>
<SAD, setSelectedComponent[], SADNESS, java.lang.Object, run[], void, null, textAreasPane>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.TabSwitcher, TabSwitcher[boolean], void, null, append((right) ? "left" : "right")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.TabSwitcher, TabSwitcher[boolean], void, toString[], new StringBuffer("TabSwitcher_")>
<SAD, getTabbedPane[], SADNESS, org.jext.misc.TabSwitcher, actionPerformed[java.awt.event.ActionEvent], void, null, getJextParent()>
<SAD, getJextParent[], SADNESS, org.jext.misc.TabSwitcher, actionPerformed[java.awt.event.ActionEvent], void, getTabbedPane[], getTextArea(evt)>
<SAD, getTextArea[], SADNESS, org.jext.misc.TabSwitcher, actionPerformed[java.awt.event.ActionEvent], void, getJextParent[], nothing here>
<SAD, nextTab[], SADNESS, org.jext.misc.TabSwitcher, actionPerformed[java.awt.event.ActionEvent], void, null, tabbed>
<SAD, previousTab[], SADNESS, org.jext.misc.TabSwitcher, actionPerformed[java.awt.event.ActionEvent], void, null, tabbed>
<java.awt.Dialog, setTitle[java.lang.String], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, setFont[java.awt.Font], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, setFont[java.awt.Font], nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, add[java.lang.String, java.awt.Component], nothing here>
<SAD, getIcon[], SADNESS, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, Utilities>
<java.lang.Math, abs[int], int, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, Math>
<java.util.Random, nextInt[], int, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, new Random()>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, add[java.lang.String, java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, ok>
<java.awt.Window, dispose[], void, javax.swing.AbstractAction, actionPerformed[java.awt.event.ActionEvent], void, null, this>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, _pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, add[java.lang.String, java.awt.Component], nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, Utilities>
<java.awt.Dialog, setResizable[boolean], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.AboutWindow, AboutWindow[org.jext.misc.JextFrame], void, null, nothing here>
<java.lang.Thread, setDaemon[boolean], void, org.jext.misc.AutoSave, AutoSave[org.jext.misc.JextFrame], void, null, nothing here>
<java.lang.Thread, start[], void, org.jext.misc.AutoSave, AutoSave[org.jext.misc.JextFrame], void, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.AutoSave, run[], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.misc.AutoSave, run[], void, null, Jext>
<java.lang.Thread, sleep[long], void, org.jext.misc.AutoSave, run[], void, null, Thread>
<SAD, getTextAreas[], SADNESS, org.jext.misc.AutoSave, run[], void, null, parent>
<SAD, autoSave[], SADNESS, org.jext.misc.AutoSave, run[], void, null, areas[i]>
<java.lang.Thread, interrupted[], boolean, org.jext.misc.AutoSave, run[], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.PluginAuthor, toString[], java.lang.String, null, append("</a>"))>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.PluginAuthor, toString[], java.lang.String, toString[], append(name)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.PluginAuthor, toString[], java.lang.String, append[java.lang.String], append("\">")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.PluginAuthor, toString[], java.lang.String, append[java.lang.String], append(email)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.PluginAuthor, toString[], java.lang.String, append[java.lang.String], new StringBuffer("<a href=\"mailto:")>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginAuthor, toString[], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginAuthor, toString[], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.PluginAuthor, toString[], java.lang.String, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.FindAccessory, FindAccessory[], void, null, nothing here>
<org.jext.misc.FindAccessory, register[javax.swing.JFileChooser], void, org.jext.misc.FindAccessory, FindAccessory[javax.swing.JFileChooser], void, null, nothing here>
<org.jext.misc.FindAccessory, setMaxFindHits[int], void, org.jext.misc.FindAccessory, FindAccessory[javax.swing.JFileChooser, int], void, null, nothing here>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.jext.misc.FindAccessory, actionPerformed[java.awt.event.ActionEvent], void, null, e>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.FindAccessory, actionPerformed[java.awt.event.ActionEvent], void, null, command>
<org.jext.misc.FindAccessory, quit[], void, org.jext.misc.FindAccessory, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.FindAccessory, actionPerformed[java.awt.event.ActionEvent], void, null, command>
<org.jext.misc.FindAccessory, quit[], void, org.jext.misc.FindAccessory, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.io.File, exists[], boolean, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, f>
<javax.swing.JFileChooser, setFileSelectionMode[int], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<javax.swing.JFileChooser, getFileFilter[], javax.swing.filechooser.FileFilter, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<javax.swing.filechooser.FileFilter, accept[java.io.File], boolean, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, filter>
<javax.swing.JFileChooser, getAcceptAllFileFilter[], javax.swing.filechooser.FileFilter, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<javax.swing.JFileChooser, setFileFilter[javax.swing.filechooser.FileFilter], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<java.io.File, getParent[], java.lang.String, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, f>
<javax.swing.JFileChooser, setCurrentDirectory[java.io.File], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<javax.swing.JFileChooser, setSelectedFile[java.io.File], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<javax.swing.JFileChooser, setSelectedFile[java.io.File], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<java.awt.Container, invalidate[], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<java.awt.Component, repaint[], void, org.jext.misc.FindAccessory, goTo[java.io.File], void, null, chooser>
<org.jext.misc.FindAccessory$FindTabs, showFindResults[], void, org.jext.misc.FindAccessory, startThread[], void, null, searchTabs>
<java.lang.Thread, start[], void, org.jext.misc.FindAccessory, startThread[], void, null, searchThread>
<java.lang.Thread, isAlive[], boolean, org.jext.misc.FindAccessory, isRunning[], boolean, null, searchThread>
<java.lang.Thread, currentThread[], java.lang.Thread, org.jext.misc.FindAccessory, run[], void, null, Thread>
<javax.swing.AbstractAction, setEnabled[boolean], void, org.jext.misc.FindAccessory, run[], void, null, actionStart>
<javax.swing.AbstractAction, setEnabled[boolean], void, org.jext.misc.FindAccessory, run[], void, null, actionStop>
<org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, org.jext.misc.FindAccessory, run[], void, null, nothing here>
<javax.swing.JFileChooser, getCurrentDirectory[], java.io.File, org.jext.misc.FindAccessory, run[], void, null, chooser>
<org.jext.misc.FindAccessory, newFind[], org.jext.misc.FindFilter[], org.jext.misc.FindAccessory, run[], void, null, nothing here>
<javax.swing.AbstractAction, setEnabled[boolean], void, org.jext.misc.FindAccessory, run[], void, null, actionStart>
<javax.swing.AbstractAction, setEnabled[boolean], void, org.jext.misc.FindAccessory, run[], void, null, actionStop>
<java.io.File, exists[], boolean, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, base>
<java.io.File, isDirectory[], boolean, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, base>
<java.io.File, getParent[], java.lang.String, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, base>
<java.io.File, listFiles[], java.io.File[], org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, folder>
<org.jext.misc.FindAccessory, accept[java.io.File, org.jext.misc.FindFilter[]], boolean, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, nothing here>
<org.jext.misc.FindAccessory$FindTabs, addFoundFile[java.io.File], void, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, searchTabs>
<org.jext.misc.FindAccessory, updateProgress[], void, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, nothing here>
<java.lang.Thread, sleep[long], void, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, currentThread()>
<java.lang.Thread, currentThread[], java.lang.Thread, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, sleep[long], Thread>
<java.io.File, isDirectory[], boolean, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, files[i]>
<org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, org.jext.misc.FindAccessory, runFind[java.io.File, org.jext.misc.FindFilter[]], void, null, nothing here>
<org.jext.misc.FindFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, org.jext.misc.FindAccessory, accept[java.io.File, org.jext.misc.FindFilter[]], boolean, null, filters[i]>
<org.jext.misc.FindAccessory, updateProgress[], void, org.jext.misc.FindAccessory, newFind[], org.jext.misc.FindFilter[], null, nothing here>
<org.jext.misc.FindAccessory$FindTabs, newFind[], org.jext.misc.FindFilter[], org.jext.misc.FindAccessory, newFind[], org.jext.misc.FindFilter[], null, searchTabs>
<org.jext.misc.FindAccessory$FindControls, showProgress[int, int], void, org.jext.misc.FindAccessory, updateProgress[], void, null, controlPanel>
<javax.swing.JFileChooser, addActionListener[java.awt.event.ActionListener], void, org.jext.misc.FindAccessory, register[javax.swing.JFileChooser], void, null, c>
<javax.swing.JFileChooser, removeActionListener[java.awt.event.ActionListener], void, org.jext.misc.FindAccessory, unregister[javax.swing.JFileChooser], void, null, c>
<org.jext.misc.FindAccessory, stop[], void, org.jext.misc.FindAccessory, quit[], void, null, nothing here>
<org.jext.misc.FindAccessory, unregister[javax.swing.JFileChooser], void, org.jext.misc.FindAccessory, quit[], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.FindAccessory, action[java.lang.String], void, null, command>
<org.jext.misc.FindAccessory, startThread[], void, org.jext.misc.FindAccessory, action[java.lang.String], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.FindAccessory, action[java.lang.String], void, null, command>
<org.jext.misc.FindAccessory, stop[], void, org.jext.misc.FindAccessory, action[java.lang.String], void, null, nothing here>
<org.jext.misc.FindAccessory, action[java.lang.String], void, org.jext.misc.FindAccessory.FindAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.jext.misc.FindAccessory.FindAction, actionPerformed[java.awt.event.ActionEvent], void, null, e>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, nothing here>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, tools>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, tools>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, tools>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, nothing here>
<javax.swing.JComponent, setDoubleBuffered[boolean], void, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, progress>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindAccessory.FindControls, FindControls[org.jext.misc.FindAccessory.FindAction, org.jext.misc.FindAccessory.FindAction, boolean], void, null, nothing here>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, progress>
<java.lang.String, valueOf[int], java.lang.String, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, String>
<java.lang.String, valueOf[int], java.lang.String, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, String>
<SAD, getProperty[], SADNESS, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindAccessory.FindControls, showProgress[int, int], void, null, Jext>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, org.jext.misc.FindAccessory.FindTabs, FindTabs[], void, null, nothing here>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, org.jext.misc.FindAccessory.FindTabs, FindTabs[], void, null, nothing here>
<javax.swing.JComponent, setDoubleBuffered[boolean], void, org.jext.misc.FindAccessory.FindTabs, FindTabs[], void, null, resultsPanel>
<javax.swing.JComponent, setDoubleBuffered[boolean], void, org.jext.misc.FindAccessory.FindTabs, FindTabs[], void, null, resultsScroller>
<javax.swing.JTabbedPane, addTab[java.lang.String, java.awt.Component], void, org.jext.misc.FindAccessory.FindTabs, FindTabs[], void, null, nothing here>
<org.jext.misc.FindAccessory$FindResults, append[java.io.File], void, org.jext.misc.FindAccessory.FindTabs, addFoundFile[java.io.File], void, null, resultsPanel>
<javax.swing.JTabbedPane, setSelectedComponent[java.awt.Component], void, org.jext.misc.FindAccessory.FindTabs, showFindResults[], void, null, nothing here>
<org.jext.misc.FindAccessory$FindResults, clear[], void, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, resultsPanel>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, resultsScroller>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, resultsScroller>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, resultsScroller>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, nothing here>
<javax.swing.JTabbedPane, getComponentAt[int], java.awt.Component, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, nothing here>
<org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, fac>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, size[], int, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, size[], int, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindAccessory.FindResults, FindResults[], void, null, nothing here>
<javax.swing.JList, setSelectionMode[int], void, org.jext.misc.FindAccessory.FindResults, FindResults[], void, null, fileList>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.FindAccessory.FindResults, FindResults[], void, null, fileList>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindAccessory.FindResults, FindResults[], void, null, nothing here>
<java.awt.event.MouseEvent, getClickCount[], int, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JList, locationToIndex[java.awt.Point], int, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, fileList>
<java.awt.event.MouseEvent, getPoint[], java.awt.Point, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<org.jext.misc.FindAccessory, goTo[java.io.File], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.DefaultListModel, elementAt[int], java.lang.Object, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, model>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.misc.FindAccessory.FindResults, FindResults[], void, null, fileList>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, org.jext.misc.FindAccessory.FindResults, append[java.io.File], void, null, model>
<javax.swing.DefaultListModel, removeAllElements[], void, org.jext.misc.FindAccessory.FindResults, clear[], void, null, model>
<java.awt.Container, invalidate[], void, org.jext.misc.FindAccessory.FindResults, clear[], void, null, nothing here>
<java.awt.Component, repaint[], void, org.jext.misc.FindAccessory.FindResults, clear[], void, null, nothing here>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, FindResultsCellRenderer[], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.DefaultListModel, elementAt[int], java.lang.Object, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, model>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<java.io.File, getAbsolutePath[], java.lang.String, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, file>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JList, getSelectionBackground[], java.awt.Color, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JList, getSelectionForeground[], java.awt.Color, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, list>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.misc.FindAccessory.FindResults.FindResultsCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindFilterFactory, createFindFilter[], org.jext.misc.FindFilter, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindByDate, FindByDate[], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.misc.FindByDate, FindByDate[], void, null, fromDateField>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.FindByDate, FindByDate[], void, null, fromDateField>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.misc.FindByDate, FindByDate[], void, null, toDateField>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.FindByDate, FindByDate[], void, null, toDateField>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByDate, FindByDate[], void, null, p>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindByDate, FindByDate[], void, null, nothing here>
<org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, org.jext.misc.FindByDate, createFindFilter[], org.jext.misc.FindFilter, null, nothing here>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.misc.FindByDate, createFindFilter[], org.jext.misc.FindFilter, null, fromDateField>
<org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, org.jext.misc.FindByDate, createFindFilter[], org.jext.misc.FindFilter, null, nothing here>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.misc.FindByDate, createFindFilter[], org.jext.misc.FindFilter, null, toDateField>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, formatter>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, s>
<java.text.DateFormat, format[java.util.Date], java.lang.String, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, formatter>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, formatter>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, s>
<java.text.DateFormat, format[java.util.Date], java.lang.String, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, formatter>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, new Date()>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, formatter>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, s>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, startDateToTime[java.lang.String], long, null, d>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, dateFormatter>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, s>
<java.text.DateFormat, format[java.util.Date], java.lang.String, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, dateFormatter>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, dateFormatter>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, d>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, s>
<java.text.DateFormat, format[java.util.Date], java.lang.String, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, dateFormatter>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, new Date()>
<java.text.SimpleDateFormat, parse[java.lang.String, java.text.ParsePosition], java.util.Date, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, dateFormatter>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, d>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, s>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, d>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, s>
<java.util.Date, getTime[], long, org.jext.misc.FindByDate, endDateToTime[java.lang.String], long, null, d>
<java.io.File, lastModified[], long, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, f>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByDate.DateFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindByName, FindByName[], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.FindByName, FindByName[], void, null, p>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.FindByName, FindByName[], void, null, combo>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.FindByName, FindByName[], void, null, combo>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.FindByName, FindByName[], void, null, combo>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByName, FindByName[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByName, FindByName[], void, null, p>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByName, FindByName[], void, null, p>
<SAD, getProperty[], SADNESS, org.jext.misc.FindByName, FindByName[], void, null, Jext>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.misc.FindByName, FindByName[], void, null, ignoreCaseCheck>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.FindByName, FindByName[], void, null, p>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.FindByName, FindByName[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.misc.FindByName, createFindFilter[], org.jext.misc.FindFilter, null, nameField>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.misc.FindByName, createFindFilter[], org.jext.misc.FindFilter, null, combo>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.misc.FindByName, createFindFilter[], org.jext.misc.FindFilter, null, ignoreCaseCheck>
<java.lang.String, length[], int, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, match>
<java.io.File, getName[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, f>
<SAD, match[], SADNESS, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, Utilities>
<java.lang.String, indexOf[java.lang.String], int, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, toLowerCase()>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, indexOf[java.lang.String], filename>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, match>
<java.lang.String, indexOf[java.lang.String], int, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, filename>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, filename>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, filename>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, toLowerCase()>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, startsWith[java.lang.String], filename>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, match>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, toLowerCase()>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, endsWith[java.lang.String], filename>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, match>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.misc.FindByName.NameFilter, accept[java.io.File, org.jext.misc.FindProgressCallback], boolean, null, filename>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, toolbar>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, getIcon[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, newWorkspace>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, newWorkspace>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, getIcon[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, removeWorkspace>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, removeWorkspace>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, getIcon[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, switchWorkspace>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addMouseListener[], SADNESS, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, switchWorkspace>
<javax.swing.JList, setSelectionMode[int], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, workspacesList>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, workspacesList>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, scroller>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.Workspaces, Workspaces[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.misc.Workspaces, load[], void, null, workspacesList>
<java.io.File, exists[], boolean, org.jext.misc.Workspaces, load[], void, null, f>
<java.io.File, length[], long, org.jext.misc.Workspaces, load[], void, null, f>
<SAD, getBooleanProperty[], SADNESS, org.jext.misc.Workspaces, load[], void, null, Jext>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.Workspaces, load[], void, null, in>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.Workspaces, load[], void, null, in>
<java.io.BufferedReader, close[], void, org.jext.misc.Workspaces, load[], void, null, in>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, load[], void, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.misc.Workspaces, load[], void, null, parser>
<SAD, parse[], SADNESS, org.jext.misc.Workspaces, load[], void, setHandler[], parser>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces, load[], void, null, workspacesList>
<SAD, size[], SADNESS, org.jext.misc.Workspaces, save[], void, null, getInstances()>
<SAD, getInstances[], SADNESS, org.jext.misc.Workspaces, save[], void, size[], Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.misc.Workspaces, save[], void, null, Jext>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.Workspaces, save[], void, newLine[], writer>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, save[], void, null, model>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, save[], void, null, model>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.Workspaces, save[], void, null, writer>
<org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, org.jext.misc.Workspaces, save[], void, null, nothing here>
<org.jext.misc.Workspaces$WorkspaceElement, toString[], java.lang.String, org.jext.misc.Workspaces, save[], void, null, e>
<org.jext.misc.Workspaces$WorkspaceElement, getSelectedIndex[], int, org.jext.misc.Workspaces, save[], void, null, e>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, save[], void, null, list>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, save[], void, null, list>
<SAD, isNew[], SADNESS, org.jext.misc.Workspaces, save[], void, null, area>
<java.io.Writer, write[char[]], void, org.jext.misc.Workspaces, save[], void, null, writer>
<org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, org.jext.misc.Workspaces, save[], void, null, nothing here>
<SAD, getCurrentFile[], SADNESS, org.jext.misc.Workspaces, save[], void, null, area>
<SAD, getCaretPosition[], SADNESS, org.jext.misc.Workspaces, save[], void, null, area>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.Workspaces, save[], void, newLine[], writer>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.io.Writer, write[java.lang.String], void, org.jext.misc.Workspaces, save[], void, newLine[], writer>
<java.io.BufferedWriter, flush[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.io.BufferedWriter, close[], void, org.jext.misc.Workspaces, save[], void, null, writer>
<java.lang.String, length[], int, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, source>
<java.lang.String, length[], int, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, source>
<java.lang.String, charAt[int], char, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, source>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.Workspaces, convertToXML[java.lang.String], java.lang.String, null, buf>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, getWorkspacesNames[], java.lang.String[], null, model>
<org.jext.misc.Workspaces$WorkspaceElement, getName[], java.lang.String, org.jext.misc.Workspaces, getWorkspacesNames[], java.lang.String[], null, get(i))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, getWorkspacesNames[], java.lang.String[], getName[], model>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.Workspaces, addFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, remove[java.lang.Object], boolean, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<org.jext.misc.Workspaces$WorkspaceElement, setSelectedIndex[int], void, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, currentWorkspace>
<org.jext.misc.Workspaces$WorkspaceElement, getSelectedIndex[], int, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, currentWorkspace>
<org.jext.misc.Workspaces$WorkspaceElement, setSelectedIndex[int], void, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, currentWorkspace>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.misc.Workspaces, newWorkspace[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, newWorkspace[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, newWorkspace[], void, null, Jext>
<java.lang.String, length[], int, org.jext.misc.Workspaces, newWorkspace[], void, null, response>
<org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, org.jext.misc.Workspaces, newWorkspace[], void, null, nothing here>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, model>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, name>
<org.jext.misc.Workspaces$WorkspaceElement, getName[], java.lang.String, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, get(i))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, getName[], model>
<SAD, message[], SADNESS, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, GUIUtilities>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, model>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, workspacesList>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, null, model>
<SAD, removeAll[], SADNESS, org.jext.misc.Workspaces, clear[], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, org.jext.misc.Workspaces, clear[], void, removeAll[], parent>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, clear[], void, null, model>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, clear[], void, null, model>
<java.util.ArrayList, clear[], void, org.jext.misc.Workspaces, clear[], void, null, contents>
<javax.swing.DefaultListModel, remove[int], java.lang.Object, org.jext.misc.Workspaces, clear[], void, null, model>
<SAD, closeAll[], SADNESS, org.jext.misc.Workspaces, removeWorkspace[], void, null, parent>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.Workspaces, removeWorkspace[], void, null, workspacesList>
<javax.swing.DefaultListModel, remove[int], java.lang.Object, org.jext.misc.Workspaces, removeWorkspace[], void, null, model>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.misc.Workspaces, removeWorkspace[], void, null, workspacesList>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, removeWorkspace[], void, null, model>
<org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, org.jext.misc.Workspaces, removeWorkspace[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, removeWorkspace[], void, null, Jext>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces, removeWorkspace[], void, null, workspacesList>
<SAD, setBatchMode[], SADNESS, org.jext.misc.Workspaces, loadTextAreas[], void, null, parent>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, loadTextAreas[], void, null, model>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, loadTextAreas[], void, null, model>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, loadTextAreas[], void, null, a>
<SAD, loadTextArea[], SADNESS, org.jext.misc.Workspaces, loadTextAreas[], void, null, parent>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, loadTextAreas[], void, null, a>
<SAD, setBatchMode[], SADNESS, org.jext.misc.Workspaces, loadTextAreas[], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.misc.Workspaces, getName[], java.lang.String, null, Jext>
<org.jext.misc.Workspaces$WorkspaceElement, toString[], java.lang.String, org.jext.misc.Workspaces, getName[], java.lang.String, null, currentWorkspace>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, selectWorkspaceOfName[java.lang.String], void, null, model>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.Workspaces, selectWorkspaceOfName[java.lang.String], void, null, name>
<org.jext.misc.Workspaces$WorkspaceElement, getName[], java.lang.String, org.jext.misc.Workspaces, selectWorkspaceOfName[java.lang.String], void, null, get(i))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, selectWorkspaceOfName[java.lang.String], void, getName[], model>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces, selectWorkspaceOfName[java.lang.String], void, null, workspacesList>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, null, model>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, null, name>
<org.jext.misc.Workspaces$WorkspaceElement, getName[], java.lang.String, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, null, get(i))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, getName[], model>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, null, workspacesList>
<org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, org.jext.misc.Workspaces, selectWorkspaceOfNameOrCreate[java.lang.String], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.Workspaces, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.misc.Workspaces, newWorkspace[], void, org.jext.misc.Workspaces, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.Workspaces, removeWorkspace[], void, org.jext.misc.Workspaces, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.event.ListSelectionEvent, getValueIsAdjusting[], boolean, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, e>
<SAD, setBatchMode[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<org.jext.misc.Workspaces$WorkspaceElement, setSelectedIndex[int], void, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, currentWorkspace>
<SAD, getSelectedIndex[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, getSelectedIndex[], parent>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, workspacesList>
<SAD, setBatchMode[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<SAD, getTabbedPane[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<SAD, removeAll[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, pane>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, contents>
<SAD, createFile[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, list>
<SAD, add[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, pane>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, list>
<SAD, setSelectedIndex[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, pane>
<org.jext.misc.Workspaces$WorkspaceElement, getSelectedIndex[], int, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, currentWorkspace>
<SAD, setBatchMode[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<SAD, fireJextEvent[], SADNESS, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, parent>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, SwingUtilities>
<SAD, getTextArea[], SADNESS, java.lang.Object, run[], void, null, parent>
<SAD, grabFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<SAD, requestFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, elname>
<org.jext.misc.Workspaces, createWorkspace[java.lang.String], org.jext.misc.Workspaces.WorkspaceElement, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, elname>
<java.io.File, exists[], boolean, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, new File(fileName)>
<SAD, openForLoading[], SADNESS, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, parent>
<SAD, getLength[], SADNESS, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, area>
<SAD, setCaretPosition[], SADNESS, org.jext.misc.Workspaces.WorkspacesHandler, startElement[java.lang.String], void, null, area>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, endElement[java.lang.String], void, null, elname>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces.WorkspacesHandler, endElement[java.lang.String], void, null, contents>
<SAD, createFile[], SADNESS, org.jext.misc.Workspaces.WorkspacesHandler, endElement[java.lang.String], void, null, parent>
<org.jext.misc.Workspaces$WorkspaceElement, setSelectedIndex[int], void, org.jext.misc.Workspaces.WorkspacesHandler, endElement[java.lang.String], void, null, currentWorkspace>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, Integer>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.misc.Workspaces.WorkspacesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, Integer>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces.WorkspaceElement, setSelectedIndex[int], void, null, contents>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.Workspaces.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, workspacesList>
<javax.swing.JList, locationToIndex[java.awt.Point], int, org.jext.misc.Workspaces.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, workspacesList>
<java.awt.dnd.DropTargetDragEvent, getLocation[], java.awt.Point, org.jext.misc.Workspaces.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getCurrentDataFlavors[], java.awt.datatransfer.DataFlavor[], org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.datatransfer.DataFlavor, isFlavorJavaFileListType[], boolean, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, flavors[i]>
<java.awt.dnd.DropTargetDropEvent, acceptDrop[int], void, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getTransferable[], java.awt.datatransfer.Transferable, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.util.List, iterator[], java.util.Iterator, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, iterator[], transferable>
<java.util.Iterator, hasNext[], boolean, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, iterator>
<SAD, open[], SADNESS, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, parent>
<java.io.File, getPath[], java.lang.String, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, getPath[], iterator>
<java.awt.dnd.DropTargetDropEvent, dropComplete[boolean], void, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<SAD, addJextListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, parent>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, toolbar>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, popup>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, icons"))>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, picture")>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFileM>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFileM>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, setToolTipText[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, getMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, getMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, setMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFile>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, openFileM>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, popup>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, icons"))>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, picture")>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, newFolderM>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, newFolderM>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, setToolTipText[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, newFolder>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, newFolder>
<SAD, setMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, newFolder>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, popup>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, icons"))>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, picture")>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addFileM>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addFileM>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, addActionListener[], toolbar>
<SAD, setToolTipText[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addFile>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addFile>
<SAD, setMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addFile>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, setMaximumSize[], popup>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, icons"))>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, picture")>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addAllFilesM>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addAllFilesM>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, addActionListener[], toolbar>
<SAD, setToolTipText[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addAllFiles>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addAllFiles>
<SAD, setMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, addAllFiles>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, setMaximumSize[], popup>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, icons"))>
<SAD, concat[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, picture")>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteM>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteM>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, toolbar>
<SAD, setToolTipText[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteItem>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteItem>
<SAD, setMaximumSize[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteItem>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteItem>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, deleteM>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, toolbar>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.tree.DefaultTreeCellRenderer, setOpenIcon[javax.swing.Icon], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setLeafIcon[javax.swing.Icon], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setClosedIcon[javax.swing.Icon], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<SAD, getIcon[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Utilities>
<javax.swing.tree.DefaultTreeCellRenderer, setTextSelectionColor[java.awt.Color], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<SAD, parseColor[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, Jext>
<javax.swing.tree.DefaultTreeCellRenderer, setBackgroundSelectionColor[java.awt.Color], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.tree.DefaultTreeCellRenderer, setBorderSelectionColor[java.awt.Color], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, renderer>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JTree, setCellRenderer[javax.swing.tree.TreeCellRenderer], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JTree, setScrollsOnExpand[boolean], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.tree.DefaultTreeSelectionModel, setSelectionMode[int], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, selectionModel>
<javax.swing.JTree, setSelectionModel[javax.swing.tree.TreeSelectionModel], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<org.jext.misc.VirtualFolders, load[], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JTree, clearSelection[], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JTree, setRootVisible[boolean], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JTree, setShowsRootHandles[boolean], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.JTree, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<org.jext.misc.VirtualFolders, fixVisible[], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, nothing here>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, tree>
<javax.swing.tree.DefaultMutableTreeNode, getPath[], javax.swing.tree.TreeNode[], org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, root>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, scroller>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.VirtualFolders, VirtualFolders[org.jext.misc.JextFrame], void, null, nothing here>
<SAD, getWhat[], SADNESS, org.jext.misc.VirtualFolders, jextEventFired[org.jext.misc.JextEvent], void, null, evt>
<org.jext.misc.VirtualFolders, save[], void, org.jext.misc.VirtualFolders, jextEventFired[org.jext.misc.JextEvent], void, null, nothing here>
<SAD, createWhiteSpace[], SADNESS, org.jext.misc.VirtualFolders, getIndentation[int], java.lang.String, null, Utilities>
<org.jext.misc.VirtualFolders, toXML[org.jext.misc.VirtualFolders.VirtualFolderNode, int], java.lang.String, org.jext.misc.VirtualFolders, save[], void, null, nothing here>
<java.lang.String, length[], int, org.jext.misc.VirtualFolders, save[], void, null, xmlString>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.misc.VirtualFolders, save[], void, null, writer>
<java.lang.String, length[], int, org.jext.misc.VirtualFolders, save[], void, null, xmlString>
<java.io.BufferedWriter, flush[], void, org.jext.misc.VirtualFolders, save[], void, null, writer>
<java.io.BufferedWriter, newLine[], void, org.jext.misc.VirtualFolders, save[], void, null, writer>
<java.io.BufferedWriter, close[], void, org.jext.misc.VirtualFolders, save[], void, null, writer>
<java.lang.Throwable, printStackTrace[], void, org.jext.misc.VirtualFolders, save[], void, null, e>
<java.io.File, length[], long, org.jext.misc.VirtualFolders, load[], void, null, vf>
<java.io.File, exists[], boolean, org.jext.misc.VirtualFolders, load[], void, null, vf>
<java.io.File, length[], long, org.jext.misc.VirtualFolders, load[], void, null, vf>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.VirtualFolders, load[], void, null, in>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.VirtualFolders, load[], void, null, xmlString>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.VirtualFolders, load[], void, null, in>
<java.io.BufferedReader, close[], void, org.jext.misc.VirtualFolders, load[], void, null, in>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.VirtualFolders, load[], void, null, xmlString>
<SAD, setHandler[], SADNESS, org.jext.misc.VirtualFolders, load[], void, null, parser>
<SAD, parse[], SADNESS, org.jext.misc.VirtualFolders, load[], void, setHandler[], parser>
<org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders, createFolder[java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, nothing here>
<org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean], org.jext.misc.VirtualFolders.VirtualFolderNode, null, nothing here>
<org.jext.misc.VirtualFolders, folderExists[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], boolean, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, nothing here>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, treeModel>
<javax.swing.tree.DefaultMutableTreeNode, getChildCount[], int, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, parent>
<javax.swing.tree.DefaultMutableTreeNode, getPath[], javax.swing.tree.TreeNode[], org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, node>
<javax.swing.JTree, setSelectionPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, tree>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, tree>
<javax.swing.JTree, collapsePath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, null, tree>
<javax.swing.tree.DefaultMutableTreeNode, children[], java.util.Enumeration, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, parent>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, e>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, getFilePath()>
<org.jext.misc.VirtualFolders$VirtualFolderNode, getFilePath[], java.lang.String, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, equalsIgnoreCase[java.lang.String], nextElement())>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, getFilePath[], e>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, treeModel>
<javax.swing.tree.DefaultMutableTreeNode, getChildCount[], int, org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, null, parent>
<javax.swing.JTree, getSelectionPaths[], javax.swing.tree.TreePath[], org.jext.misc.VirtualFolders, newFolder[], void, null, tree>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, newFolder[], void, null, paths[0]>
<org.jext.misc.VirtualFolders$VirtualFolderNode, isLeaf[], boolean, org.jext.misc.VirtualFolders, newFolder[], void, null, parentNode>
<javax.swing.tree.DefaultMutableTreeNode, isRoot[], boolean, org.jext.misc.VirtualFolders, newFolder[], void, null, parentNode>
<javax.swing.tree.DefaultMutableTreeNode, getParent[], javax.swing.tree.TreeNode, org.jext.misc.VirtualFolders, newFolder[], void, null, parentNode>
<org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, org.jext.misc.VirtualFolders, newFolder[], void, null, nothing here>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, Jext>
<java.lang.String, length[], int, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, response>
<org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, nothing here>
<SAD, message[], SADNESS, org.jext.misc.VirtualFolders, newFolder[org.jext.misc.VirtualFolders.VirtualFolderNode], void, null, GUIUtilities>
<javax.swing.JTree, getSelectionPaths[], javax.swing.tree.TreePath[], org.jext.misc.VirtualFolders, removeItem[], void, null, tree>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, removeItem[], void, null, paths[i]>
<javax.swing.tree.DefaultTreeModel, removeNodeFromParent[javax.swing.tree.MutableTreeNode], void, org.jext.misc.VirtualFolders, removeItem[], void, null, treeModel>
<javax.swing.tree.DefaultMutableTreeNode, getChildCount[], int, org.jext.misc.VirtualFolders, removeItem[], void, null, root>
<javax.swing.tree.DefaultMutableTreeNode, getChildAt[int], javax.swing.tree.TreeNode, org.jext.misc.VirtualFolders, removeItem[], void, null, root>
<javax.swing.JTree, setSelectionPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders, removeItem[], void, null, tree>
<javax.swing.tree.DefaultMutableTreeNode, getPath[], javax.swing.tree.TreeNode[], org.jext.misc.VirtualFolders, removeItem[], void, null, _node_>
<SAD, getNSTextArea[], SADNESS, org.jext.misc.VirtualFolders, addFile[], void, null, parent>
<SAD, isNew[], SADNESS, org.jext.misc.VirtualFolders, addFile[], void, null, textArea>
<org.jext.misc.VirtualFolders, addFile[java.lang.String], void, org.jext.misc.VirtualFolders, addFile[], void, null, nothing here>
<SAD, getCurrentFile[], SADNESS, org.jext.misc.VirtualFolders, addFile[], void, null, textArea>
<javax.swing.JTree, getSelectionPath[], javax.swing.tree.TreePath, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, tree>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, selection>
<org.jext.misc.VirtualFolders$VirtualFolderNode, isLeaf[], boolean, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, node>
<javax.swing.tree.DefaultMutableTreeNode, getParent[], javax.swing.tree.TreeNode, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, node>
<org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, nothing here>
<SAD, message[], SADNESS, org.jext.misc.VirtualFolders, addFile[java.lang.String], void, null, GUIUtilities>
<javax.swing.JTree, getSelectionPath[], javax.swing.tree.TreePath, org.jext.misc.VirtualFolders, addAllFiles[], void, null, tree>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, addAllFiles[], void, null, selection>
<org.jext.misc.VirtualFolders$VirtualFolderNode, isLeaf[], boolean, org.jext.misc.VirtualFolders, addAllFiles[], void, null, node>
<javax.swing.tree.DefaultMutableTreeNode, getParent[], javax.swing.tree.TreeNode, org.jext.misc.VirtualFolders, addAllFiles[], void, null, node>
<SAD, getTextAreas[], SADNESS, org.jext.misc.VirtualFolders, addAllFiles[], void, null, parent>
<SAD, isNew[], SADNESS, org.jext.misc.VirtualFolders, addAllFiles[], void, null, textAreas[i]>
<org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders, addAllFiles[], void, null, nothing here>
<SAD, getCurrentFile[], SADNESS, org.jext.misc.VirtualFolders, addAllFiles[], void, null, textAreas[i]>
<SAD, message[], SADNESS, org.jext.misc.VirtualFolders, addAllFiles[], void, null, GUIUtilities>
<javax.swing.JTree, getSelectionPaths[], javax.swing.tree.TreePath[], org.jext.misc.VirtualFolders, openSelection[boolean], void, null, tree>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, openSelection[boolean], void, null, paths[i]>
<org.jext.misc.VirtualFolders, openNode[org.jext.misc.VirtualFolders.VirtualFolderNode, boolean], void, org.jext.misc.VirtualFolders, openSelection[boolean], void, null, nothing here>
<SAD, getInstances[], SADNESS, org.jext.misc.VirtualFolders, notifyChanges[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.misc.VirtualFolders, notifyChanges[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.VirtualFolders, notifyChanges[], void, null, instances>
<SAD, notify[], SADNESS, org.jext.misc.VirtualFolders, notifyChanges[], void, null, getVirtualFolders()>
<SAD, getVirtualFolders[], SADNESS, org.jext.misc.VirtualFolders, notifyChanges[], void, notify[], instance>
<javax.swing.JTree, setModel[javax.swing.tree.TreeModel], void, org.jext.misc.VirtualFolders, notify[javax.swing.tree.DefaultTreeModel], void, null, tree>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.misc.VirtualFolders, newFolder[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, notifyChanges[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, addFile[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, notifyChanges[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, addAllFiles[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, notifyChanges[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, removeItem[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, notifyChanges[], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.VirtualFolders, openSelection[boolean], void, org.jext.misc.VirtualFolders, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JTree, getSelectionPaths[], javax.swing.tree.TreePath[], org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, tree>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, openFileM>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, openFile>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, deleteM>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, deleteItem>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, paths[i]>
<org.jext.misc.VirtualFolders$VirtualFolderNode, isLeaf[], boolean, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, node>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, openFileM>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, openFile>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, deleteM>
<SAD, setEnabled[], SADNESS, org.jext.misc.VirtualFolders, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, deleteItem>
<java.awt.event.InputEvent, getModifiers[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JPopupMenu, show[java.awt.Component, int, int], void, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, popup>
<java.awt.event.MouseEvent, getX[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<java.awt.event.MouseEvent, getY[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JTree, getPathForLocation[int, int], javax.swing.tree.TreePath, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, tree>
<java.awt.event.MouseEvent, getX[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<java.awt.event.MouseEvent, getY[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JTree, clearSelection[], void, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, tree>
<java.awt.event.MouseEvent, getClickCount[], int, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, e>
<org.jext.misc.VirtualFolders, openSelection[boolean], void, org.jext.misc.VirtualFolders.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, startElement[java.lang.String], void, null, elname>
<org.jext.misc.VirtualFolders, createFolder[java.lang.String, boolean, org.jext.misc.VirtualFolders.VirtualFolderNode], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders.VirtualFoldersHandler, startElement[java.lang.String], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, startElement[java.lang.String], void, null, elname>
<org.jext.misc.VirtualFolders, createLeaf[org.jext.misc.VirtualFolders.VirtualFolderNode, java.lang.String], org.jext.misc.VirtualFolders.VirtualFolderNode, org.jext.misc.VirtualFolders.VirtualFoldersHandler, startElement[java.lang.String], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, endElement[java.lang.String], void, null, elname>
<javax.swing.tree.DefaultMutableTreeNode, getParent[], javax.swing.tree.TreeNode, org.jext.misc.VirtualFolders.VirtualFoldersHandler, endElement[java.lang.String], void, null, parent>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.misc.VirtualFolders.VirtualFoldersHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, lastIndexOf[java.lang.String], int, org.jext.misc.VirtualFolders.VirtualFolderNode, VirtualFolderNode[java.lang.String, boolean], void, null, filePath>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.VirtualFolders.VirtualFolderNode, VirtualFolderNode[java.lang.String, boolean], void, null, filePath>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.misc.VirtualFolders.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.misc.VirtualFolders, openSelection[boolean], void, org.jext.misc.VirtualFolders.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.dnd.DropTargetDragEvent, getLocation[], java.awt.Point, org.jext.misc.VirtualFolders.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, evt>
<javax.swing.JTree, getPathForLocation[int, int], javax.swing.tree.TreePath, org.jext.misc.VirtualFolders.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, tree>
<javax.swing.JTree, setSelectionPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, tree>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, org.jext.misc.VirtualFolders.DnDHandler, dragOver[java.awt.dnd.DropTargetDragEvent], void, null, tree>
<java.awt.dnd.DropTargetDropEvent, getCurrentDataFlavors[], java.awt.datatransfer.DataFlavor[], org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.datatransfer.DataFlavor, isFlavorJavaFileListType[], boolean, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, flavors[i]>
<java.awt.dnd.DropTargetDropEvent, acceptDrop[int], void, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getTransferable[], java.awt.datatransfer.Transferable, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.util.List, iterator[], java.util.Iterator, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, iterator[], transferable>
<java.util.Iterator, hasNext[], boolean, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, iterator>
<org.jext.misc.VirtualFolders, addFile[java.lang.String], void, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, nothing here>
<java.io.File, getPath[], java.lang.String, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, getPath[], iterator>
<java.awt.dnd.DropTargetDropEvent, dropComplete[boolean], void, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, box>
<SAD, isEnabled[], SADNESS, org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, null, JARClassLoader>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.Box, createVerticalBox[], javax.swing.Box, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Box>
<java.util.ArrayList, size[], int, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, _plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, _plugins>
<java.lang.String, lastIndexOf[int], int, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, name>
<java.lang.String, substring[int, int], java.lang.String, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, name>
<java.lang.String, indexOf[java.lang.String], int, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, name>
<org.jext.misc.AboutPlugins, createBox[java.lang.String], org.jext.misc.JextCheckBox, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, boxer>
<org.jext.misc.AboutPlugins$InstalledPlugin, getCheckBox[], javax.swing.JCheckBox, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, plugs[0]>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Jext>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, boxer>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Jext>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, box>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, setPreferredSize[java.awt.Dimension], scrollPane>
<java.awt.FontMetrics, charWidth[char], int, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, box>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, ok>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, add[java.lang.String, java.awt.Component], nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<SAD, centerComponentChild[], SADNESS, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, Utilities>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.AboutPlugins, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.misc.AboutPlugins$InstalledPlugin, save[], void, org.jext.misc.AboutPlugins, actionPerformed[java.awt.event.ActionEvent], void, null, plugs[i]>
<java.awt.Window, dispose[], void, org.jext.misc.AboutPlugins, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, setEnabled[], SADNESS, org.jext.misc.AboutPlugins.InstalledPlugin, save[], void, null, JARClassLoader>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.misc.AboutPlugins.InstalledPlugin, save[], void, null, box>
<java.lang.Thread, start[], void, org.jext.misc.VersionCheck, VersionCheck[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, Jext>
<java.net.URL, openStream[], java.io.InputStream, org.jext.misc.VersionCheck, run[], void, null, url>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.VersionCheck, run[], void, null, in>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.lang.String, trim[], java.lang.String, org.jext.misc.VersionCheck, run[], void, null, substring(8)>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.VersionCheck, run[], void, trim[], line>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.lang.String, trim[], java.lang.String, org.jext.misc.VersionCheck, run[], void, null, substring(6)>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.VersionCheck, run[], void, trim[], line>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.misc.VersionCheck, run[], void, null, in>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.misc.VersionCheck, run[], void, null, buf>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.misc.VersionCheck, run[], void, null, line>
<java.io.BufferedReader, close[], void, org.jext.misc.VersionCheck, run[], void, null, in>
<SAD, compareTo[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, BUILD>
<javax.swing.JEditorPane, setContentType[java.lang.String], void, org.jext.misc.VersionCheck, run[], void, null, textArea>
<javax.swing.JEditorPane, setText[java.lang.String], void, org.jext.misc.VersionCheck, run[], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.misc.VersionCheck, run[], void, null, buf>
<javax.swing.text.JTextComponent, setEditable[boolean], void, org.jext.misc.VersionCheck, run[], void, null, textArea>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.VersionCheck, run[], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.misc.VersionCheck, run[], void, null, pane>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.misc.VersionCheck, run[], void, null, JOptionPane>
<SAD, get[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, getInstances()>
<SAD, getInstances[], SADNESS, org.jext.misc.VersionCheck, run[], void, get[], Jext>
<SAD, getProperty[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, Jext>
<SAD, stopAutoCheck[], SADNESS, org.jext.misc.VersionCheck, run[], void, null, Jext>
<java.net.URL, openConnection[], java.net.URLConnection, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, source>
<java.net.URLConnection, getContentLength[], int, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, conn>
<java.net.URLConnection, getInputStream[], java.io.InputStream, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, conn>
<java.io.File, length[], long, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, tempFile>
<java.io.File, exists[], boolean, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, outFile>
<java.io.File, renameTo[java.io.File], boolean, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, outFile>
<java.io.File, delete[], boolean, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, outFile>
<java.io.File, renameTo[java.io.File], boolean, org.jext.misc.DownloaderThread, work[], java.lang.Object, null, tempFile>
<SAD, run[], SADNESS, org.jext.misc.SwingWorker, finished[], void, null, notifier>
<org.jext.misc.SwingWorker, getValue[], java.lang.Object, org.jext.misc.SwingWorker, finished[], void, null, nothing here>
<org.jext.misc.SwingWorker, getException[], java.lang.Throwable, org.jext.misc.SwingWorker, finished[], void, null, nothing here>
<org.jext.misc.SwingWorker$ThreadVar, get[], java.lang.Thread, org.jext.misc.SwingWorker, interrupt[], void, null, threadVar>
<java.lang.Thread, interrupt[], void, org.jext.misc.SwingWorker, interrupt[], void, null, t>
<org.jext.misc.SwingWorker$ThreadVar, clear[], void, org.jext.misc.SwingWorker, interrupt[], void, null, threadVar>
<org.jext.misc.SwingWorker$ThreadVar, get[], java.lang.Thread, org.jext.misc.SwingWorker, get[], java.lang.Object, null, threadVar>
<org.jext.misc.SwingWorker, getValue[], java.lang.Object, org.jext.misc.SwingWorker, get[], java.lang.Object, null, nothing here>
<java.lang.Thread, join[], void, org.jext.misc.SwingWorker, get[], java.lang.Object, null, t>
<java.lang.Thread, interrupt[], void, org.jext.misc.SwingWorker, get[], java.lang.Object, null, currentThread()>
<java.lang.Thread, currentThread[], java.lang.Thread, org.jext.misc.SwingWorker, get[], java.lang.Object, interrupt[], Thread>
<org.jext.misc.SwingWorker, finished[], void, java.lang.Object, run[], void, null, nothing here>
<org.jext.misc.SwingWorker, setValue[java.lang.Object], void, java.lang.Object, run[], void, null, nothing here>
<org.jext.misc.SwingWorker, work[], java.lang.Object, java.lang.Object, run[], void, null, nothing here>
<org.jext.misc.SwingWorker, setException[java.lang.Throwable], void, java.lang.Object, run[], void, null, nothing here>
<org.jext.misc.SwingWorker$ThreadVar, clear[], void, java.lang.Object, run[], void, null, threadVar>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, java.lang.Object, run[], void, null, SwingUtilities>
<org.jext.misc.SwingWorker$ThreadVar, get[], java.lang.Thread, org.jext.misc.SwingWorker, start[boolean], void, null, threadVar>
<java.lang.Thread, start[], void, org.jext.misc.SwingWorker, start[boolean], void, null, t>
<java.lang.Thread, run[], void, org.jext.misc.SwingWorker, start[boolean], void, null, t>
<SAD, getTextArea[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, Jext>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, label>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, pane>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<javax.swing.JList, setVisibleRowCount[int], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<javax.swing.JList, setSelectionMode[int], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<java.awt.FontMetrics, charWidth[char], int, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, scroll>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, pane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, pane>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, LineBorder>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, getContentPane()>
<javax.swing.JWindow, getContentPane[], java.awt.Container, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, add[java.awt.Component], nothing here>
<java.awt.Window, setBackground[java.awt.Color], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<SAD, requestFocus[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, GUIUtilities>
<java.awt.Window, pack[], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<SAD, getSize[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, parent>
<SAD, getInsets[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<java.awt.Window, setLocation[int, int], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<SAD, lineToY[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<java.awt.FontMetrics, getHeight[], int, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, fm>
<java.awt.FontMetrics, getDescent[], int, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, fm>
<java.awt.Window, setVisible[boolean], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, itemsList>
<SAD, setKeyEventInterceptor[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, parent>
<SAD, addCaretListener[], SADNESS, org.jext.misc.CompleteWordList, CompleteWordList[org.jext.misc.JextFrame, java.lang.String, java.lang.String[]], void, null, textArea>
<org.jext.misc.CompleteWordList, dispose[], void, org.jext.misc.CompleteWordList, caretUpdate[javax.swing.event.CaretEvent], void, null, nothing here>
<SAD, setKeyEventInterceptor[], SADNESS, org.jext.misc.CompleteWordList, dispose[], void, null, parent>
<SAD, removeCaretListener[], SADNESS, org.jext.misc.CompleteWordList, dispose[], void, null, textArea>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.misc.CompleteWordList, dispose[], void, null, SwingUtilities>
<SAD, requestFocus[], SADNESS, java.lang.Object, run[], void, null, textArea>
<java.awt.event.KeyEvent, getKeyChar[], char, org.jext.misc.CompleteWordList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, getModifiers[], int, org.jext.misc.CompleteWordList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, setSelectedText[], SADNESS, org.jext.misc.CompleteWordList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, textArea>
<java.lang.String, valueOf[char], java.lang.String, org.jext.misc.CompleteWordList.KeyHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, setSelectedText[], SADNESS, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, textArea>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getSelectedValue())>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, substring[int], itemsList>
<java.lang.String, length[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, word>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.misc.CompleteWordList, dispose[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<org.jext.misc.CompleteWordList, dispose[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JList, getSelectedIndex[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.ListModel, getSize[], int, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, getModel()>
<javax.swing.JList, getModel[], javax.swing.ListModel, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, getSize[], itemsList>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<javax.swing.JList, ensureIndexIsVisible[int], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, itemsList>
<java.awt.event.InputEvent, consume[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, isActionKey[], boolean, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.misc.CompleteWordList, dispose[], void, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, processKeyEvent[], SADNESS, org.jext.misc.CompleteWordList.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<SAD, setSelectedText[], SADNESS, org.jext.misc.CompleteWordList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<java.lang.String, substring[int], java.lang.String, org.jext.misc.CompleteWordList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, getSelectedValue())>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.misc.CompleteWordList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, substring[int], itemsList>
<java.lang.String, length[], int, org.jext.misc.CompleteWordList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, word>
<org.jext.misc.CompleteWordList, dispose[], void, org.jext.misc.CompleteWordList.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.Box, createVerticalBox[], javax.swing.Box, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Box>
<org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<SAD, getTextAreas[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, parent>
<SAD, isDirty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, textArea>
<SAD, isEmpty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, textArea>
<SAD, getName[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, textArea>
<SAD, setSelected[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, _areas>
<java.awt.Container, remove[int], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, getComponentCount[], int, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.lang.Object, toString[], java.lang.String, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, textAreas[i]>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, label>
<java.awt.Font, deriveFont[int], java.awt.Font, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getFont()>
<java.awt.Component, getFont[], java.awt.Font, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, deriveFont[int], label>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<org.jext.misc.SaveDialog, exit[], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<java.awt.Container, remove[int], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, getComponentCount[], int, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, getComponentCount[], int, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, remove[int], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, getComponentCount[], int, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, boxer>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, _areas>
<org.jext.misc.SaveDialog$DirtyArea, getCheckBox[], javax.swing.JCheckBox, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, areas[0]>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, setPreferredSize[java.awt.Dimension], scrollPane>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, getPreferredSize[], scrollPane>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, box>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, all>
<SAD, charAt[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, none>
<SAD, charAt[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, ok>
<SAD, charAt[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Jext>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, addActionListener[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, all>
<SAD, addActionListener[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, none>
<SAD, addActionListener[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, ok>
<SAD, addActionListener[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, cancel>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, setDefaultButton[javax.swing.JButton], nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<java.awt.Dialog, setResizable[boolean], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, Utilities>
<java.awt.Dialog, setVisible[boolean], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, nothing here>
<SAD, getList[], SADNESS, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], getList[], parent>
<javax.swing.DefaultListModel, size[], int, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, model>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<SAD, getName[], SADNESS, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, get(i))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], getName[], model>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, model>
<java.util.ArrayList, size[], int, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, toArray[], java.lang.Object[], org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<SAD, setBatchMode[], SADNESS, org.jext.misc.SaveDialog, save[], void, null, parent>
<org.jext.misc.SaveDialog$DirtyArea, getTextArea[], org.jext.misc.JextTextArea, org.jext.misc.SaveDialog, save[], void, null, dirty>
<org.jext.misc.SaveDialog$DirtyArea, isSelected[], boolean, org.jext.misc.SaveDialog, save[], void, null, dirty>
<SAD, saveContent[], SADNESS, org.jext.misc.SaveDialog, save[], void, null, textArea>
<SAD, close[], SADNESS, org.jext.misc.SaveDialog, save[], void, null, parent>
<SAD, setBatchMode[], SADNESS, org.jext.misc.SaveDialog, save[], void, null, parent>
<org.jext.misc.SaveDialog, exit[], void, org.jext.misc.SaveDialog, save[], void, null, nothing here>
<SAD, save[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.misc.SaveDialog, exit[], void, save[], parent>
<SAD, closeWindow[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, Jext>
<SAD, setBatchMode[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, parent>
<SAD, getTextAreas[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, parent>
<SAD, close[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, parent>
<SAD, setBatchMode[], SADNESS, org.jext.misc.SaveDialog, exit[], void, null, parent>
<java.awt.Window, dispose[], void, org.jext.misc.SaveDialog, exit[], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.misc.SaveDialog, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.misc.SaveDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.SaveDialog, save[], void, org.jext.misc.SaveDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.misc.SaveDialog$DirtyArea, setSelected[boolean], void, org.jext.misc.SaveDialog, actionPerformed[java.awt.event.ActionEvent], void, null, areas[i]>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.misc.SaveDialog.WorkspaceLabel, paintComponent[java.awt.Graphics], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.misc.SaveDialog.WorkspaceLabel, paintComponent[java.awt.Graphics], void, null, g>
<javax.swing.JComponent, getHeight[], int, org.jext.misc.SaveDialog.WorkspaceLabel, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getWidth[], int, org.jext.misc.SaveDialog.WorkspaceLabel, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getHeight[], int, org.jext.misc.SaveDialog.WorkspaceLabel, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.misc.SaveDialog.DirtyArea, isSelected[], boolean, null, box>
<javax.swing.AbstractButton, setSelected[boolean], void, org.jext.misc.SaveDialog.DirtyArea, setSelected[boolean], void, null, box>
<SAD, addComponent[], SADNESS, org.jext.options.SecurityOptions, SecurityOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.SecurityOptions, SecurityOptions[], void, null, Jext>
<org.jext.options.SecurityOptions, load[], void, org.jext.options.SecurityOptions, SecurityOptions[], void, null, nothing here>
<SAD, setSelected[], SADNESS, org.jext.options.SecurityOptions, load[], void, null, enableServer>
<SAD, isServerEnabled[], SADNESS, org.jext.options.SecurityOptions, load[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.SecurityOptions, save[], void, null, enableServer>
<SAD, isServerEnabled[], SADNESS, org.jext.options.SecurityOptions, save[], void, null, Jext>
<java.lang.Boolean, toString[boolean], java.lang.String, org.jext.options.SecurityOptions, save[], void, null, Boolean>
<SAD, isSelected[], SADNESS, org.jext.options.SecurityOptions, save[], void, null, enableServer>
<java.io.Writer, write[java.lang.String], void, org.jext.options.SecurityOptions, save[], void, null, writer>
<java.io.Writer, close[], void, org.jext.options.SecurityOptions, save[], void, null, writer>
<SAD, setServerEnabled[], SADNESS, org.jext.options.SecurityOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.SecurityOptions, save[], void, null, enableServer>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, setReorderingAllowed[boolean], nothing here>
<javax.swing.ListSelectionModel, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, null, getSelectionModel()>
<javax.swing.JTable, getSelectionModel[], javax.swing.ListSelectionModel, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, addListSelectionListener[javax.swing.event.ListSelectionListener], nothing here>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, null, getColumn(1)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, getColumn[int], nothing here>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, null, getColumn(0)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.StyleTable, StyleTable[org.jext.options.StyleTable.StyleTableModel], void, getColumn[int], nothing here>
<javax.swing.event.ListSelectionEvent, getValueIsAdjusting[], boolean, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, evt>
<org.jext.options.StyleTable$StyleEditor, getStyle[], org.jext.options.SyntaxStyle, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, getValueAt(getSelectedRow(),1))>
<javax.swing.table.TableModel, getValueAt[int, int], java.lang.Object, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, getStyle[], dataModel>
<javax.swing.JTable, getSelectedRow[], int, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<javax.swing.table.TableModel, setValueAt[java.lang.Object, int, int], void, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, dataModel>
<javax.swing.JTable, getSelectedRow[], int, org.jext.options.StyleTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<java.util.Set, iterator[], java.util.Iterator, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, entrySet()>
<java.util.Map, entrySet[], java.util.Set, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, iterator[], choices>
<java.util.Iterator, hasNext[], boolean, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, it>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, it>
<org.jext.options.StyleTable$StyleTableModel, addStyleChoice[java.lang.String, java.lang.String], void, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, String>
<java.util.Map$Entry, getKey[], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, entry>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, String>
<java.util.Map$Entry, getValue[], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, entry>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, getRowCount[], int, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, getValueAt[int, int], java.lang.Object, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, setValueAt[java.lang.Object, int, int], void, null, styleChoices>
<javax.swing.table.AbstractTableModel, fireTableRowsUpdated[int, int], void, org.jext.options.StyleTable.StyleTableModel, setValueAt[java.lang.Object, int, int], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel, getColumnName[int], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel, getColumnName[int], java.lang.String, null, Jext>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, save[], void, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, save[], void, null, styleChoices>
<SAD, setProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel, save[], void, null, Jext>
<SAD, getStyleString[], SADNESS, org.jext.options.StyleTable.StyleTableModel, save[], void, null, GUIUtilities>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, load[], void, null, styleChoices>
<org.jext.options.StyleTable$StyleTableModel$StyleChoice, resetStyle[], void, org.jext.options.StyleTable.StyleTableModel, load[], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, load[], void, resetStyle[], styleChoices>
<javax.swing.table.AbstractTableModel, fireTableRowsUpdated[int, int], void, org.jext.options.StyleTable.StyleTableModel, load[], void, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, load[], void, null, styleChoices>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.StyleTable.StyleTableModel, addStyleChoice[java.lang.String, java.lang.String], void, null, styleChoices>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel, addStyleChoice[java.lang.String, java.lang.String], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleChoice, StyleChoice[java.lang.String, java.lang.String], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleChoice, StyleChoice[java.lang.String, java.lang.String], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleChoice, resetStyle[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleChoice, resetStyle[], void, null, Jext>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, StyleRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, StyleRenderer[], void, null, nothing here>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, StyleRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JTable, getSelectionBackground[], java.awt.Color, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JTable, getSelectionForeground[], java.awt.Color, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getForeground[], java.awt.Color, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<SAD, getColor[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, style>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<SAD, getStyledFont[], SADNESS, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, style>
<java.awt.Component, getFont[], java.awt.Font, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.UIManager, getBorder[java.lang.Object], javax.swing.border.Border, org.jext.options.StyleTable.StyleTableModel.StyleRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, UIManager>
<javax.swing.JOptionPane, getFrameForComponent[java.awt.Component], java.awt.Frame, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, setSelected[], italics>
<SAD, isItalic[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, style>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, setSelected[], bold>
<SAD, isBold[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, style>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, color>
<SAD, getColor[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, style>
<javax.swing.JComponent, setRequestFocusEnabled[boolean], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, color>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, color>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, add[java.lang.String, java.awt.Component], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, setDefaultButton[javax.swing.JButton], nothing here>
<SAD, addActionListener[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, ok>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, cancel>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, add[java.lang.String, java.awt.Component], nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, Utilities>
<java.awt.Dialog, show[], void, org.jext.options.StyleTable.StyleEditor, StyleEditor[java.awt.Component, org.jext.options.SyntaxStyle], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Window, dispose[], void, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JColorChooser, showDialog[java.awt.Component, java.lang.String, java.awt.Color], java.awt.Color, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, JColorChooser>
<SAD, getProperty[], SADNESS, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, color>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.StyleTable.StyleEditor, actionPerformed[java.awt.event.ActionEvent], void, null, color>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.options.StyleTable.StyleEditor, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.options.StyleTable.StyleEditor, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, org.jext.options.StyleTable.StyleEditor, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.options.StyleTable.StyleEditor, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, org.jext.options.StyleTable.StyleEditor, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.options.StyleTable.StyleEditor, getStyle[], org.jext.options.SyntaxStyle, null, color>
<SAD, isSelected[], SADNESS, org.jext.options.StyleTable.StyleEditor, getStyle[], org.jext.options.SyntaxStyle, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.StyleTable.StyleEditor, getStyle[], org.jext.options.SyntaxStyle, isSelected[], italics>
<SAD, isSelected[], SADNESS, org.jext.options.StyleTable.StyleEditor, getStyle[], org.jext.options.SyntaxStyle, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.StyleTable.StyleEditor, getStyle[], org.jext.options.SyntaxStyle, isSelected[], bold>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.GutterOptions, GutterOptions[], void, null, numberAlignment>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<org.jext.options.GutterOptions, load[], void, org.jext.options.GutterOptions, GutterOptions[], void, null, nothing here>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GutterOptions, load[], void, null, gutterWidth>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GutterOptions, load[], void, null, gutterBorderWidth>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GutterOptions, load[], void, null, highlightInterval>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.GutterOptions, load[], void, null, "right">
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.GutterOptions, load[], void, null, numberAlignment>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.GutterOptions, load[], void, null, "center">
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.GutterOptions, load[], void, null, numberAlignment>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.GutterOptions, load[], void, null, numberAlignment>
<SAD, setSelected[], SADNESS, org.jext.options.GutterOptions, load[], void, null, gutterExpanded>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.GutterOptions, load[], void, null, "yes">
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GutterOptions, load[], void, null, lineNumbersEnabled>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.GutterOptions, load[], void, null, "no">
<SAD, getProperty[], SADNESS, org.jext.options.GutterOptions, load[], void, null, Jext>
<SAD, load[], SADNESS, org.jext.options.GutterOptions, load[], void, null, font>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GutterOptions, save[], void, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.GutterOptions, save[], void, isSelected[], gutterExpanded>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GutterOptions, save[], void, null, getModel()>
<SAD, getModel[], SADNESS, org.jext.options.GutterOptions, save[], void, isSelected[], lineNumbersEnabled>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GutterOptions, save[], void, null, gutterWidth>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GutterOptions, save[], void, null, gutterBorderWidth>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GutterOptions, save[], void, null, highlightInterval>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.GutterOptions, save[], void, null, numberAlignment>
<SAD, setProperty[], SADNESS, org.jext.options.GutterOptions, save[], void, null, Jext>
<SAD, save[], SADNESS, org.jext.options.GutterOptions, save[], void, null, font>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, setReorderingAllowed[boolean], nothing here>
<javax.swing.ListSelectionModel, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, null, getSelectionModel()>
<javax.swing.JTable, getSelectionModel[], javax.swing.ListSelectionModel, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, addListSelectionListener[javax.swing.event.ListSelectionListener], nothing here>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, null, getColumn(1)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, getColumn[int], nothing here>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, null, getColumn(0)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.ColorTable, ColorTable[org.jext.options.ColorTable.ColorTableModel], void, getColumn[int], nothing here>
<javax.swing.event.ListSelectionEvent, getValueIsAdjusting[], boolean, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, evt>
<javax.swing.JColorChooser, showDialog[java.awt.Component, java.lang.String, java.awt.Color], java.awt.Color, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, JColorChooser>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, Jext>
<javax.swing.table.TableModel, getValueAt[int, int], java.lang.Object, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, dataModel>
<javax.swing.JTable, getSelectedRow[], int, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<javax.swing.table.TableModel, setValueAt[java.lang.Object, int, int], void, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, dataModel>
<javax.swing.JTable, getSelectedRow[], int, org.jext.options.ColorTable.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<java.util.Set, iterator[], java.util.Iterator, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, entrySet()>
<java.util.Map, entrySet[], java.util.Set, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, iterator[], choices>
<java.util.Iterator, hasNext[], boolean, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, it>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, it>
<org.jext.options.ColorTable$ColorTableModel, addColorChoice[java.lang.String, java.lang.String], void, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, String>
<java.util.Map$Entry, getKey[], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, entry>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, String>
<java.util.Map$Entry, getValue[], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, entry>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, getRowCount[], int, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, getValueAt[int, int], java.lang.Object, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, setValueAt[java.lang.Object, int, int], void, null, colorChoices>
<javax.swing.table.AbstractTableModel, fireTableRowsUpdated[int, int], void, org.jext.options.ColorTable.ColorTableModel, setValueAt[java.lang.Object, int, int], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel, getColumnName[int], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel, getColumnName[int], java.lang.String, null, Jext>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, save[], void, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, save[], void, null, colorChoices>
<SAD, setProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel, save[], void, null, Jext>
<SAD, getColorHexString[], SADNESS, org.jext.options.ColorTable.ColorTableModel, save[], void, null, GUIUtilities>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, load[], void, null, colorChoices>
<org.jext.options.ColorTable$ColorTableModel$ColorChoice, resetColor[], void, org.jext.options.ColorTable.ColorTableModel, load[], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, load[], void, resetColor[], colorChoices>
<javax.swing.table.AbstractTableModel, fireTableRowsUpdated[int, int], void, org.jext.options.ColorTable.ColorTableModel, load[], void, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, load[], void, null, colorChoices>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.ColorTable.ColorTableModel, addColorChoice[java.lang.String, java.lang.String], void, null, colorChoices>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel, addColorChoice[java.lang.String, java.lang.String], void, null, Jext>
<SAD, parseColor[], SADNESS, org.jext.options.ColorTable.ColorTableModel.ColorChoice, ColorChoice[java.lang.String, java.lang.String], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel.ColorChoice, ColorChoice[java.lang.String, java.lang.String], void, null, Jext>
<SAD, parseColor[], SADNESS, org.jext.options.ColorTable.ColorTableModel.ColorChoice, resetColor[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.options.ColorTable.ColorTableModel.ColorChoice, resetColor[], void, null, Jext>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, ColorRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, ColorRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JTable, getSelectionBackground[], java.awt.Color, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JTable, getSelectionForeground[], java.awt.Color, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getForeground[], java.awt.Color, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<javax.swing.UIManager, getBorder[java.lang.Object], javax.swing.border.Border, org.jext.options.ColorTable.ColorTableModel.ColorRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, UIManager>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, syntax>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, pageLayout>
<SAD, add[], SADNESS, org.jext.options.PrintOptions, PrintOptions[], void, null, this>
<org.jext.options.PrintOptions, load[], void, org.jext.options.PrintOptions, PrintOptions[], void, null, nothing here>
<SAD, load[], SADNESS, org.jext.options.PrintOptions, load[], void, null, fonts>
<SAD, setSelected[], SADNESS, org.jext.options.PrintOptions, load[], void, null, lineNumbers>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.PrintOptions, load[], void, null, wrap>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.PrintOptions, load[], void, null, header>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.PrintOptions, load[], void, null, footer>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.PrintOptions, load[], void, null, syntax>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.awt.print.PageFormat, getPaper[], java.awt.print.Paper, org.jext.options.PrintOptions, load[], void, null, pgfmt>
<java.awt.print.PageFormat, setOrientation[int], void, org.jext.options.PrintOptions, load[], void, null, pgfmt>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.options.PrintOptions, load[], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.lang.Double, parseDouble[java.lang.String], double, org.jext.options.PrintOptions, load[], void, null, Double>
<SAD, getProperty[], SADNESS, org.jext.options.PrintOptions, load[], void, null, Jext>
<java.awt.print.Paper, setSize[double, double], void, org.jext.options.PrintOptions, load[], void, null, paper>
<java.awt.print.Paper, setImageableArea[double, double, double, double], void, org.jext.options.PrintOptions, load[], void, null, paper>
<java.awt.print.PageFormat, setPaper[java.awt.print.Paper], void, org.jext.options.PrintOptions, load[], void, null, pgfmt>
<org.jext.options.PrintOptions, handleComponents[], void, org.jext.options.PrintOptions, load[], void, null, nothing here>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, syntax>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, footer>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, pageLayout>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, wrap>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, footer>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, pageLayout>
<SAD, setEnabled[], SADNESS, org.jext.options.PrintOptions, handleComponents[], void, null, wrap>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, save[], void, null, lineNumbers>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, save[], void, null, wrap>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, save[], void, null, header>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, save[], void, null, footer>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.PrintOptions, save[], void, null, syntax>
<java.awt.print.PageFormat, getPaper[], java.awt.print.Paper, org.jext.options.PrintOptions, save[], void, null, pgfmt>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Integer, toString[int], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Integer>
<java.awt.print.PageFormat, getOrientation[], int, org.jext.options.PrintOptions, save[], void, null, pgfmt>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getWidth[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getHeight[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getImageableX[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getImageableY[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getImageableWidth[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, setProperty[], SADNESS, org.jext.options.PrintOptions, save[], void, null, Jext>
<java.lang.Double, toString[double], java.lang.String, org.jext.options.PrintOptions, save[], void, null, Double>
<java.awt.print.Paper, getImageableHeight[], double, org.jext.options.PrintOptions, save[], void, null, paper>
<SAD, save[], SADNESS, org.jext.options.PrintOptions, save[], void, null, fonts>
<java.awt.print.PrinterJob, getPrinterJob[], java.awt.print.PrinterJob, org.jext.options.PrintOptions, pageLayout[], void, null, PrinterJob>
<java.awt.print.PrinterJob, pageDialog[java.awt.print.PageFormat], java.awt.print.PageFormat, org.jext.options.PrintOptions, pageLayout[], void, null, job>
<java.awt.print.PrinterJob, validatePage[java.awt.print.PageFormat], java.awt.print.PageFormat, org.jext.options.PrintOptions, pageLayout[], void, null, job>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.options.PrintOptions, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.options.PrintOptions, pageLayout[], void, org.jext.options.PrintOptions, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.options.PrintOptions, handleComponents[], void, org.jext.options.PrintOptions, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, prompt>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, promptPattern>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, maxRecent>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, saveDelay>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, templatesDir>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, scrollableTabbedPanes>
<SAD, charAt[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, JDK_VERSION>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, GeneralOptions[], void, null, Jext>
<org.jext.options.GeneralOptions, load[], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, nothing here>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, org.jext.options.GeneralOptions, GeneralOptions[], void, null, prompt>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GeneralOptions, load[], void, null, promptPattern>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.GeneralOptions, load[], void, null, prompt>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.GeneralOptions, load[], void, null, promptTxt>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.GeneralOptions, load[], void, null, prompt>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GeneralOptions, load[], void, null, maxRecent>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GeneralOptions, load[], void, null, saveDelay>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GeneralOptions, load[], void, null, templatesDir>
<SAD, getProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, newWindow>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, jythonMode>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, scriptingDebug>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, autoSave>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, saveSession>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, check>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, console>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, fullFileName>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, tips>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, scrollableTabbedPanes>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, leftPanel>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, topPanel>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.GeneralOptions, load[], void, null, Jext>
<SAD, getPreferredSize[], SADNESS, org.jext.options.GeneralOptions, getComponent[], java.awt.Component, null, this>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.GeneralOptions, getComponent[], java.awt.Component, null, scroller>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.options.GeneralOptions, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.GeneralOptions, actionPerformed[java.awt.event.ActionEvent], void, null, prompt>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.GeneralOptions, actionPerformed[java.awt.event.ActionEvent], void, null, promptPattern>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GeneralOptions, save[], void, null, maxRecent>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GeneralOptions, save[], void, null, templatesDir>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, check>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, tips>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GeneralOptions, save[], void, null, promptPattern>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<java.lang.String, length[], int, org.jext.options.GeneralOptions, save[], void, null, _prompt>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, console>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, jythonMode>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, fullFileName>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, autoSave>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.GeneralOptions, save[], void, null, saveDelay>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, saveSession>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, scriptingDebug>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, leftPanel>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, topPanel>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, newWindow>
<SAD, setProperty[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.GeneralOptions, save[], void, null, scrollableTabbedPanes>
<SAD, addComponent[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.LoadingOptions, LoadingOptions[], void, null, Jext>
<org.jext.options.LoadingOptions, load[], void, org.jext.options.LoadingOptions, LoadingOptions[], void, null, nothing here>
<SAD, setSelected[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, loadClasses>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, xtreeEnabled>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, consoleEnabled>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, keepInMemory>
<SAD, isDefaultKeepInMemory[], SADNESS, org.jext.options.LoadingOptions, load[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, loadClasses>
<SAD, setProperty[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, xtreeEnabled>
<SAD, setProperty[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, consoleEnabled>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, keepInMemory>
<SAD, isDefaultKeepInMemory[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, Jext>
<java.io.Writer, write[char[]], void, org.jext.options.LoadingOptions, save[], void, null, writer>
<java.lang.Boolean, toString[boolean], java.lang.String, org.jext.options.LoadingOptions, save[], void, null, Boolean>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, keepInMemory>
<java.io.Writer, close[], void, org.jext.options.LoadingOptions, save[], void, null, writer>
<SAD, setDefaultKeepInMemory[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, keepInMemory>
<SAD, size[], SADNESS, org.jext.options.LoadingOptions, save[], void, null, modes>
<SAD, setLayout[], SADNESS, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, pane>
<org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, nothing here>
<SAD, add[], SADNESS, org.jext.options.FileFiltersOptions, FileFiltersOptions[], void, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions, save[], void, null, filters>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions, save[], void, null, filters>
<SAD, setProperty[], SADNESS, org.jext.options.FileFiltersOptions, save[], void, null, Jext>
<org.jext.options.FileFiltersOptions$FileFilter, getMode[], java.lang.String, org.jext.options.FileFiltersOptions, save[], void, null, filter>
<org.jext.options.FileFiltersOptions$FileFilter, getFilter[], java.lang.String, org.jext.options.FileFiltersOptions, save[], void, null, filter>
<org.jext.options.FileFiltersOptions$FiltersTableModel, reload[], void, org.jext.options.FileFiltersOptions, load[], void, null, theTableModel>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, setReorderingAllowed[boolean], filtersTable>
<javax.swing.JTable, setCellSelectionEnabled[boolean], void, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, null, filtersTable>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, null, getColumn(0)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, getColumn[int], filtersTable>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, null, filtersTable>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.FileFiltersOptions, createTableScroller[], javax.swing.JScrollPane, null, scroller>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, modes>
<SAD, getModeName[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, name>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, filters>
<SAD, getUserModeName[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, mode>
<SAD, getProperty[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, modes>
<SAD, getModeName[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, get(row))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, getModeName[], modes>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, name>
<org.jext.options.FileFiltersOptions$FileFilter, setFilter[java.lang.String], void, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, get(row - displacement))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, setFilter[java.lang.String], filters>
<SAD, getProperty[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, getRowCount[], int, null, filters>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, getValueAt[int, int], java.lang.Object, null, filters>
<org.jext.options.FileFiltersOptions$FileFilter, getName[], java.lang.String, org.jext.options.FileFiltersOptions.FiltersTableModel, getValueAt[int, int], java.lang.Object, null, _filter>
<org.jext.options.FileFiltersOptions$FileFilter, getFilter[], java.lang.String, org.jext.options.FileFiltersOptions.FiltersTableModel, getValueAt[int, int], java.lang.Object, null, _filter>
<SAD, getProperty[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, getColumnName[int], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.FileFiltersOptions.FiltersTableModel, getColumnName[int], java.lang.String, null, Jext>
<org.jext.options.FileFiltersOptions$FileFilter, setFilter[java.lang.String], void, org.jext.options.FileFiltersOptions.FiltersTableModel, setValueAt[java.lang.Object, int, int], void, null, get(row))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, setValueAt[java.lang.Object, int, int], void, setFilter[java.lang.String], filters>
<SAD, getSkinList[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, SkinManager>
<java.util.HashMap, size[], int, org.jext.options.UIOptions, UIOptions[], void, null, skinList>
<java.util.HashMap, size[], int, org.jext.options.UIOptions, UIOptions[], void, null, skinList>
<java.util.Collection, iterator[], java.util.Iterator, org.jext.options.UIOptions, UIOptions[], void, null, values()>
<java.util.HashMap, values[], java.util.Collection, org.jext.options.UIOptions, UIOptions[], void, iterator[], skinList>
<java.util.Iterator, hasNext[], boolean, org.jext.options.UIOptions, UIOptions[], void, null, i>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.UIOptions, UIOptions[], void, null, i>
<SAD, getSkinInternName[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, currSkin>
<SAD, getSkinName[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, currSkin>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.options.UIOptions, UIOptions[], void, null, Arrays>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.options.UIOptions, UIOptions[], void, null, Arrays>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.UIOptions, UIOptions[], void, null, skins>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, decoratedFrames>
<SAD, charAt[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, JDK_VERSION>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, Jext>
<org.jext.options.UIOptions, control[boolean], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, addActionListener[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, flatMenus>
<SAD, addActionListener[], SADNESS, org.jext.options.UIOptions, UIOptions[], void, null, showToolbar>
<org.jext.options.UIOptions, load[], void, org.jext.options.UIOptions, UIOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.UIOptions, load[], void, null, size>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.UIOptions, load[], void, null, icons>
<SAD, getProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.UIOptions, load[], void, null, skin>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.UIOptions, load[], void, null, skins>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, decoratedFrames>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, flatMenus>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, toolbarRollover>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, buttonsHighlight>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, labeledSeparator>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, showToolbar>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.UIOptions, load[], void, null, gray>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.UIOptions, load[], void, null, Jext>
<org.jext.options.UIOptions, control[boolean], void, org.jext.options.UIOptions, load[], void, null, nothing here>
<SAD, getPreferredSize[], SADNESS, org.jext.options.UIOptions, getComponent[], java.awt.Component, null, this>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.UIOptions, getComponent[], java.awt.Component, null, scroller>
<SAD, setEnabled[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, labeledSeparator>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, flatMenus>
<SAD, setEnabled[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, gray>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, showToolbar>
<SAD, setEnabled[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, toolbarRollover>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, control[boolean], void, null, showToolbar>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, decoratedFrames>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, showToolbar>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isEnabled[], SADNESS, org.jext.options.UIOptions, save[], void, null, gray>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, gray>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isEnabled[], SADNESS, org.jext.options.UIOptions, save[], void, null, labeledSeparator>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, labeledSeparator>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, flatMenus>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isEnabled[], SADNESS, org.jext.options.UIOptions, save[], void, null, buttonsHighlight>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, buttonsHighlight>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, isEnabled[], SADNESS, org.jext.options.UIOptions, save[], void, null, toolbarRollover>
<SAD, isSelected[], SADNESS, org.jext.options.UIOptions, save[], void, null, toolbarRollover>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.UIOptions, save[], void, null, icons>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.UIOptions, save[], void, null, skins>
<SAD, setProperty[], SADNESS, org.jext.options.UIOptions, save[], void, null, Jext>
<SAD, applySelectedSkin[], SADNESS, org.jext.options.UIOptions, save[], void, null, SkinManager>
<org.jext.options.UIOptions, updateUIs[], void, org.jext.options.UIOptions, save[], void, null, nothing here>
<javax.swing.SwingUtilities, updateComponentTreeUI[java.awt.Component], void, org.jext.options.UIOptions, updateUIs[], void, null, SwingUtilities>
<SAD, getInstance[], SADNESS, org.jext.options.UIOptions, updateUIs[], void, null, OptionsDialog>
<SAD, pack[], SADNESS, org.jext.options.UIOptions, updateUIs[], void, null, getInstance()>
<SAD, getInstance[], SADNESS, org.jext.options.UIOptions, updateUIs[], void, pack[], OptionsDialog>
<SAD, getInstances[], SADNESS, org.jext.options.UIOptions, updateUIs[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.options.UIOptions, updateUIs[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.UIOptions, updateUIs[], void, null, instances>
<javax.swing.SwingUtilities, updateComponentTreeUI[java.awt.Component], void, org.jext.options.UIOptions, updateUIs[], void, null, SwingUtilities>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.UIOptions.SkinItem, equals[java.lang.Object], boolean, null, skinName>
<java.lang.String, compareTo[java.lang.String], int, org.jext.options.UIOptions.SkinItem, compareTo[java.lang.Object], int, null, skinName>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.EditorOptions, EditorOptions[], void, null, autoScroll>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.EditorOptions, EditorOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.EditorOptions, EditorOptions[], void, null, linesInterval>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.EditorOptions, EditorOptions[], void, null, Cursor>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.options.EditorOptions, EditorOptions[], void, null, wrapGuide>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.options.EditorOptions, EditorOptions[], void, null, Cursor>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.EditorOptions, EditorOptions[], void, null, encoding>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.options.EditorOptions, EditorOptions[], void, null, encoding>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.options.EditorOptions, EditorOptions[], void, null, tabSize>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.EditorOptions, EditorOptions[], void, null, tabSize>
<SAD, size[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, modes>
<SAD, get[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, modes>
<SAD, getModeName[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, syntaxMode>
<SAD, getUserModeName[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, syntaxMode>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.EditorOptions, EditorOptions[], void, null, modes>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.EditorOptions, EditorOptions[], void, null, newline>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.options.EditorOptions, EditorOptions[], void, null, orientation>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<SAD, addComponent[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, EditorOptions[], void, null, Jext>
<org.jext.options.EditorOptions, load[], void, org.jext.options.EditorOptions, EditorOptions[], void, null, nothing here>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.EditorOptions, load[], void, null, autoScroll>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.EditorOptions, load[], void, null, linesInterval>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.options.EditorOptions, load[], void, null, wrapGuide>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.options.EditorOptions, load[], void, null, encoding>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.options.EditorOptions, load[], void, null, System>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.options.EditorOptions, load[], void, null, tabSize>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.EditorOptions, load[], void, null, currMode>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.EditorOptions, load[], void, null, modes>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, equals[], SADNESS, org.jext.options.EditorOptions, load[], void, null, NEW_LINE[i]>
<javax.swing.JComboBox, setSelectedIndex[int], void, org.jext.options.EditorOptions, load[], void, null, newline>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.options.EditorOptions, load[], void, null, orientation>
<SAD, getProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, linesIntervalEnabled>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, wrapGuideEnabled>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, splitArea>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, blockCaret>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, blinkCaret>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, lineHighlight>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, eolMarkers>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, tabIndent>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, enterIndent>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, softTabs>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, tabStop>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, smartHomeEnd>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, dirDefaultDialog>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, selection>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, overSpace>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, addExtraLineFeed>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.options.EditorOptions, load[], void, null, preserveLineTerm>
<SAD, getBooleanProperty[], SADNESS, org.jext.options.EditorOptions, load[], void, null, Jext>
<SAD, load[], SADNESS, org.jext.options.EditorOptions, load[], void, null, fonts>
<SAD, getPreferredSize[], SADNESS, org.jext.options.EditorOptions, getComponent[], java.awt.Component, null, this>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.EditorOptions, getComponent[], java.awt.Component, null, scroller>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.EditorOptions, save[], void, null, modes>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, tabIndent>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, enterIndent>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, softTabs>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, tabStop>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.options.EditorOptions, save[], void, null, tabSize>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.options.EditorOptions, save[], void, null, encoding>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, blockCaret>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, blinkCaret>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, lineHighlight>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.options.EditorOptions, save[], void, null, newline>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, eolMarkers>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, smartHomeEnd>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, dirDefaultDialog>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, splitArea>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.EditorOptions, save[], void, null, autoScroll>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.EditorOptions, save[], void, null, linesInterval>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, linesIntervalEnabled>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.options.EditorOptions, save[], void, null, wrapGuide>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, wrapGuideEnabled>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.options.EditorOptions, save[], void, null, orientation>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, selection>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, overSpace>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, addExtraLineFeed>
<SAD, setProperty[], SADNESS, org.jext.options.EditorOptions, save[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.options.EditorOptions, save[], void, null, preserveLineTerm>
<SAD, save[], SADNESS, org.jext.options.EditorOptions, save[], void, null, fonts>
<SAD, size[], SADNESS, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, menuItemsActions>
<SAD, keys[], SADNESS, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, menuItemsActions>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, e>
<java.lang.Object, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, nextElement()>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, toString[], e>
<java.lang.Object, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, get(actions[i])>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, toString[], h>
<org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[]], void, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, nothing here>
<SAD, setLayout[], SADNESS, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, pane>
<org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, nothing here>
<SAD, add[], SADNESS, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, null, nothing here>
<org.jext.options.KeyShortcutsOptions$KeysTableModel, load[], void, org.jext.options.KeyShortcutsOptions, load[], void, null, theTableModel>
<java.lang.String, length[], int, org.jext.options.KeyShortcutsOptions, save[], void, null, key>
<SAD, setProperty[], SADNESS, org.jext.options.KeyShortcutsOptions, save[], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.options.KeyShortcutsOptions, save[], void, null, toString()>
<java.lang.String, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions, save[], void, concat[java.lang.String], actions[i]>
<javax.swing.table.JTableHeader, setReorderingAllowed[boolean], void, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, null, getTableHeader()>
<javax.swing.JTable, getTableHeader[], javax.swing.table.JTableHeader, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, setReorderingAllowed[boolean], table>
<javax.swing.JTable, setCellSelectionEnabled[boolean], void, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, null, table>
<javax.swing.table.TableColumn, setCellRenderer[javax.swing.table.TableCellRenderer], void, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, null, getColumn(0)>
<javax.swing.table.TableColumnModel, getColumn[int], javax.swing.table.TableColumn, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, setCellRenderer[javax.swing.table.TableCellRenderer], getColumnModel()>
<javax.swing.JTable, getColumnModel[], javax.swing.table.TableColumnModel, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, getColumn[int], table>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, null, table>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.KeyShortcutsOptions, createTableScroller[], javax.swing.JScrollPane, null, scroller>
<org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[]], void, null, nothing here>
<java.lang.String, compareTo[java.lang.String], int, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, a[lo]>
<java.lang.String, compareTo[java.lang.String], int, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, a[hi]>
<org.jext.options.KeyShortcutsOptions, swap[java.lang.String[], int, int], void, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, nothing here>
<org.jext.options.KeyShortcutsOptions, swap[java.lang.String[], int, int], void, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, nothing here>
<org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, nothing here>
<org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, org.jext.options.KeyShortcutsOptions, sortStrings[java.lang.String[], java.lang.String[], int, int], void, null, nothing here>
<org.jext.options.KeyShortcutsOptions$KeysTableModel, load[], void, org.jext.options.KeyShortcutsOptions.KeysTableModel, KeysTableModel[], void, null, nothing here>
<java.lang.String, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, load[], void, null, actions[i]>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, load[], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, load[], void, null, key>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, getColumnName[int], java.lang.String, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, getColumnName[int], java.lang.String, null, Jext>
<java.lang.Object, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, value>
<java.lang.String, length[], int, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, trim()>
<java.lang.String, trim[], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, length[], val>
<SAD, unsetProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, toString()>
<java.lang.String, toString[], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, concat[java.lang.String], actions[row]>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, st>
<SAD, parseKeyStroke[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, DefaultInputHandler>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, st>
<java.lang.String, length[], int, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, val>
<java.lang.String, length[], int, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, val>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, val>
<SAD, showError[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, Jext>
<SAD, showError[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.options.KeyShortcutsOptions.KeysTableModel, setValueAt[java.lang.Object, int, int], void, null, Jext>
<SAD, setLayout[], SADNESS, org.jext.options.LangOptions, LangOptions[], void, null, nothing here>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, org.jext.options.LangOptions, LangOptions[], void, null, model>
<SAD, getWildCardMatches[], SADNESS, org.jext.options.LangOptions, LangOptions[], void, null, Utilities>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, org.jext.options.LangOptions, LangOptions[], void, null, model>
<java.lang.String, substring[int, int], java.lang.String, org.jext.options.LangOptions, LangOptions[], void, null, packs[i]>
<java.lang.String, indexOf[java.lang.String], int, org.jext.options.LangOptions, LangOptions[], void, null, packs[i]>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.options.LangOptions, LangOptions[], void, null, langList>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.LangOptions, LangOptions[], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.options.LangOptions, LangOptions[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.LangOptions, LangOptions[], void, null, pane>
<SAD, add[], SADNESS, org.jext.options.LangOptions, LangOptions[], void, null, nothing here>
<org.jext.options.LangOptions, load[], void, org.jext.options.LangOptions, LangOptions[], void, null, nothing here>
<javax.swing.JList, setSelectedValue[java.lang.Object, boolean], void, org.jext.options.LangOptions, load[], void, null, langList>
<SAD, getLanguage[], SADNESS, org.jext.options.LangOptions, load[], void, null, Jext>
<SAD, equals[], SADNESS, org.jext.options.LangOptions, save[], void, null, getLanguage()>
<SAD, getLanguage[], SADNESS, org.jext.options.LangOptions, save[], void, equals[], Jext>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.options.LangOptions, save[], void, null, langList>
<java.lang.Object, toString[], java.lang.String, org.jext.options.LangOptions, save[], void, null, getSelectedValue()>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.options.LangOptions, save[], void, toString[], langList>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.options.LangOptions, save[], void, null, writer>
<java.lang.String, length[], int, org.jext.options.LangOptions, save[], void, null, language>
<java.io.BufferedWriter, flush[], void, org.jext.options.LangOptions, save[], void, null, writer>
<java.io.BufferedWriter, close[], void, org.jext.options.LangOptions, save[], void, null, writer>
<SAD, setLanguage[], SADNESS, org.jext.options.LangOptions, save[], void, null, Jext>
<org.jext.options.OptionsDialog, reload[], void, org.jext.options.OptionsDialog, showOptionDialog[org.jext.options.JextFrame], void, null, theInstance>
<java.awt.Dialog, setVisible[boolean], void, org.jext.options.OptionsDialog, showOptionDialog[org.jext.options.JextFrame], void, null, theInstance>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, showWaitCursor[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, ((JPanel)getContentPane())>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, setBorder[javax.swing.border.Border], nothing here>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, BorderFactory>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, stage>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, BorderFactory>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<javax.swing.JLabel, setHorizontalAlignment[int], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, currentLabel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, currentLabel>
<javax.swing.BorderFactory, createMatteBorder[int, int, int, int, java.awt.Color], javax.swing.border.MatteBorder, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, BorderFactory>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, stage>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, stage>
<org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, nothing here>
<javax.swing.JTree, setCellRenderer[javax.swing.tree.TreeCellRenderer], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<javax.swing.JTree, setShowsRootHandles[boolean], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<javax.swing.JTree, setRootVisible[boolean], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, ok>
<SAD, charAt[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, ok>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, buttons>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, setDefaultButton[javax.swing.JButton], nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, cancel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, buttons>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, apply>
<SAD, charAt[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, apply>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, buttons>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, nothing here>
<java.awt.event.KeyEvent, getKeyCode[], int, java.awt.event.KeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.options.OptionsDialog, ok[], void, java.awt.event.KeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<org.jext.options.OptionsDialog, cancel[], void, java.awt.event.KeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, nothing here>
<org.jext.options.OptionsDialog, cancel[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<org.jext.options.OptionsDialog$OptionTreeModel, getRoot[], java.lang.Object, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, theTree>
<SAD, getMember[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, jextGroup>
<javax.swing.tree.TreeSelectionModel, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, getSelectionModel()>
<javax.swing.JTree, getSelectionModel[], javax.swing.tree.TreeSelectionModel, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], paneTree>
<javax.swing.JTree, setSelectionPath[javax.swing.tree.TreePath], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, paneTree>
<java.awt.Window, pack[], void, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, Utilities>
<SAD, hideWaitCursor[], SADNESS, org.jext.options.OptionsDialog, OptionsDialog[org.jext.options.JextFrame], void, null, parent>
<javax.swing.JTree, getModel[], javax.swing.tree.TreeModel, org.jext.options.OptionsDialog, ok[boolean], void, null, paneTree>
<SAD, save[], SADNESS, org.jext.options.OptionsDialog, ok[boolean], void, null, getRoot())>
<org.jext.options.OptionsDialog$OptionTreeModel, getRoot[], java.lang.Object, org.jext.options.OptionsDialog, ok[boolean], void, save[], m>
<SAD, propertiesChanged[], SADNESS, org.jext.options.OptionsDialog, ok[boolean], void, null, Jext>
<java.awt.Dialog, setVisible[boolean], void, org.jext.options.OptionsDialog, ok[boolean], void, null, nothing here>
<org.jext.options.OptionsDialog, ok[boolean], void, org.jext.options.OptionsDialog, ok[], void, null, nothing here>
<java.awt.Dialog, setVisible[boolean], void, org.jext.options.OptionsDialog, cancel[], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.options.OptionsDialog, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.options.OptionsDialog, ok[], void, org.jext.options.OptionsDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.options.OptionsDialog, cancel[], void, org.jext.options.OptionsDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.options.OptionsDialog, ok[boolean], void, org.jext.options.OptionsDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, showWaitCursor[], SADNESS, org.jext.options.OptionsDialog, reload[], void, null, parent>
<org.jext.options.OptionsDialog, reloadStdPanes[], void, org.jext.options.OptionsDialog, reload[], void, null, nothing here>
<org.jext.options.OptionsDialog, reloadPluginPanes[], void, org.jext.options.OptionsDialog, reload[], void, null, nothing here>
<SAD, hideWaitCursor[], SADNESS, org.jext.options.OptionsDialog, reload[], void, null, parent>
<SAD, getMembers[], SADNESS, org.jext.options.OptionsDialog, reloadStdPanes[], void, null, jextGroup>
<java.util.ArrayList, size[], int, org.jext.options.OptionsDialog, reloadStdPanes[], void, null, stdPanes>
<SAD, load[], SADNESS, org.jext.options.OptionsDialog, reloadStdPanes[], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.OptionsDialog, reloadStdPanes[], void, load[], stdPanes>
<java.awt.CardLayout, show[java.awt.Container, java.lang.String], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, getLayout())>
<java.awt.Container, getLayout[], java.awt.LayoutManager, org.jext.options.OptionsDialog, reloadPluginPanes[], void, show[java.awt.Container, java.lang.String], cardPanel>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, getMember(0)))>
<SAD, getMember[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, getName[], jextGroup>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, cachPlugPanes>
<java.util.Iterator, hasNext[], boolean, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, i>
<SAD, load[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, next()))>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.OptionsDialog, reloadPluginPanes[], void, load[], i>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, ame>
<SAD, showError[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, Utilities>
<SAD, toString[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, toString[], op>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, t>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, notCachPlugPanes>
<java.util.Iterator, hasNext[], boolean, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, i>
<java.awt.Container, remove[java.awt.Component], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, cardPanel>
<SAD, getComponent[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.OptionsDialog, reloadPluginPanes[], void, getComponent[], i>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, notCachPlugin>
<java.util.Iterator, hasNext[], boolean, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, i>
<SAD, createOptionPanes[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, next()))>
<java.util.Iterator, next[], java.lang.Object, org.jext.options.OptionsDialog, reloadPluginPanes[], void, createOptionPanes[], i>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, ame>
<SAD, showError[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, Utilities>
<SAD, toString[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.options.OptionsDialog, reloadPluginPanes[], void, toString[], plug>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, t>
<java.awt.CardLayout, show[java.awt.Container, java.lang.String], void, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, getLayout())>
<java.awt.Container, getLayout[], java.awt.LayoutManager, org.jext.options.OptionsDialog, reloadPluginPanes[], void, show[java.awt.Container, java.lang.String], cardPanel>
<org.jext.options.OptionsDialog, addOptionGroup[org.jext.options.OptionGroup, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, addOptionGroup[org.jext.options.OptionGroup], void, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane], void, null, nothing here>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, pane>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, cardPanel>
<SAD, getComponent[], SADNESS, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, pane>
<SAD, addOptionPane[], SADNESS, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, parent>
<SAD, isCacheable[], SADNESS, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, pane>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, cachPlugPanes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, notCachPlugPanes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, notCachPlugin>
<org.jext.options.OptionsDialog$OptionTreeModel, getRoot[], java.lang.Object, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, paneTreeModel>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<org.jext.options.OptionsDialog, addOptionGroup[org.jext.options.OptionGroup, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<SAD, getPlugins[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, Jext>
<SAD, createOptionPanes[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, currPlugin>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, ame>
<SAD, showError[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, Utilities>
<SAD, toString[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, toString[], plugins[i]>
<java.lang.Throwable, printStackTrace[], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, t>
<SAD, getMemberCount[], SADNESS, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, pluginsGroup>
<org.jext.options.OptionsDialog, addOptionGroup[org.jext.options.OptionGroup, org.jext.options.OptionGroup], void, org.jext.options.OptionsDialog, createOptionTreeModel[], org.jext.options.OptionsDialog.OptionTreeModel, null, nothing here>
<javax.swing.event.TreeSelectionEvent, getPath[], javax.swing.tree.TreePath, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, evt>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, path>
<javax.swing.tree.TreePath, getPath[], java.lang.Object[], org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, path>
<javax.swing.JTree, isRootVisible[], boolean, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, paneTree>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, ((OptionPane)nodes[i])>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, ((OptionGroup)nodes[i])>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, Jext>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, buf>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, currentLabel>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, buf>
<java.awt.CardLayout, show[java.awt.Container, java.lang.String], void, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getLayout())>
<java.awt.Container, getLayout[], java.awt.LayoutManager, org.jext.options.OptionsDialog, valueChanged[javax.swing.event.TreeSelectionEvent], void, show[java.awt.Container, java.lang.String], cardPanel>
<javax.swing.JTree, getPathForLocation[int, int], javax.swing.tree.TreePath, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, paneTree>
<java.awt.event.MouseEvent, getX[], int, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, evt>
<java.awt.event.MouseEvent, getY[], int, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, evt>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, path>
<javax.swing.JTree, isCollapsed[javax.swing.tree.TreePath], boolean, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, paneTree>
<javax.swing.JTree, expandPath[javax.swing.tree.TreePath], void, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, paneTree>
<javax.swing.JTree, collapsePath[javax.swing.tree.TreePath], void, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, paneTree>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, BorderFactory>
<javax.swing.BorderFactory, createLineBorder[java.awt.Color], javax.swing.border.Border, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, BorderFactory>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.options.OptionsDialog.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, UIManager>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.options.OptionsDialog.PaneNameRenderer, PaneNameRenderer[], void, null, nothing here>
<javax.swing.UIManager, getFont[java.lang.Object], java.awt.Font, org.jext.options.OptionsDialog.PaneNameRenderer, PaneNameRenderer[], void, null, UIManager>
<java.awt.Font, getName[], java.lang.String, org.jext.options.OptionsDialog.PaneNameRenderer, PaneNameRenderer[], void, null, paneFont>
<java.awt.Font, getStyle[], int, org.jext.options.OptionsDialog.PaneNameRenderer, PaneNameRenderer[], void, null, paneFont>
<java.awt.Font, getSize[], int, org.jext.options.OptionsDialog.PaneNameRenderer, PaneNameRenderer[], void, null, paneFont>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, UIManager>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, UIManager>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, tree>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<java.awt.Component, getForeground[], java.awt.Color, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, tree>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, ((OptionGroup)value)>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<SAD, getName[], SADNESS, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, ((OptionPane)value)>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, this>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, Jext>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, nothing here>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.options.OptionsDialog.PaneNameRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, nothing here>
<javax.swing.event.EventListenerList, add[java.lang.Class<javax.swing.event.TreeModelListener>, javax.swing.event.TreeModelListener], void, org.jext.options.OptionsDialog.OptionTreeModel, addTreeModelListener[javax.swing.event.TreeModelListener], void, null, listenerList>
<javax.swing.event.EventListenerList, remove[java.lang.Class<javax.swing.event.TreeModelListener>, javax.swing.event.TreeModelListener], void, org.jext.options.OptionsDialog.OptionTreeModel, removeTreeModelListener[javax.swing.event.TreeModelListener], void, null, listenerList>
<SAD, getMember[], SADNESS, org.jext.options.OptionsDialog.OptionTreeModel, getChild[java.lang.Object, int], java.lang.Object, null, ((OptionGroup)parent)>
<SAD, getMemberCount[], SADNESS, org.jext.options.OptionsDialog.OptionTreeModel, getChildCount[java.lang.Object], int, null, ((OptionGroup)parent)>
<SAD, getMemberIndex[], SADNESS, org.jext.options.OptionsDialog.OptionTreeModel, getIndexOfChild[java.lang.Object, java.lang.Object], int, null, ((OptionGroup)parent)>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.options.OptionsDialog.OptionTreeModel, fireNodesChanged[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, listenerList>
<javax.swing.event.TreeModelListener, treeNodesChanged[javax.swing.event.TreeModelEvent], void, org.jext.options.OptionsDialog.OptionTreeModel, fireNodesChanged[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, ((TreeModelListener)listeners[i + 1])>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.options.OptionsDialog.OptionTreeModel, fireNodesInserted[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, listenerList>
<javax.swing.event.TreeModelListener, treeNodesInserted[javax.swing.event.TreeModelEvent], void, org.jext.options.OptionsDialog.OptionTreeModel, fireNodesInserted[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, ((TreeModelListener)listeners[i + 1])>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.options.OptionsDialog.OptionTreeModel, fireNodesRemoved[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, listenerList>
<javax.swing.event.TreeModelListener, treeNodesRemoved[javax.swing.event.TreeModelEvent], void, org.jext.options.OptionsDialog.OptionTreeModel, fireNodesRemoved[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, ((TreeModelListener)listeners[i + 1])>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.options.OptionsDialog.OptionTreeModel, fireTreeStructureChanged[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, listenerList>
<javax.swing.event.TreeModelListener, treeStructureChanged[javax.swing.event.TreeModelEvent], void, org.jext.options.OptionsDialog.OptionTreeModel, fireTreeStructureChanged[java.lang.Object, java.lang.Object[], int[], java.lang.Object[]], void, null, ((TreeModelListener)listeners[i + 1])>
<SAD, setLayout[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StylesOptions, StylesOptions[], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StylesOptions, StylesOptions[], void, null, panel>
<org.jext.options.StylesOptions, createColorTableScroller[], javax.swing.JScrollPane, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<SAD, add[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<SAD, setLayout[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StylesOptions, StylesOptions[], void, null, panel>
<SAD, getProperty[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.options.StylesOptions, StylesOptions[], void, null, panel>
<org.jext.options.StylesOptions, createStyleTableScroller[], javax.swing.JScrollPane, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<SAD, add[], SADNESS, org.jext.options.StylesOptions, StylesOptions[], void, null, nothing here>
<SAD, save[], SADNESS, org.jext.options.StylesOptions, save[], void, null, colorModel>
<SAD, save[], SADNESS, org.jext.options.StylesOptions, save[], void, null, styleModel>
<SAD, load[], SADNESS, org.jext.options.StylesOptions, load[], void, null, colorModel>
<SAD, load[], SADNESS, org.jext.options.StylesOptions, load[], void, null, styleModel>
<org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, org.jext.options.StylesOptions, createColorTableScroller[], javax.swing.JScrollPane, null, nothing here>
<SAD, getPreferredSize[], SADNESS, org.jext.options.StylesOptions, createColorTableScroller[], javax.swing.JScrollPane, null, colorTable>
<java.lang.Math, min[int, int], int, org.jext.options.StylesOptions, createColorTableScroller[], javax.swing.JScrollPane, null, Math>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.StylesOptions, createColorTableScroller[], javax.swing.JScrollPane, null, scroller>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<SAD, addColorChoice[], SADNESS, org.jext.options.StylesOptions, createColorTableModel[], ColorTable.ColorTableModel, null, model>
<org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, org.jext.options.StylesOptions, createStyleTableScroller[], javax.swing.JScrollPane, null, nothing here>
<SAD, getPreferredSize[], SADNESS, org.jext.options.StylesOptions, createStyleTableScroller[], javax.swing.JScrollPane, null, styleTable>
<java.lang.Math, min[int, int], int, org.jext.options.StylesOptions, createStyleTableScroller[], javax.swing.JScrollPane, null, Math>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.options.StylesOptions, createStyleTableScroller[], javax.swing.JScrollPane, null, scroller>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, addStyleChoice[], SADNESS, org.jext.options.StylesOptions, createStyleTableModel[], StyleTable.StyleTableModel, null, model>
<SAD, getTextArea[], SADNESS, org.jext.MenuAction, getTextArea[java.util.EventObject], org.jext.JextTextArea, null, getJextParent(evt)>
<org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, org.jext.MenuAction, getTextArea[java.util.EventObject], org.jext.JextTextArea, getTextArea[], nothing here>
<SAD, getNSTextArea[], SADNESS, org.jext.MenuAction, getNSTextArea[java.util.EventObject], org.jext.JextTextArea, null, getJextParent(evt)>
<org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, org.jext.MenuAction, getNSTextArea[java.util.EventObject], org.jext.JextTextArea, getNSTextArea[], nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, null, evt>
<javax.swing.JPopupMenu, getInvoker[], java.awt.Component, org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, null, ((JPopupMenu)c)>
<javax.swing.JComponent, getClientProperty[java.lang.Object], java.lang.Object, org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, null, ((JComponent)c)>
<java.awt.Component, getParent[], java.awt.Container, org.jext.MenuAction, getJextParent[java.util.EventObject], org.jext.JextFrame, null, c>
<SAD, getTextArea[], SADNESS, org.jext.MenuAction, getTextArea[java.awt.Component], org.jext.JextTextArea, null, getJextParent(c)>
<org.jext.MenuAction, getJextParent[java.awt.Component], org.jext.JextFrame, org.jext.MenuAction, getTextArea[java.awt.Component], org.jext.JextTextArea, getTextArea[], nothing here>
<SAD, getNSTextArea[], SADNESS, org.jext.MenuAction, getNSTextArea[java.awt.Component], org.jext.JextTextArea, null, getJextParent(c)>
<org.jext.MenuAction, getJextParent[java.awt.Component], org.jext.JextFrame, org.jext.MenuAction, getNSTextArea[java.awt.Component], org.jext.JextTextArea, getNSTextArea[], nothing here>
<javax.swing.JPopupMenu, getInvoker[], java.awt.Component, org.jext.MenuAction, getJextParent[java.awt.Component], org.jext.JextFrame, null, ((JPopupMenu)comp)>
<java.awt.Component, getParent[], java.awt.Container, org.jext.MenuAction, getJextParent[java.awt.Component], org.jext.JextFrame, null, comp>
<org.jext.scripting.python.Run, buildPackageList[], void, org.jext.scripting.python.Run, addPackage[java.lang.String], void, null, nothing here>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.scripting.python.Run, addPackage[java.lang.String], void, null, packageList>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.scripting.python.Run, buildPackageList[], void, null, class>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.scripting.python.Run, buildPackageList[], void, null, in>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.scripting.python.Run, buildPackageList[], void, null, packageList>
<java.io.BufferedReader, close[], void, org.jext.scripting.python.Run, buildPackageList[], void, null, in>
<java.lang.Throwable, printStackTrace[], void, org.jext.scripting.python.Run, buildPackageList[], void, null, ioe>
<SAD, addModule[], SADNESS, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, imp>
<SAD, setLocals[], SADNESS, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, interp>
<org.jext.scripting.python.Run, buildPackageList[], void, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, nothing here>
<SAD, getSystemState[], SADNESS, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, Py>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, packageList>
<java.util.Iterator, hasNext[], boolean, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, i>
<SAD, add_package[], SADNESS, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, sys>
<java.util.Iterator, next[], java.lang.Object, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, i>
<SAD, set[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, setErr[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, getStdErr[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, console>
<SAD, setOut[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, getStdOut[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, console>
<SAD, setErr[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, getStdErr[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, getPythonLogWindow()>
<SAD, getPythonLogWindow[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, getStdErr[], parent>
<SAD, setOut[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, getStdOut[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, getPythonLogWindow()>
<SAD, getPythonLogWindow[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, getStdOut[], parent>
<SAD, setOut[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<SAD, setErr[], SADNESS, org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, null, interp>
<org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame, java.io.Console], org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame], org.jext.scripting.python.PythonInterpreter, null, nothing here>
<org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame, java.io.Console], org.jext.scripting.python.PythonInterpreter, null, nothing here>
<org.jext.scripting.python.Run, setupPythonInterpreter[org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.JextFrame, java.io.Console], void, org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame, java.io.Console], org.jext.scripting.python.PythonInterpreter, null, nothing here>
<org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame], org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, nothing here>
<SAD, set[], SADNESS, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, parser>
<SAD, eval[], SADNESS, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, parser>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, err>
<java.lang.Throwable, toString[], java.lang.String, org.jext.scripting.python.Run, eval[java.lang.String, java.lang.String, java.lang.Object[], org.jext.scripting.python.JextFrame], org.jext.scripting.python.PyObject, null, pe>
<org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame], org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, nothing here>
<SAD, exec[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, parser>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, logln[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, getPythonLogWindow()>
<SAD, getPythonLogWindow[], SADNESS, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, logln[], parent>
<java.lang.Throwable, toString[], java.lang.String, org.jext.scripting.python.Run, execute[java.lang.String, org.jext.scripting.python.JextFrame], void, null, pe>
<org.jext.scripting.python.Run, getPythonInterpreter[org.jext.scripting.python.JextFrame], org.jext.scripting.python.PythonInterpreter, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, nothing here>
<SAD, execfile[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, parser>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, logln[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, getPythonLogWindow()>
<SAD, getPythonLogWindow[], SADNESS, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, logln[], parent>
<java.lang.Throwable, toString[], java.lang.String, org.jext.scripting.python.Run, runScript[java.lang.String, org.jext.scripting.python.JextFrame], void, null, pe>
<SAD, setLabel[], SADNESS, org.jext.scripting.python.DockChangeHandler, dockChangeHandler[int, int], void, null, dock>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.DockChangeHandler, dockChangeHandler[int, int], void, null, Jext>
<SAD, setLabel[], SADNESS, org.jext.scripting.python.DockChangeHandler, dockChangeHandler[int, int], void, null, dock>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.DockChangeHandler, dockChangeHandler[int, int], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.PythonLogWindow, getInstance[org.jext.scripting.python.JextFrame], org.jext.scripting.python.Dockable, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, addMouseListener[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, Jext>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, pane>
<SAD, add[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, getContentPane()>
<SAD, getContentPane[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, add[], nothing here>
<SAD, addActionListener[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, dock>
<SAD, addActionListener[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, clear>
<SAD, dispose[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, nothing here>
<SAD, pack[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.scripting.python.PythonLogWindow, PythonLogWindow[org.jext.scripting.python.JextFrame], void, null, Utilities>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.scripting.python.PythonLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, setText[], SADNESS, org.jext.scripting.python.PythonLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.jext.scripting.python.PythonLogWindow, toggleDocking[], void, org.jext.scripting.python.PythonLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDockingStatus[], SADNESS, org.jext.scripting.python.PythonLogWindow, toggleDocking[], void, null, contDock>
<SAD, setDockingStatus[], SADNESS, org.jext.scripting.python.PythonLogWindow, toggleDocking[], void, null, contDock>
<SAD, setDockingStatus[], SADNESS, org.jext.scripting.python.PythonLogWindow, toggleDocking[], void, null, contDock>
<java.io.PrintStream, println[java.lang.String], void, org.jext.scripting.python.PythonLogWindow, toggleDocking[], void, null, err>
<java.awt.event.MouseEvent, getClickCount[], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, evt>
<SAD, getDefaultRootElement[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, map>
<SAD, getCaretPosition[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, line>
<SAD, getMatch[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, regexp>
<SAD, getText[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<javax.swing.text.Element, getEndOffset[], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, line>
<SAD, toString[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, match>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, Integer>
<SAD, toString[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, match>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, file>
<SAD, getTextArea[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, parent>
<SAD, getTextAreas[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, parent>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, file>
<SAD, getCurrentFile[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, areas[i]>
<SAD, open[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, parent>
<SAD, getElement[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, getElement[], getDocument()>
<SAD, getDocument[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, getDefaultRootElement[], _textArea>
<SAD, select[], SADNESS, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, _textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, line>
<javax.swing.text.Element, getEndOffset[], int, org.jext.scripting.python.PythonLogWindow.MouseHandler, mouseClicked[java.awt.event.MouseEvent], void, null, line>
<SAD, getFrame[], SADNESS, org.jext.scripting.AbstractLogWindow, getContainingDock[], org.jext.scripting.Dockable, null, contDock>
<java.io.PrintStream, println[char[]], void, org.jext.scripting.AbstractLogWindow, getContainingDock[], org.jext.scripting.Dockable, null, err>
<SAD, getFrame[], SADNESS, org.jext.scripting.AbstractLogWindow, getContainingDock[], org.jext.scripting.Dockable, null, contDock>
<javax.swing.JTextArea, append[java.lang.String], void, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, null, textArea>
<javax.swing.text.JTextComponent, setSelectionStart[int], void, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, null, getDocument()>
<javax.swing.text.JTextComponent, getDocument[], javax.swing.text.Document, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, getLength[], textArea>
<javax.swing.text.JTextComponent, setSelectionEnd[int], void, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, null, getDocument()>
<javax.swing.text.JTextComponent, getDocument[], javax.swing.text.Document, org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, getLength[], textArea>
<org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, org.jext.scripting.AbstractLogWindow, logln[java.lang.String], void, null, nothing here>
<java.awt.Component, repaint[], void, org.jext.scripting.AbstractLogWindow.LoggingWriter, flush[], void, null, textArea>
<org.jext.scripting.AbstractLogWindow, log[java.lang.String], void, org.jext.scripting.AbstractLogWindow.LoggingWriter, write[char[], int, int], void, null, nothing here>
<javax.swing.text.JTextComponent, setEditable[boolean], void, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, textArea>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, setLayout[java.awt.LayoutManager], nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, add[java.lang.String, java.awt.Component], nothing here>
<javax.swing.JFrame, setDefaultCloseOperation[int], void, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, nothing here>
<java.awt.event.KeyEvent, getKeyCode[], int, java.awt.event.KeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, setVisible[boolean], void, java.awt.event.KeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JFrame, setIconImage[java.awt.Image], void, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, nothing here>
<SAD, getJextIconImage[], SADNESS, org.jext.scripting.AbstractLogWindow, AbstractLogWindow[org.jext.scripting.JextFrame, java.lang.String], void, null, GUIUtilities>
<org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame], void, null, nothing here>
<SAD, isInitialized[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, DawnParser>
<SAD, init[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, DawnParser>
<SAD, installPackage[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, DawnParser>
<SAD, setProperty[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, parser>
<SAD, exec[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, parser>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, Jext>
<SAD, dump[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, parser>
<java.lang.String, length[], int, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, dumped>
<SAD, logln[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, getDawnLogWindow()>
<SAD, getDawnLogWindow[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, logln[], parent>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, Jext>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, JOptionPane>
<SAD, getMessage[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, dre>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, Jext>
<java.lang.Thread, start[], void, org.jext.scripting.dawn.Run.ThreadExecuter, ThreadExecuter[java.lang.String, org.jext.scripting.dawn.JextFrame], void, null, nothing here>
<SAD, isInitialized[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, DawnParser>
<SAD, init[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, DawnParser>
<SAD, installPackage[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, DawnParser>
<SAD, setProperty[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, parser>
<SAD, exec[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, parser>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, Jext>
<SAD, dump[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, parser>
<java.lang.String, length[], int, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, dumped>
<SAD, logln[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, getDawnLogWindow()>
<SAD, getDawnLogWindow[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, logln[], parent>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, JOptionPane>
<SAD, getMessage[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, dre>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.Run.ThreadExecuter, run[], void, null, Jext>
<org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame], void, null, nothing here>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, append(line)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, append[char], buf>
<java.io.BufferedReader, close[], void, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, in>
<org.jext.scripting.dawn.Run, execute[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, buf>
<SAD, showError[], SADNESS, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.Run, runScript[java.lang.String, org.jext.scripting.dawn.JextFrame, boolean], void, null, Jext>
<SAD, buildInstance[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, getInstance[org.jext.scripting.dawn.JextFrame], org.jext.scripting.dawn.Dockable, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, getInstance[org.jext.scripting.dawn.JextFrame], org.jext.scripting.dawn.Dockable, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, pane>
<SAD, add[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, getContentPane()>
<SAD, getContentPane[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, add[], nothing here>
<SAD, addActionListener[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, clear>
<javax.swing.JTextField, addActionListener[java.awt.event.ActionListener], void, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, immediate>
<SAD, pack[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, DawnLogWindow[org.jext.scripting.dawn.JextFrame], void, null, Utilities>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.scripting.dawn.DawnLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, setText[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, execute[], SADNESS, org.jext.scripting.dawn.DawnLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, Run>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.scripting.dawn.DawnLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, immediate>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.scripting.dawn.DawnLogWindow, actionPerformed[java.awt.event.ActionEvent], void, null, immediate>
<SAD, checkArgsNumber[], SADNESS, org.jext.scripting.dawn.functions.SetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.SetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, setProperty[], SADNESS, org.jext.scripting.dawn.functions.SetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Jext>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.SetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.YesNoFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.YesNoFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.scripting.dawn.functions.YesNoFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, JOptionPane>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.YesNoFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.scripting.dawn.functions.YesNoFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.JextActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.JextActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getAction[], SADNESS, org.jext.scripting.dawn.functions.JextActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Jext>
<SAD, actionPerformed[], SADNESS, org.jext.scripting.dawn.functions.JextActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, action>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.JextActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.MsgBoxFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.MsgBoxFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.scripting.dawn.functions.MsgBoxFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, JOptionPane>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.MsgBoxFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.InputFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.InputFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.scripting.dawn.functions.InputFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, JOptionPane>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.InputFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.scripting.dawn.functions.InputFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.OpenFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.OpenFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, open[], SADNESS, org.jext.scripting.dawn.functions.OpenFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, frame>
<SAD, constructPath[], SADNESS, org.jext.scripting.dawn.functions.OpenFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Utilities>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.OpenFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, addAction[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getClientProperty[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getJextToolBar()>
<SAD, getJextToolBar[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, getClientProperty[], parent>
<SAD, putClientProperty[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getJextToolBar()>
<SAD, getJextToolBar[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, putClientProperty[], parent>
<SAD, addMenu[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getJextMenuBar()>
<SAD, getJextMenuBar[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, addMenu[], parent>
<SAD, add[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, dawnMenu>
<SAD, loadMenuItem[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, GUIUtilities>
<SAD, execute[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction.DawnAction, actionPerformed[java.awt.event.ActionEvent], void, null, Run>
<SAD, getJextParent[], SADNESS, org.jext.scripting.dawn.functions.CreateActionFunction.DawnAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.YesNoCancelFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.YesNoCancelFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.scripting.dawn.functions.YesNoCancelFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, JOptionPane>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.YesNoCancelFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.scripting.dawn.functions.YesNoCancelFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.SetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.SetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, setText[], SADNESS, org.jext.scripting.dawn.functions.SetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.scripting.dawn.functions.SetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, setText[], frame>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.SetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.InsertTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getTextArea[], SADNESS, org.jext.scripting.dawn.functions.InsertTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, JEXT_FRAME"))>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.InsertTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, setSelectedText[], SADNESS, org.jext.scripting.dawn.functions.InsertTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, textArea>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.InsertTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.IsPropertyEnabledFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.scripting.dawn.functions.IsPropertyEnabledFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getBooleanProperty[], SADNESS, org.jext.scripting.dawn.functions.IsPropertyEnabledFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Jext>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.IsPropertyEnabledFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.GetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.scripting.dawn.functions.GetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.GetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, Jext>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.GetPropertyFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.GetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getText[], SADNESS, org.jext.scripting.dawn.functions.GetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.scripting.dawn.functions.GetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, getText[], frame>
<SAD, pushString[], SADNESS, org.jext.scripting.dawn.functions.GetTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.GetSelectedTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getSelectedText[], SADNESS, org.jext.scripting.dawn.functions.GetSelectedTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.scripting.dawn.functions.GetSelectedTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, getSelectedText[], frame>
<SAD, pushString[], SADNESS, org.jext.scripting.dawn.functions.GetSelectedTextFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, parser>
<SAD, getConsole[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, frame>
<SAD, addHistory[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, console>
<SAD, setText[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, console>
<SAD, execute[], SADNESS, org.jext.scripting.dawn.functions.ConsoleFunction, invoke[org.jext.scripting.dawn.functions.DawnParser], void, null, console>
<javax.swing.JFrame, setDefaultLookAndFeelDecorated[boolean], void, org.jext.JavaSupport, initJavaSupport[], void, null, JFrame>
<SAD, getBooleanProperty[], SADNESS, org.jext.JavaSupport, initJavaSupport[], void, null, Jext>
<javax.swing.JDialog, setDefaultLookAndFeelDecorated[boolean], void, org.jext.JavaSupport, initJavaSupport[], void, null, JDialog>
<SAD, getBooleanProperty[], SADNESS, org.jext.JavaSupport, initJavaSupport[], void, null, Jext>
<java.awt.KeyboardFocusManager, setCurrentKeyboardFocusManager[java.awt.KeyboardFocusManager], void, org.jext.JavaSupport, initJavaSupport[], void, null, KeyboardFocusManager>
<SAD, addMouseWheelListener[], SADNESS, org.jext.JavaSupport, setMouseWheel[org.jext.JextTextArea], void, null, area>
<java.awt.event.MouseWheelEvent, getScrollType[], int, java.lang.Object, mouseWheelMoved[java.awt.event.MouseWheelEvent], void, null, e>
<SAD, setFirstLine[], SADNESS, java.lang.Object, mouseWheelMoved[java.awt.event.MouseWheelEvent], void, null, area>
<SAD, getFirstLine[], SADNESS, java.lang.Object, mouseWheelMoved[java.awt.event.MouseWheelEvent], void, null, area>
<java.awt.event.MouseWheelEvent, getUnitsToScroll[], int, java.lang.Object, mouseWheelMoved[java.awt.event.MouseWheelEvent], void, null, e>
<java.awt.KeyboardFocusManager, setDefaultFocusTraversalPolicy[java.awt.FocusTraversalPolicy], void, org.jext.JavaSupport.JextKeyboardFocusManager, JextKeyboardFocusManager[], void, null, nothing here>
<java.awt.event.InputEvent, isConsumed[], boolean, org.jext.JavaSupport.JextKeyboardFocusManager, postProcessKeyEvent[java.awt.event.KeyEvent], boolean, null, evt>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.JavaSupport.JextKeyboardFocusManager, postProcessKeyEvent[java.awt.event.KeyEvent], boolean, null, evt>
<java.awt.Component, isShowing[], boolean, org.jext.JavaSupport.JextKeyboardFocusManager, postProcessKeyEvent[java.awt.event.KeyEvent], boolean, null, comp>
<SAD, processKeyEvent[], SADNESS, org.jext.JavaSupport.JextKeyboardFocusManager, postProcessKeyEvent[java.awt.event.KeyEvent], boolean, null, ((JextFrame)comp)>
<java.awt.Component, getParent[], java.awt.Container, org.jext.JavaSupport.JextKeyboardFocusManager, postProcessKeyEvent[java.awt.event.KeyEvent], boolean, null, comp>
<java.lang.String, length[], int, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, script>
<SAD, getPythonInterpreter[], SADNESS, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, Run>
<SAD, getJextParent[], SADNESS, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, set[], SADNESS, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<SAD, exec[], SADNESS, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, parser>
<java.io.PrintStream, println[char[]], void, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<SAD, getName[], SADNESS, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.io.PrintStream, println[java.lang.Object], void, org.jext.PythonAction, actionPerformed[java.awt.event.ActionEvent], void, null, out>
<java.io.File, toURL[], java.net.URL, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, new File(path)>
<SAD, getLanguage[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, entries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, entries>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, entry>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, name>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, lowName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, lowName>
<SAD, loadProps[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, lowName>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<SAD, loadXMLProps[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.util.zip.ZipFile, getEntry[java.lang.String], java.util.zip.ZipEntry, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<SAD, getLanguageStream[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<SAD, loadXMLProps[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, lowName>
<SAD, loadXMLActions[], SADNESS, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, Jext>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, zipFile>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, name>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, pluginClasses>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, pluginsNames>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, classLoaders>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, classLoaders>
<SAD, setProperty[], SADNESS, org.jext.JARClassLoader, setEnabled[java.lang.String, boolean], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, isEnabled[java.lang.String], boolean, null, "yes">
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, isEnabled[java.lang.String], boolean, null, Jext>
<org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, org.jext.JARClassLoader, loadClass[java.lang.String, boolean], java.lang.Class, null, nothing here>
<java.util.zip.ZipFile, getEntry[java.lang.String], java.util.zip.ZipEntry, org.jext.JARClassLoader, getResourceAsStream[java.lang.String], java.io.InputStream, null, zipFile>
<java.lang.ClassLoader, getSystemResourceAsStream[java.lang.String], java.io.InputStream, org.jext.JARClassLoader, getResourceAsStream[java.lang.String], java.io.InputStream, null, nothing here>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, getResourceAsStream[java.lang.String], java.io.InputStream, null, zipFile>
<org.jext.JARClassLoader, getResourceAsPath[java.lang.String], java.lang.String, org.jext.JARClassLoader, getResource[java.lang.String], java.net.URL, null, nothing here>
<java.util.zip.ZipFile, getName[], java.lang.String, org.jext.JARClassLoader, getPath[], java.lang.String, null, zipFile>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, initPlugins[], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, initPlugins[], void, null, classLoaders>
<org.jext.JARClassLoader, loadAllPlugins[], void, org.jext.JARClassLoader, initPlugins[], void, null, classLoader>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, getClassLoader[int], org.jext.JARClassLoader, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, getClassLoaderCount[], int, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, classLoaders>
<org.jext.JARClassLoader, getZipFile[], java.util.zip.ZipFile, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, classLoader>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<SAD, getLanguage[], SADNESS, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, Jext>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, entries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, entries>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, entry>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, name>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, lowName>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, lowName>
<SAD, loadProps[], SADNESS, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, Jext>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, lowName>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<SAD, loadXMLProps[], SADNESS, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, Jext>
<java.util.zip.ZipFile, getEntry[java.lang.String], java.util.zip.ZipEntry, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<SAD, getLanguageStream[], SADNESS, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, Jext>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, zipFile>
<SAD, loadXMLProps[], SADNESS, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, classLoaders>
<org.jext.JARClassLoader, getZipFile[], java.util.zip.ZipFile, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, classLoader>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, zipFile>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, entries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, entries>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, getName()>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, toLowerCase[], entry>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, name>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, name>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, zipFile>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, append(line)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, append[char], buf>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, name>
<SAD, execute[], SADNESS, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, Run>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, buf>
<SAD, execute[], SADNESS, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, Run>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, buf>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, loadAllPlugins[], void, null, pluginClasses>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, loadAllPlugins[], void, null, pluginClasses>
<org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, org.jext.JARClassLoader, loadAllPlugins[], void, null, nothing here>
<java.io.PrintStream, println[char[]], void, org.jext.JARClassLoader, loadAllPlugins[], void, null, err>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadAllPlugins[], void, null, Jext>
<java.lang.Throwable, printStackTrace[], void, org.jext.JARClassLoader, loadAllPlugins[], void, null, t>
<SAD, fileToClass[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Utilities>
<org.jext.JARClassLoader, isEnabled[java.lang.String], boolean, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<java.io.PrintStream, println[char[]], void, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, err>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<SAD, getPlugins[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<SAD, equals[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, getName()>
<SAD, getName[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, equals[], getClass()>
<SAD, getClass[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, getName[], plugins[i]>
<java.io.PrintStream, println[char[]], void, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, err>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, nothing here>
<org.jext.JARClassLoader, loadClass[java.lang.String, boolean], java.lang.Class, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, nothing here>
<java.lang.Class, getModifiers[], int, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, clazz>
<java.lang.Class, isAssignableFrom[java.lang.Class<?>], boolean, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, class>
<java.lang.reflect.Modifier, isInterface[int], boolean, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Modifier>
<java.lang.reflect.Modifier, isAbstract[int], boolean, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Modifier>
<java.lang.Class, newInstance[], java.lang.Object, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, clazz>
<SAD, addPlugin[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<java.lang.String, lastIndexOf[int], int, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, name>
<java.lang.String, substring[int], java.lang.String, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, name>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<java.io.PrintStream, println[char[]], void, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, out>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadPluginClass[java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<java.lang.String, indexOf[int], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, dep>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, deps>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, deps>
<java.lang.String, substring[int, int], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, dep>
<java.lang.String, substring[int], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, dep>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, deps>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, deps>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<java.lang.String, compareTo[java.lang.String], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, version")>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, System>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<java.lang.String, compareTo[java.lang.String], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, version")>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, System>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<SAD, compareTo[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, BUILD>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<java.lang.String, indexOf[java.lang.String], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, name")>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, System>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, what>
<org.jext.JARClassLoader, loadClass[java.lang.String, boolean], java.lang.Class, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<java.lang.String, lastIndexOf[int], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, name>
<java.lang.String, substring[int], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, name>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, deps>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, Jext>
<org.jext.JARClassLoader, setEnabled[java.lang.String, boolean], void, org.jext.JARClassLoader, checkDependencies[java.lang.String], boolean, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, classLoaders>
<org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, loader>
<java.lang.Class, getClassLoader[], java.lang.ClassLoader, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends org.jext.JARClassLoader>, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, getClassLoader[], nothing here>
<java.lang.ClassLoader, loadClass[java.lang.String], java.lang.Class<?>, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, loader>
<java.lang.ClassLoader, findSystemClass[java.lang.String], java.lang.Class<?>, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, nothing here>
<java.lang.ClassLoader, findLoadedClass[java.lang.String], java.lang.Class<?>, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.lang.ClassLoader, resolveClass[java.lang.Class<?>], void, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<SAD, classToFile[], SADNESS, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, Utilities>
<java.util.zip.ZipFile, getEntry[java.lang.String], java.util.zip.ZipEntry, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, zipFile>
<org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, zipFile>
<java.util.zip.ZipEntry, getSize[], long, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, entry>
<java.io.InputStream, read[byte[], int, int], int, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, in>
<java.util.zip.ZipFile, getName[], java.lang.String, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, zipFile>
<java.io.PrintStream, println[char[]], void, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, err>
<SAD, getProperty[], SADNESS, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, Jext>
<java.lang.String, lastIndexOf[int], int, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, clazz>
<java.lang.String, substring[int, int], java.lang.String, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, ')>
<java.lang.String, replace[char, char], java.lang.String, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, name>
<java.lang.ClassLoader, getPackage[java.lang.String], java.lang.Package, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.lang.ClassLoader, definePackage[java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL], java.lang.Package, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.lang.ClassLoader, defineClass[java.lang.String, byte[], int, int], java.lang.Class<?>, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.lang.ClassLoader, resolveClass[java.lang.Class<?>], void, org.jext.JARClassLoader, loadClassFromZip[java.lang.String, boolean, boolean], java.lang.Class, null, nothing here>
<java.lang.Math, abs[int], int, org.jext.JextLoader, JextLoader[], void, null, Math>
<java.util.Random, nextInt[], int, org.jext.JextLoader, JextLoader[], void, null, new Random()>
<java.lang.Integer, toString[int], java.lang.String, org.jext.JextLoader, JextLoader[], void, null, Integer>
<java.lang.Integer, toString[int], java.lang.String, org.jext.JextLoader, JextLoader[], void, null, Integer>
<java.lang.Math, abs[int], int, org.jext.JextLoader, JextLoader[], void, null, Math>
<java.util.Random, nextInt[], int, org.jext.JextLoader, JextLoader[], void, null, new Random()>
<java.lang.Math, pow[double, double], double, org.jext.JextLoader, JextLoader[], void, null, Math>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.JextLoader, JextLoader[], void, null, writer>
<java.lang.String, length[], int, org.jext.JextLoader, JextLoader[], void, null, portStr>
<java.io.BufferedWriter, newLine[], void, org.jext.JextLoader, JextLoader[], void, null, writer>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.JextLoader, JextLoader[], void, newLine[], writer>
<java.lang.String, length[], int, org.jext.JextLoader, JextLoader[], void, null, key>
<java.io.BufferedWriter, flush[], void, org.jext.JextLoader, JextLoader[], void, null, writer>
<java.io.BufferedWriter, close[], void, org.jext.JextLoader, JextLoader[], void, null, writer>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextLoader, JextLoader[], void, null, ioe>
<java.lang.Thread, start[], void, org.jext.JextLoader, JextLoader[], void, null, tServer>
<java.lang.Thread, interrupt[], void, org.jext.JextLoader, stop[], void, null, tServer>
<java.net.ServerSocket, close[], void, org.jext.JextLoader, stop[], void, null, server>
<java.io.File, delete[], boolean, org.jext.JextLoader, stop[], void, null, auth>
<java.net.ServerSocket, accept[], java.net.Socket, org.jext.JextLoader, run[], void, null, server>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextLoader, run[], void, null, 1">
<java.net.InetAddress, getHostAddress[], java.lang.String, org.jext.JextLoader, run[], void, null, getLocalAddress()>
<java.net.Socket, getLocalAddress[], java.net.InetAddress, org.jext.JextLoader, run[], void, getHostAddress[], client>
<java.net.Socket, close[], void, org.jext.JextLoader, run[], void, null, client>
<SAD, stopServer[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<org.jext.JextLoader, intrusion[], void, org.jext.JextLoader, run[], void, null, nothing here>
<java.net.Socket, getInputStream[], java.io.InputStream, org.jext.JextLoader, run[], void, null, client>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.JextLoader, run[], void, null, reader>
<java.io.BufferedReader, close[], void, org.jext.JextLoader, run[], void, null, reader>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.JextLoader, run[], void, null, givenKey>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JextLoader, run[], void, null, givenKey>
<java.lang.String, substring[int, int], java.lang.String, org.jext.JextLoader, run[], void, null, givenKey>
<java.lang.String, length[], int, org.jext.JextLoader, run[], void, null, givenKey>
<java.lang.String, length[], int, org.jext.JextLoader, run[], void, null, key>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.JextLoader, run[], void, null, st>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.JextLoader, run[], void, null, args>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.JextLoader, run[], void, null, st>
<java.util.Vector, size[], int, org.jext.JextLoader, run[], void, null, args>
<java.util.Vector, size[], int, org.jext.JextLoader, run[], void, null, args>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.JextLoader, run[], void, null, args>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, newWindow[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, isRunningBg[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, getInstances[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextLoader, run[], void, null, instances>
<SAD, open[], SADNESS, org.jext.JextLoader, run[], void, null, parent>
<SAD, newWindow[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<java.io.PrintStream, println[java.lang.String], void, org.jext.JextLoader, run[], void, null, err>
<SAD, newWindow[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, newWindow[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<java.net.Socket, close[], void, org.jext.JextLoader, run[], void, null, client>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextLoader, run[], void, null, givenKey>
<SAD, isRunningBg[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, getInstances[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<SAD, isVisible[], SADNESS, org.jext.JextLoader, run[], void, null, get(0))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextLoader, run[], void, isVisible[], instances>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<SAD, closeToQuit[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<SAD, finalCleanupAndExit[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<java.net.Socket, close[], void, org.jext.JextLoader, run[], void, null, client>
<SAD, stopServer[], SADNESS, org.jext.JextLoader, run[], void, null, Jext>
<org.jext.JextLoader, intrusion[], void, org.jext.JextLoader, run[], void, null, nothing here>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.JextLoader, intrusion[], void, null, JOptionPane>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JextLoader, intrusion[], void, null, System>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.Utilities, showMessage[java.lang.String], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.Utilities, showMessage[java.lang.String], void, null, Jext>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.Utilities, showError[java.lang.String], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.Utilities, showError[java.lang.String], void, null, Jext>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.Utilities, showMessage[java.lang.String, java.lang.String], void, null, JOptionPane>
<SAD, getScreenSize[], SADNESS, org.jext.Utilities, getScreenDimension[], java.awt.Dimension, null, getMyToolkit()>
<SAD, getMyToolkit[], SADNESS, org.jext.Utilities, getScreenDimension[], java.awt.Dimension, getScreenSize[], Jext>
<java.awt.Component, setLocation[java.awt.Point], void, org.jext.Utilities, centerComponent[java.awt.Component], void, null, compo>
<org.jext.Utilities, getScreenDimension[], java.awt.Dimension, org.jext.Utilities, centerComponent[java.awt.Component], void, null, nothing here>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.Utilities, centerComponent[java.awt.Component], void, null, compo>
<org.jext.Utilities, getScreenDimension[], java.awt.Dimension, org.jext.Utilities, centerComponent[java.awt.Component], void, null, nothing here>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.Utilities, centerComponent[java.awt.Component], void, null, compo>
<java.awt.Component, getBounds[], java.awt.Rectangle, org.jext.Utilities, centerComponentChild[java.awt.Component, java.awt.Component], void, null, parent>
<java.awt.Component, getBounds[], java.awt.Rectangle, org.jext.Utilities, centerComponentChild[java.awt.Component, java.awt.Component], void, null, child>
<java.awt.Component, setLocation[java.awt.Point], void, org.jext.Utilities, centerComponentChild[java.awt.Component, java.awt.Component], void, null, child>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.Utilities, classToFile[java.lang.String], java.lang.String, null, ','/')>
<java.lang.String, replace[char, char], java.lang.String, org.jext.Utilities, classToFile[java.lang.String], java.lang.String, null, name>
<java.lang.String, toCharArray[], char[], org.jext.Utilities, fileToClass[java.lang.String], java.lang.String, null, name>
<SAD, beep[], SADNESS, org.jext.Utilities, beep[], void, null, getMyToolkit()>
<SAD, getMyToolkit[], SADNESS, org.jext.Utilities, beep[], void, beep[], Jext>
<SAD, showWaitCursor[], SADNESS, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, ((JextFrame)comp)>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, comp>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, Cursor>
<SAD, hideWaitCursor[], SADNESS, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, ((JextFrame)comp)>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, comp>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.Utilities, setCursorOnWait[java.awt.Component, boolean], void, null, Cursor>
<SAD, getImage[], SADNESS, org.jext.Utilities, getIcon[java.lang.String, java.lang.Class], javax.swing.ImageIcon, null, getMyToolkit()>
<SAD, getMyToolkit[], SADNESS, org.jext.Utilities, getIcon[java.lang.String, java.lang.Class], javax.swing.ImageIcon, getImage[], Jext>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.Utilities, getIcon[java.lang.String, java.lang.Class], javax.swing.ImageIcon, null, source>
<SAD, getImage[], SADNESS, org.jext.Utilities, getImage[java.lang.String, java.lang.Class], java.awt.Image, null, getMyToolkit()>
<SAD, getMyToolkit[], SADNESS, org.jext.Utilities, getImage[java.lang.String, java.lang.Class], java.awt.Image, getImage[], Jext>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.Utilities, getImage[java.lang.String, java.lang.Class], java.awt.Image, null, source>
<java.lang.String, charAt[int], char, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, JDK_VERSION>
<org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, nothing here>
<org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, nothing here>
<javax.swing.JFileChooser, setMultiSelectionEnabled[boolean], void, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, chooser>
<javax.swing.JFileChooser, showDialog[java.awt.Component, java.lang.String], int, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, chooser>
<SAD, setProperty[], SADNESS, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, Jext>
<java.io.File, getParent[], java.lang.String, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, getSelectedFile()>
<javax.swing.JFileChooser, getSelectedFile[], java.io.File, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], getParent[], chooser>
<javax.swing.JFileChooser, getSelectedFiles[], java.io.File[], org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, chooser>
<java.io.File, getAbsolutePath[], java.lang.String, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, _files[i]>
<java.awt.Component, repaint[], void, org.jext.Utilities, chooseFiles[java.awt.Component, int], java.lang.String[], null, owner>
<org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, nothing here>
<javax.swing.JFileChooser, setMultiSelectionEnabled[boolean], void, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, chooser>
<javax.swing.JFileChooser, showDialog[java.awt.Component, java.lang.String], int, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, chooser>
<SAD, setProperty[], SADNESS, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, Jext>
<java.io.File, getParent[], java.lang.String, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, getSelectedFile()>
<javax.swing.JFileChooser, getSelectedFile[], java.io.File, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, getParent[], chooser>
<java.io.File, getAbsolutePath[], java.lang.String, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, getSelectedFile()>
<javax.swing.JFileChooser, getSelectedFile[], java.io.File, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, getAbsolutePath[], chooser>
<java.awt.Component, repaint[], void, org.jext.Utilities, chooseFile[java.awt.Component, int], java.lang.String, null, owner>
<SAD, getProperty[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, Jext>
<SAD, getHomeDirectory[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, Jext>
<SAD, getFileChooser[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, ((JextFrame)owner)>
<SAD, getBooleanProperty[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, Jext>
<SAD, getCurrentFile[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, getCurrentFile[], ((JextFrame)owner)>
<javax.swing.JFileChooser, setCurrentDirectory[java.io.File], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setCurrentDirectory[java.io.File], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogType[int], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogType[int], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setFileSelectionMode[int], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setFileHidingEnabled[boolean], void, org.jext.Utilities, getFileChooser[java.awt.Component, int], javax.swing.JFileChooser, null, chooser>
<org.jext.Utilities, createWhiteSpace[int, int], java.lang.String, org.jext.Utilities, createWhiteSpace[int], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, createWhiteSpace[int, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, createWhiteSpace[int, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, createWhiteSpace[int, int], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, createWhiteSpace[int, int], java.lang.String, null, buf>
<java.lang.String, length[], int, org.jext.Utilities, getLeadingWhiteSpace[java.lang.String], int, null, str>
<java.lang.String, charAt[int], char, org.jext.Utilities, getLeadingWhiteSpace[java.lang.String], int, null, str>
<java.lang.String, length[], int, org.jext.Utilities, getLeadingWhiteSpaceWidth[java.lang.String, int], int, null, str>
<java.lang.String, charAt[int], char, org.jext.Utilities, getLeadingWhiteSpaceWidth[java.lang.String, int], int, null, str>
<java.lang.String, length[], int, org.jext.Utilities, getRealLength[java.lang.String, int], int, null, str>
<java.lang.String, charAt[int], char, org.jext.Utilities, getRealLength[java.lang.String, int], int, null, str>
<java.lang.String, length[], int, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, indexOf[int], int, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, indexOf[int], int, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, substring[int], java.lang.String, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, length[], int, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.StringBuffer, setCharAt[int, char], void, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, buff>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, buff>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, charAt[int], char, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, substring[int, int], java.lang.String, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<java.lang.String, substring[int], java.lang.String, org.jext.Utilities, getShortStringOf[java.lang.String, int], java.lang.String, null, longString>
<org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, nothing here>
<org.jext.Utilities, getUserDirectory[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, nothing here>
<java.lang.String, trim[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.io.File, getParent[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, toString()))>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, getParent[], newPath>
<java.lang.String, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<org.jext.Utilities, getRoot[java.lang.String], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, separator)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.String, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<java.lang.String, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, change>
<org.jext.Utilities, getHomeDirectory[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<org.jext.Utilities, getHomeDirectory[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, charAt[int], char, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, length[], int, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, separator)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, constructPath[java.lang.String], java.lang.String, null, newPath>
<java.lang.String, length[], int, org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, null, path>
<java.io.File, listRoots[], java.io.File[], org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, null, file>
<java.lang.String, regionMatches[boolean, int, java.lang.String, int, int], boolean, org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, null, path>
<java.io.File, getPath[], java.lang.String, org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, null, roots[i]>
<java.lang.String, length[], int, org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, null, getPath()>
<java.io.File, getPath[], java.lang.String, org.jext.Utilities, beginsWithRoot[java.lang.String], boolean, length[], roots[i]>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.Utilities, getUserDirectory[], java.lang.String, null, System>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.Utilities, getHomeDirectory[], java.lang.String, null, System>
<java.io.File, listRoots[], java.io.File[], org.jext.Utilities, getRoot[java.lang.String], java.lang.String, null, file>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.Utilities, getRoot[java.lang.String], java.lang.String, null, path>
<java.io.File, getPath[], java.lang.String, org.jext.Utilities, getRoot[java.lang.String], java.lang.String, null, roots[i]>
<java.io.File, getPath[], java.lang.String, org.jext.Utilities, getRoot[java.lang.String], java.lang.String, null, roots[i]>
<org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], org.jext.Utilities, getWildCardMatches[java.lang.String, boolean], java.lang.String[], null, nothing here>
<java.lang.String, trim[], java.lang.String, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, s>
<org.jext.Utilities, getUserDirectory[], java.lang.String, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, nothing here>
<java.io.File, isAbsolute[], boolean, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, fPath>
<org.jext.Utilities, getUserDirectory[], java.lang.String, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, nothing here>
<java.io.File, list[], java.lang.String[], org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, fPath>
<org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, nothing here>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.io.File, getName[], java.lang.String, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, temp>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.util.ArrayList, size[], int, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, Arrays>
<java.lang.String, length[], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, string>
<java.lang.String, length[], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, charAt[int], char, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, indexOf[int, int], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, length[], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, substring(p,end)>
<java.lang.String, substring[int, int], java.lang.String, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, equals[java.lang.Object], pattern>
<java.lang.String, charAt[int], char, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, charAt[int], char, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, length[], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, string>
<org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, nothing here>
<java.lang.String, substring[int], java.lang.String, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, substring[int], java.lang.String, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, string>
<java.lang.String, charAt[int], char, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.lang.String, charAt[int], char, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, string>
<java.lang.String, indexOf[int, int], int, org.jext.Utilities, match[java.lang.String, java.lang.String], boolean, null, pattern>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.Utilities, sortStrings[java.lang.String[]], void, null, Arrays>
<org.jext.Utilities, listFiles[java.lang.String[], java.lang.String, boolean], java.io.File[], org.jext.Utilities, listFiles[java.lang.String[], boolean], java.io.File[], null, nothing here>
<org.jext.Utilities, getUserDirectory[], java.lang.String, org.jext.Utilities, listFiles[java.lang.String[], java.lang.String, boolean], java.io.File[], null, nothing here>
<java.io.File, isAbsolute[], boolean, org.jext.Utilities, listFiles[java.lang.String[], java.lang.String, boolean], java.io.File[], null, fPath>
<org.jext.Utilities, getUserDirectory[], java.lang.String, org.jext.Utilities, listFiles[java.lang.String[], java.lang.String, boolean], java.io.File[], null, nothing here>
<java.lang.String, length[], int, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, glob>
<java.lang.String, length[], int, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, glob>
<java.lang.String, charAt[int], char, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, glob>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, append('\\')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, append[char], _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Utilities, globToRE[java.lang.String], java.lang.String, null, _buf>
<SAD, start[], SADNESS, org.jext.Utilities, downloadFile[java.net.URL, java.lang.String, boolean, org.jext.HandlingRunnable], void, null, downloader>
<SAD, start[], SADNESS, org.jext.Utilities, copy[java.io.InputStream, java.io.OutputStream, boolean, org.jext.HandlingRunnable], void, null, copier>
<SAD, getProperty[], SADNESS, org.jext.Mode, Mode[java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.Mode, Mode[java.lang.String], void, null, Jext>
<java.lang.Class, getClassLoader[], java.lang.ClassLoader, org.jext.Mode, getTokenMarker[], org.jext.TokenMarker, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends org.jext.Mode>, org.jext.Mode, getTokenMarker[], org.jext.TokenMarker, getClassLoader[], nothing here>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.Mode, getTokenMarker[], org.jext.TokenMarker, null, Class>
<java.lang.ClassLoader, loadClass[java.lang.String], java.lang.Class<?>, org.jext.Mode, getTokenMarker[], org.jext.TokenMarker, null, loader>
<java.lang.Class, newInstance[], java.lang.Object, org.jext.Mode, getTokenMarker[], org.jext.TokenMarker, null, cls>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Mode, addPlugin[org.jext.Plugin], void, null, plugins>
<SAD, getImage[], SADNESS, org.jext.Mode, setPlugins[java.util.ArrayList], void, null, Utilities>
<SAD, getBooleanProperty[], SADNESS, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, Jext>
<java.lang.Object, getClass[], java.lang.Class<? extends javax.swing.JTabbedPane>, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, pane>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, cl>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, cl>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, m>
<java.lang.reflect.Field, getInt[java.lang.Object], int, org.jext.GUIUtilities, setScrollableTabbedPane[javax.swing.JTabbedPane], void, null, f>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.GUIUtilities, requestFocus[java.awt.Window, java.awt.Component], void, null, win>
<java.awt.Component, requestFocus[], void, java.awt.event.WindowAdapter, windowActivated[java.awt.event.WindowEvent], void, null, comp>
<java.awt.Window, removeWindowListener[java.awt.event.WindowListener], void, java.awt.event.WindowAdapter, windowActivated[java.awt.event.WindowEvent], void, null, win>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, win>
<SAD, setProperty[], SADNESS, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, String>
<SAD, setProperty[], SADNESS, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, String>
<java.awt.Component, getLocation[], java.awt.Point, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, win>
<SAD, setProperty[], SADNESS, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, String>
<SAD, setProperty[], SADNESS, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.GUIUtilities, saveGeometry[java.awt.Window, java.lang.String], void, null, String>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, win>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, Jext>
<java.awt.Toolkit, getScreenSize[], java.awt.Dimension, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, getToolkit()>
<java.awt.Window, getToolkit[], java.awt.Toolkit, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, getScreenSize[], win>
<java.awt.Window, setLocation[int, int], void, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, win>
<java.awt.Window, setSize[int, int], void, org.jext.GUIUtilities, loadGeometry[java.awt.Window, java.lang.String], void, null, win>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.GUIUtilities, message[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, message[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, message[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, name>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, message[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, message[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, name>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.GUIUtilities, error[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, error[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, error[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, name>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, error[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, error[java.awt.Frame, java.lang.String, java.lang.Object[]], void, null, name>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.GUIUtilities, parseColor[java.lang.String], java.awt.Color, null, name>
<java.awt.Color, decode[java.lang.String], java.awt.Color, org.jext.GUIUtilities, parseColor[java.lang.String], java.awt.Color, null, Color>
<java.lang.Integer, toHexString[int], java.lang.String, org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, null, Integer>
<java.awt.Color, getRGB[], int, org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, null, c>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, null, length())>
<java.lang.String, substring[int, int], java.lang.String, org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, null, "#000000">
<java.lang.String, length[], int, org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, null, colString>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, st>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<org.jext.GUIUtilities, parseColor[java.lang.String], java.awt.Color, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, GUIUtilities>
<java.lang.String, substring[int], java.lang.String, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<java.lang.String, length[], int, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<java.lang.String, charAt[int], char, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<java.lang.String, charAt[int], char, org.jext.GUIUtilities, parseStyle[java.lang.String], org.jext.SyntaxStyle, null, s>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, buf>
<org.jext.GUIUtilities, getColorHexString[java.awt.Color], java.lang.String, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, nothing here>
<SAD, getColor[], SADNESS, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, style>
<SAD, isPlain[], SADNESS, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, style>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, buf>
<SAD, isItalic[], SADNESS, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, style>
<SAD, isBold[], SADNESS, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, style>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.GUIUtilities, getStyleString[org.jext.SyntaxStyle], java.lang.String, null, buf>
<org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, org.jext.GUIUtilities, loadMenu[java.lang.String], javax.swing.JMenu, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, Jext>
<java.lang.String, indexOf[int], int, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, label>
<java.lang.String, length[], int, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, label>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, substring(0,index)>
<java.lang.String, substring[int, int], java.lang.String, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, concat[java.lang.String], label>
<java.lang.String, substring[int], java.lang.String, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, label>
<SAD, setMnemonic[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, menu>
<java.lang.Character, toLowerCase[char], char, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, Character>
<java.lang.String, charAt[int], char, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, label>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, Jext>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, st>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, st>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, menuItemName>
<SAD, getFlatMenus[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, Jext>
<SAD, add[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, getPopupMenu()>
<SAD, getPopupMenu[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, add[], menu>
<SAD, addSeparator[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, getPopupMenu()>
<SAD, getPopupMenu[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, addSeparator[], menu>
<org.jext.GUIUtilities, loadMenuItem[java.lang.String], javax.swing.JMenuItem, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, nothing here>
<SAD, add[], SADNESS, org.jext.GUIUtilities, loadMenu[java.lang.String, boolean], javax.swing.JMenu, null, menu>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String], javax.swing.JMenuItem, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String], javax.swing.JMenuItem, null, action>
<java.util.Date, toString[], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String], javax.swing.JMenuItem, null, Date())>
<org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, org.jext.GUIUtilities, loadMenuItem[java.lang.String], javax.swing.JMenuItem, null, nothing here>
<org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean], javax.swing.JMenuItem, null, nothing here>
<java.lang.String, indexOf[int], int, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, Jext>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, action>
<java.lang.String, length[], int, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, substring(0,index)>
<java.lang.String, substring[int, int], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, concat[java.lang.String], label>
<java.lang.String, substring[int], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<SAD, setMnemonic[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<java.lang.Character, toLowerCase[char], char, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, Character>
<java.lang.String, charAt[int], char, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<SAD, getIcon[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, Utilities>
<SAD, concat[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, icons"))>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, picture>
<SAD, getProperty[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<SAD, getAction[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<SAD, addActionListener[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<SAD, setEnabled[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<java.lang.String, length[], int, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<java.lang.String, length[], int, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<java.lang.String, charAt[int], char, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, label>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, _buf>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, action>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, _buf>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, menuItemsActions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, menuItemsActions>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, _buf>
<SAD, setEnabled[], SADNESS, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, mi>
<SAD, getAction[], SADNESS, org.jext.OneClickAction, OneClickAction[java.lang.String, java.lang.String], void, null, Jext>
<SAD, setOneClick[], SADNESS, org.jext.OneClickAction, actionPerformed[java.awt.event.ActionEvent], void, null, getTextArea(evt)>
<SAD, getTextArea[], SADNESS, org.jext.OneClickAction, actionPerformed[java.awt.event.ActionEvent], void, setOneClick[], nothing here>
<SAD, actionPerformed[], SADNESS, org.jext.OneClickAction, oneClickActionPerformed[java.awt.event.ActionEvent], void, null, action>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, persistentToolBar>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, persistentToolBar>
<javax.swing.JToolBar, setBorderPainted[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, persistentToolBar>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, persistentToolBar>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, transientToolBar>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, transientToolBar>
<javax.swing.JToolBar, setBorderPainted[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, transientToolBar>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.toolbar.JextToolBar, JextToolBar[org.jext.toolbar.JextFrame], void, null, transientToolBar>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.Box, createHorizontalStrut[int], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<SAD, getProperty[], SADNESS, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, iFind>
<SAD, getBooleanProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setText[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getSource())>
<java.util.EventObject, getSource[], java.lang.Object, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, setText[], evt>
<SAD, getProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setText[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getSource())>
<java.util.EventObject, getSource[], java.lang.Object, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, setText[], evt>
<SAD, getProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setProperty[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, box>
<javax.swing.Box, createVerticalGlue[], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, box>
<javax.swing.Box, createVerticalGlue[], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.Box, createHorizontalStrut[int], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, boxx>
<javax.swing.Box, createVerticalGlue[], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, boxx>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, boxx>
<javax.swing.Box, createVerticalGlue[], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, Box>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addMisc[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JToolBar, getComponentAtIndex[int], java.awt.Component, org.jext.toolbar.JextToolBar, setGrayed[boolean], void, null, buttonsPanel>
<SAD, setGrayed[], SADNESS, org.jext.toolbar.JextToolBar, setGrayed[boolean], void, null, ((JextButton)c)>
<SAD, setMargin[], SADNESS, org.jext.toolbar.JextToolBar, addButton[org.jext.toolbar.JextButton], void, null, button>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.toolbar.JextToolBar, addButton[org.jext.toolbar.JextButton], void, null, buttonsPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.toolbar.JextToolBar, addButtonSeparator[], void, null, buttonsPanel>
<java.awt.Container, removeAll[], void, org.jext.toolbar.JextToolBar, reset[], void, null, transientToolBar>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, Cursor>
<javax.swing.JTextField, addActionListener[java.awt.event.ActionListener], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, fm>
<javax.swing.JTextField, getPreferredSize[], java.awt.Dimension, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, fm>
<javax.swing.JTextField, getPreferredSize[], java.awt.Dimension, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.toolbar.FastFind, FastFind[org.jext.toolbar.JextFrame], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, Jext>
<SAD, getTextArea[], SADNESS, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, parent>
<SAD, setCaretPosition[], SADNESS, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, textArea>
<org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JComponent, requestFocus[], void, org.jext.toolbar.FastFind, keyReleased[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.toolbar.FastFind, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, getTextArea[], SADNESS, org.jext.toolbar.FastFind, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, requestFocus[], SADNESS, org.jext.toolbar.FastFind, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, org.jext.toolbar.FastFind, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, setFindPattern[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, Search>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, nothing here>
<SAD, find[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, Search>
<SAD, getCaretPosition[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, textArea>
<SAD, getName[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, textArea>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, Jext>
<SAD, setCaretPosition[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, textArea>
<org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, nothing here>
<SAD, size[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, modes>
<SAD, getUserModeName[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, null, get(i))>
<SAD, get[], SADNESS, org.jext.toolbar.FastFind, find[org.jext.toolbar.JextTextArea, boolean], void, getUserModeName[], modes>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, nothing here>
<SAD, addJextListener[], SADNESS, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, parent>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, nothing here>
<org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, parent>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.toolbar.FastSyntax, FastSyntax[org.jext.toolbar.JextFrame], void, null, nothing here>
<SAD, getWhat[], SADNESS, org.jext.toolbar.FastSyntax, jextEventFired[org.jext.toolbar.JextEvent], void, null, evt>
<org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, org.jext.toolbar.FastSyntax, jextEventFired[org.jext.toolbar.JextEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.toolbar.FastSyntax, jextEventFired[org.jext.toolbar.JextEvent], void, null, evt>
<SAD, getProperty[], SADNESS, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, null, Jext>
<SAD, getColorizingMode[], SADNESS, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, null, _mode>
<SAD, getModeName[], SADNESS, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, null, get(i))>
<SAD, get[], SADNESS, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, getModeName[], modes>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.toolbar.FastSyntax, selectMode[org.jext.toolbar.JextTextArea], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, getModeName[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, get(getSelectedIndex()))>
<SAD, get[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, getModeName[], modes>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, mode>
<SAD, getColorizingMode[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setColorizing[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, get[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, modes>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, grabFocus[], SADNESS, org.jext.toolbar.FastSyntax, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.RegisterablePlugin, register[org.jext.JextFrame], void, null, System>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.RegisterablePlugin, register[org.jext.JextFrame], void, null, System>
<SAD, interrupt[], SADNESS, org.jext.Jext, stopAutoCheck[], void, null, check>
<SAD, getName[], SADNESS, org.jext.Jext, addAction[org.jext.MenuAction], void, null, action>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, addAction[org.jext.MenuAction], void, null, actionHash>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, addAction[org.jext.MenuAction], void, null, nothing here>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.Jext, addAction[org.jext.MenuAction], void, null, name>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addAction[org.jext.MenuAction], void, null, inputHandler>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, addPythonAction[java.lang.String, java.lang.String, boolean], void, addKeyBinding[], pythonActionHash>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, addPythonAction[java.lang.String, java.lang.String, boolean], void, null, nothing here>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.Jext, addPythonAction[java.lang.String, java.lang.String, boolean], void, null, name>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addPythonAction[java.lang.String, java.lang.String, boolean], void, null, inputHandler>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, null, actionHash>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, null, pythonActionHash>
<SAD, addDefaultKeyBindings[], SADNESS, org.jext.Jext, initActions[], void, null, inputHandler>
<org.jext.Jext, loadXMLActions[java.io.InputStream, java.lang.String], void, org.jext.Jext, initActions[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initActions[], void, null, class>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, addAction[org.jext.MenuAction], void, org.jext.Jext, initActions[], void, null, nothing here>
<org.jext.Jext, loadXMLOneClickActions[java.io.InputStream, java.lang.String], void, org.jext.Jext, initActions[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initActions[], void, null, class>
<org.jext.Jext, addJextKeyBindings[], void, org.jext.Jext, initActions[], void, null, nothing here>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, org.jext.Jext, addJextKeyBindings[], void, null, nothing here>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, org.jext.Jext, addJextKeyBindings[], void, null, nothing here>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, charAt[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, JDK_VERSION>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<SAD, addKeyBinding[], SADNESS, org.jext.Jext, addJextKeyBindings[], void, null, inputHandler>
<org.jext.Jext, loadPlugins[java.lang.String], void, org.jext.Jext, initPlugins[], void, null, nothing here>
<org.jext.Jext, loadPlugins[java.lang.String], void, org.jext.Jext, initPlugins[], void, null, nothing here>
<java.util.ArrayList, size[], int, org.jext.Jext, assocPluginsToModes[], void, null, plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, assocPluginsToModes[], void, null, plugins>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, assocPluginsToModes[], void, null, nothing here>
<SAD, getName[], SADNESS, org.jext.Jext, assocPluginsToModes[], void, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.Jext, assocPluginsToModes[], void, getName[], plugin>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.Jext, assocPluginsToModes[], void, null, tok>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.Jext, assocPluginsToModes[], void, null, tok>
<org.jext.Jext, getMode[java.lang.String], org.jext.Mode, org.jext.Jext, assocPluginsToModes[], void, null, nothing here>
<SAD, addPlugin[], SADNESS, org.jext.Jext, assocPluginsToModes[], void, null, mode>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, loadPlugins[java.lang.String], void, null, out>
<org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, org.jext.Jext, loadPlugins[java.lang.String], void, null, nothing here>
<java.io.File, exists[], boolean, org.jext.Jext, loadPlugins[java.lang.String], void, null, file>
<java.io.File, isDirectory[], boolean, org.jext.Jext, loadPlugins[java.lang.String], void, null, file>
<java.io.File, list[], java.lang.String[], org.jext.Jext, loadPlugins[java.lang.String], void, null, file>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.Jext, loadPlugins[java.lang.String], void, null, toLowerCase()>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.Jext, loadPlugins[java.lang.String], void, endsWith[java.lang.String], plugin>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, loadPlugins[java.lang.String], void, null, err>
<org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, org.jext.Jext, loadPlugins[java.lang.String], void, null, nothing here>
<java.lang.Throwable, printStackTrace[], void, org.jext.Jext, loadPlugins[java.lang.String], void, null, io>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, plugins>
<SAD, start[], SADNESS, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, plugin>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, t>
<SAD, registerSkinFactory[], SADNESS, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, SkinManager>
<java.util.ArrayList, size[], int, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, null, plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, null, plugins>
<SAD, equalsIgnoreCase[], SADNESS, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, null, getName()>
<SAD, getName[], SADNESS, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, equalsIgnoreCase[], getClass()>
<SAD, getClass[], SADNESS, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, getName[], p>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Jext, getPlugins[], org.jext.Plugin[], null, plugins>
<org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, org.jext.Jext, newWindow[java.lang.String[]], org.jext.JextFrame, null, nothing here>
<org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, org.jext.Jext, newWindow[], org.jext.JextFrame, null, nothing here>
<SAD, open[], SADNESS, org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, null, builtTextArea>
<SAD, setVisible[], SADNESS, org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, null, builtTextArea>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, null, instances>
<java.util.ArrayList, size[], int, org.jext.Jext, getWindowsCount[], int, null, instances>
<java.util.ArrayList, size[], int, org.jext.Jext, propertiesChanged[], void, null, instances>
<SAD, loadProperties[], SADNESS, org.jext.Jext, propertiesChanged[], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, propertiesChanged[], void, loadProperties[], instances>
<java.util.ArrayList, size[], int, org.jext.Jext, recentChanged[org.jext.JextFrame], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, recentChanged[org.jext.JextFrame], void, null, instances>
<SAD, reloadRecent[], SADNESS, org.jext.Jext, recentChanged[org.jext.JextFrame], void, null, listener>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.jext.Jext, getMyToolkit[], java.awt.Toolkit, null, Toolkit>
<java.util.Properties, store[java.io.OutputStream, java.lang.String], void, org.jext.Jext, saveProps[], void, null, props>
<java.io.OutputStream, close[], void, org.jext.Jext, saveProps[], void, null, out>
<org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, org.jext.Jext, saveXMLProps[java.lang.String], void, null, nothing here>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _out>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _out>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.util.Date, toString[], java.lang.String, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, (new Date())>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _out>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, description>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _out>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<org.jext.Jext, setProperty[java.lang.String, java.lang.String], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, nothing here>
<java.util.Hashtable, keys[], java.util.Enumeration<java.lang.Object>, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, props>
<java.util.Hashtable, elements[], java.util.Enumeration<java.lang.Object>, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, props>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, e>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, k>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, e>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _e>
<java.lang.String, charAt[int], char, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _e>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.lang.StringBuffer, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, buf>
<java.io.BufferedWriter, newLine[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<java.lang.String, length[], int, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, _out>
<java.io.BufferedWriter, close[], void, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, out>
<SAD, read[], SADNESS, org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, null, XPropertiesReader>
<SAD, read[], SADNESS, org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String, boolean], void, null, XPropertiesReader>
<SAD, read[], SADNESS, org.jext.Jext, loadXMLActions[java.io.InputStream, java.lang.String], void, null, PyActionsReader>
<SAD, read[], SADNESS, org.jext.Jext, loadXMLOneClickActions[java.io.InputStream, java.lang.String], void, null, OneClickActionsReader>
<org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, org.jext.Jext, getLanguageStream[java.io.InputStream, java.lang.String], java.io.InputStream, null, nothing here>
<java.util.zip.ZipFile, getInputStream[java.util.zip.ZipEntry], java.io.InputStream, org.jext.Jext, getLanguageStream[java.io.InputStream, java.lang.String], java.io.InputStream, null, languagePack>
<java.util.ArrayList, size[], int, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, null, languageEntries>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, null, languageEntries>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, null, getName()>
<java.util.zip.ZipEntry, getName[], java.lang.String, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, equalsIgnoreCase[java.lang.String], entry>
<java.util.Properties, load[java.io.InputStream], void, org.jext.Jext, loadProps[java.io.InputStream], void, null, props>
<java.io.InputStream, close[], void, org.jext.Jext, loadProps[java.io.InputStream], void, null, in>
<java.io.File, exists[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, mkdir[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, exists[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, mkdir[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, exists[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, mkdir[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, exists[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, mkdir[], boolean, org.jext.Jext, initDirectories[], void, null, dir>
<java.io.File, exists[], boolean, org.jext.Jext, initProperties[], void, null, lang>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.Jext, initProperties[], void, null, reader>
<java.io.BufferedReader, close[], void, org.jext.Jext, initProperties[], void, null, reader>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, initProperties[], void, null, language>
<java.io.File, exists[], boolean, org.jext.Jext, initProperties[], void, null, langPack>
<java.util.zip.ZipFile, entries[], java.util.Enumeration<? extends java.util.zip.ZipEntry>, org.jext.Jext, initProperties[], void, null, languagePack>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.Jext, initProperties[], void, null, entries>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initProperties[], void, null, languageEntries>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.Jext, initProperties[], void, null, entries>
<org.jext.Jext, setLanguage[java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.io.File, delete[], boolean, org.jext.Jext, initProperties[], void, null, lang>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, initProperties[], void, null, pyProps>
<SAD, initialize[], SADNESS, org.jext.Jext, initProperties[], void, null, PythonInterpreter>
<java.lang.System, getProperties[], java.util.Properties, org.jext.Jext, initProperties[], void, null, System>
<org.jext.Jext, initPlugins[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.String, compareTo[java.lang.String], int, org.jext.Jext, initProperties[], void, null, BUILD>
<java.io.File, exists[], boolean, org.jext.Jext, initProperties[], void, null, userSettings>
<java.io.File, delete[], boolean, org.jext.Jext, initProperties[], void, null, userSettings>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<org.jext.Jext, loadXMLProps[java.io.InputStream, java.lang.String], void, org.jext.Jext, initProperties[], void, null, nothing here>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.Jext, initProperties[], void, null, class>
<SAD, reloadPluginsProperties[], SADNESS, org.jext.Jext, initProperties[], void, null, JARClassLoader>
<org.jext.Jext, initModes[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<SAD, load[], SADNESS, org.jext.Jext, initProperties[], void, null, Search>
<SAD, charAt[], SADNESS, org.jext.Jext, initProperties[], void, null, JDK_VERSION>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.Jext, initProperties[], void, null, Class>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, org.jext.Jext, initProperties[], void, null, cl>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, org.jext.Jext, initProperties[], void, null, m>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, initProperties[], void, null, getProperties()>
<java.lang.System, getProperties[], java.util.Properties, org.jext.Jext, initProperties[], void, put[java.lang.Object, java.lang.Object], System>
<java.lang.System, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, initProperties[], void, null, System>
<org.jext.Jext, initActions[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<SAD, initPlugins[], SADNESS, org.jext.Jext, initProperties[], void, null, JARClassLoader>
<org.jext.Jext, initUI[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<org.jext.Jext, sortModes[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<org.jext.Jext, assocPluginsToModes[], void, org.jext.Jext, initProperties[], void, null, nothing here>
<SAD, getWildCardMatches[], SADNESS, org.jext.Jext, executeScripts[org.jext.JextFrame], void, null, Utilities>
<SAD, runScript[], SADNESS, org.jext.Jext, executeScripts[org.jext.JextFrame], void, null, Run>
<SAD, getWildCardMatches[], SADNESS, org.jext.Jext, executeScripts[org.jext.JextFrame], void, null, Utilities>
<SAD, runScript[], SADNESS, org.jext.Jext, executeScripts[org.jext.JextFrame], void, null, Run>
<java.util.ArrayList, size[], int, org.jext.Jext, sortModes[], void, null, modes>
<SAD, getUserModeName[], SADNESS, org.jext.Jext, sortModes[], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, getUserModeName[], modes>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.Jext, sortModes[], void, null, Arrays>
<SAD, equals[], SADNESS, org.jext.Jext, sortModes[], void, null, getUserModeName()>
<SAD, getUserModeName[], SADNESS, org.jext.Jext, sortModes[], void, equals[], get(j))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, getUserModeName[], modes>
<java.util.ArrayList, size[], int, org.jext.Jext, sortModes[], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, sortModes[], void, null, v>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, null, modes>
<SAD, applySelectedSkin[], SADNESS, org.jext.Jext, initUI[], void, null, SkinManager>
<org.jext.Jext, getBooleanProperty[java.lang.String], boolean, org.jext.Jext, initUI[], void, null, nothing here>
<org.jext.Jext, getBooleanProperty[java.lang.String], boolean, org.jext.Jext, initUI[], void, null, nothing here>
<SAD, setRollover[], SADNESS, org.jext.Jext, initUI[], void, null, JextButton>
<org.jext.Jext, getBooleanProperty[java.lang.String], boolean, org.jext.Jext, initUI[], void, null, nothing here>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, initModes[], void, null, nothing here>
<java.util.StringTokenizer, countTokens[], int, org.jext.Jext, initModes[], void, null, _tok>
<java.util.StringTokenizer, countTokens[], int, org.jext.Jext, initModes[], void, null, _tok>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.Jext, initModes[], void, null, _tok>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initModes[], void, null, modes>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.Jext, initModes[], void, null, _tok>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initModes[], void, null, modesFileFilters>
<java.util.ArrayList, size[], int, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, null, modes>
<SAD, equalsIgnoreCase[], SADNESS, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, null, getModeName()>
<SAD, getModeName[], SADNESS, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, equalsIgnoreCase[], _mode>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addMode[org.jext.Mode], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addMode[org.jext.Mode], void, null, modesFileFilters>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, setProperty[java.lang.String, java.lang.String], void, null, props>
<org.jext.Jext, getProperty[java.lang.String], java.lang.String, org.jext.Jext, getBooleanProperty[java.lang.String], boolean, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, getBooleanProperty[java.lang.String], boolean, null, p>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, getBooleanProperty[java.lang.String], boolean, null, p>
<org.jext.Jext, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getBooleanProperty[java.lang.String, java.lang.String], boolean, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, getBooleanProperty[java.lang.String, java.lang.String], boolean, null, p>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, getBooleanProperty[java.lang.String, java.lang.String], boolean, null, p>
<java.util.Properties, getProperty[java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String], java.lang.String, null, props>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.String], java.lang.String, null, props>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, props>
<java.text.MessageFormat, format[java.lang.String, java.lang.Object[]], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, MessageFormat>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, props>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, defaultProps>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, props>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, props>
<java.util.ArrayList, toArray[], java.lang.Object[], org.jext.Jext, exit[], void, null, instances>
<org.jext.Jext, closeToQuit[org.jext.JextFrame], void, org.jext.Jext, exit[], void, null, nothing here>
<java.lang.System, exit[int], void, org.jext.Jext, finalCleanupAndExit[], void, null, System>
<org.jext.Jext, getPlugins[], org.jext.Plugin[], org.jext.Jext, stopPlugins[], void, null, nothing here>
<SAD, stop[], SADNESS, org.jext.Jext, stopPlugins[], void, null, plugins[i]>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, stopPlugins[], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.Jext, stopPlugins[], void, null, t>
<org.jext.Jext, closeToQuit[org.jext.JextFrame, boolean], void, org.jext.Jext, closeToQuit[org.jext.JextFrame], void, null, nothing here>
<SAD, closeToQuit[], SADNESS, org.jext.Jext, closeToQuit[org.jext.JextFrame, boolean], void, null, frame>
<org.jext.Jext, getWindowsCount[], int, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<SAD, fireJextEvent[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, frame>
<SAD, fireJextEvent[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, frame>
<SAD, closeWindow[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, frame>
<org.jext.Jext, getWindowsCount[], int, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<org.jext.Jext, isRunningBg[], boolean, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<org.jext.Jext, stopServer[], void, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<SAD, save[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, Search>
<org.jext.Jext, isRunningBg[], boolean, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<org.jext.Jext, stopPlugins[], void, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<SAD, saveConsole[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, frame>
<SAD, saveGeometry[], SADNESS, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, GUIUtilities>
<org.jext.Jext, saveXMLProps[java.lang.String], void, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<java.lang.System, gc[], void, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, System>
<org.jext.Jext, isRunningBg[], boolean, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, nothing here>
<java.lang.System, exit[int], void, org.jext.Jext, closeWindow[org.jext.JextFrame], void, null, System>
<SAD, setProgress[], SADNESS, org.jext.Jext, setSplashProgress[int], void, null, splash>
<SAD, setText[], SADNESS, org.jext.Jext, setSplashText[java.lang.String], void, null, splash>
<SAD, dispose[], SADNESS, org.jext.Jext, killSplashScreen[], void, null, splash>
<SAD, stop[], SADNESS, org.jext.Jext, stopServer[], void, null, jextLoader>
<java.io.File, exists[], boolean, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, security>
<java.lang.Boolean, booleanValue[], boolean, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, readLine())>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, booleanValue[], reader>
<java.io.BufferedReader, close[], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, reader>
<java.io.File, exists[], boolean, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, authorizationKey>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, Integer>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, reader>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, reader>
<java.io.BufferedReader, close[], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, reader>
<java.net.Socket, getOutputStream[], java.io.OutputStream, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, client>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, _args>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, _args>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, _args>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, _args>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, append(':')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, append[java.lang.String], _args>
<java.io.PrintWriter, write[java.lang.String], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, writer>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, _args>
<java.io.PrintWriter, flush[], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, writer>
<java.io.PrintWriter, close[], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, writer>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, out>
<java.net.Socket, close[], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, client>
<java.lang.System, exit[int], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, System>
<java.io.File, delete[], boolean, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, authorizationKey>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, err>
<java.lang.System, exit[int], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, System>
<java.io.PrintStream, println[java.lang.String], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, err>
<java.lang.System, exit[int], void, org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, null, System>
<java.io.File, exists[], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, showbg>
<java.lang.Boolean, booleanValue[], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, readLine())>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], booleanValue[], reader>
<java.io.BufferedReader, close[], void, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, reader>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, "-bg">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, "-kill">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, "-showbg">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, "-debug">
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, newArgs>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, newArgs>
<java.lang.System, setErr[java.io.PrintStream], void, org.jext.Jext, main[java.lang.String[]], void, null, System>
<org.jext.Jext, initDirectories[], void, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, loadInSingleJVMInstance[java.lang.String[]], void, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, initProperties[], void, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, isRunningBg[], boolean, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, newWindow[java.lang.String[]], org.jext.JextFrame, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<org.jext.Jext, getBooleanProperty[java.lang.String], boolean, org.jext.Jext, main[java.lang.String[]], void, null, nothing here>
<SAD, getIcon[], SADNESS, org.jext.Jext, main[java.lang.String[]], void, null, Utilities>
<SAD, getIcon[], SADNESS, org.jext.Jext, main[java.lang.String[]], void, null, Utilities>
<SAD, setScrollableTabbedPane[], SADNESS, org.jext.JextTabbedPane, JextTabbedPane[org.jext.JextFrame], void, null, GUIUtilities>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.JextTabbedPane, JextTabbedPane[org.jext.JextFrame], void, null, nothing here>
<javax.swing.JTabbedPane, addChangeListener[javax.swing.event.ChangeListener], void, org.jext.JextTabbedPane, JextTabbedPane[org.jext.JextFrame], void, null, nothing here>
<java.lang.Thread, start[], void, org.jext.JextTabbedPane.PopupMenu, PopupMenu[], void, null, t>
<SAD, read[], SADNESS, org.jext.JextTabbedPane.PopupMenu, run[], void, null, XPopupReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.JextTabbedPane.PopupMenu, run[], void, null, class>
<SAD, getFlatMenus[], SADNESS, org.jext.JextTabbedPane.PopupMenu, run[], void, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.JextTabbedPane.PopupMenu, run[], void, null, popupMenu>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, org.jext.JextTabbedPane.PopupMenu, run[], void, null, LineBorder>
<org.jext.JextTabbedPane$PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, org.jext.JextTabbedPane.PopupMenu, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<org.jext.JextTabbedPane$PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, org.jext.JextTabbedPane.PopupMenu, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, isPopupTrigger[], boolean, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, me>
<java.awt.event.MouseEvent, getX[], int, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, me>
<SAD, getSize[], SADNESS, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, parent>
<SAD, getLocationOnScreen[], SADNESS, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, parent>
<SAD, getInsets[], SADNESS, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, parent>
<java.awt.Component, getLocationOnScreen[], java.awt.Point, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, this>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, popupMenu>
<javax.swing.JPopupMenu, show[java.awt.Component, int, int], void, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, popupMenu>
<java.awt.event.MouseEvent, getY[], int, org.jext.JextTabbedPane.PopupMenu, showPopupIfNeeded[java.awt.event.MouseEvent], void, null, me>
<javax.swing.JTabbedPane, indexOfComponent[java.awt.Component], int, org.jext.JextTabbedPane, setCleanIcon[org.jext.JextTextArea], void, null, nothing here>
<javax.swing.JTabbedPane, setIconAt[int, javax.swing.Icon], void, org.jext.JextTabbedPane, setCleanIcon[org.jext.JextTextArea], void, null, nothing here>
<javax.swing.JTabbedPane, indexOfComponent[java.awt.Component], int, org.jext.JextTabbedPane, setDirtyIcon[org.jext.JextTextArea], void, null, nothing here>
<javax.swing.JTabbedPane, setIconAt[int, javax.swing.Icon], void, org.jext.JextTabbedPane, setDirtyIcon[org.jext.JextTextArea], void, null, nothing here>
<org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, org.jext.JextTabbedPane, addTab[java.lang.String, java.awt.Component], void, null, nothing here>
<org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, org.jext.JextTabbedPane, addTab[java.lang.String, java.awt.Component], void, null, nothing here>
<SAD, isDirty[], SADNESS, org.jext.JextTabbedPane, addTab[java.lang.String, java.awt.Component], void, null, ((JextTextArea)component)>
<org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, org.jext.JextTabbedPane, removeTabAt[int], void, null, nothing here>
<java.awt.Component, getName[], java.lang.String, org.jext.JextTabbedPane, removeTabAt[int], void, null, getComponentAt(index)>
<javax.swing.JTabbedPane, getComponentAt[int], java.awt.Component, org.jext.JextTabbedPane, removeTabAt[int], void, getName[], nothing here>
<org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, org.jext.JextTabbedPane, removeTabAt[int], void, null, nothing here>
<org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, org.jext.JextTabbedPane, setTitleAt[int, java.lang.String], void, null, nothing here>
<java.awt.Component, getName[], java.lang.String, org.jext.JextTabbedPane, setTitleAt[int, java.lang.String], void, null, getComponentAt(index)>
<javax.swing.JTabbedPane, getComponentAt[int], java.awt.Component, org.jext.JextTabbedPane, setTitleAt[int, java.lang.String], void, getName[], nothing here>
<org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, org.jext.JextTabbedPane, setTitleAt[int, java.lang.String], void, null, nothing here>
<org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, org.jext.JextTabbedPane, setTitleAt[int, java.lang.String], void, null, nothing here>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, null, nothing here>
<java.awt.Component, getName[], java.lang.String, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, null, getComponentAt(i)>
<javax.swing.JTabbedPane, getComponentAt[int], java.awt.Component, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, getName[], nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, null, _name>
<java.util.HashMap, remove[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, null, fileNames>
<SAD, getProperty[], SADNESS, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, Jext>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.lang.Integer, intValue[], int, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, _integer>
<SAD, getProperty[], SADNESS, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, null, Jext>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, null, fileNames>
<java.lang.Integer, intValue[], int, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, null, _integer>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, null, append(')')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, toString[], append(_val)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, append[char], append(" (")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, append[int], (new StringBuffer(title))>
<javax.swing.JTabbedPane, getSelectedIndex[], int, org.jext.JextTabbedPane, nextTab[], void, null, nothing here>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.JextTabbedPane, nextTab[], void, null, nothing here>
<javax.swing.JTabbedPane, setSelectedIndex[int], void, org.jext.JextTabbedPane, nextTab[], void, null, nothing here>
<javax.swing.JTabbedPane, getSelectedIndex[], int, org.jext.JextTabbedPane, previousTab[], void, null, nothing here>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.JextTabbedPane, previousTab[], void, null, nothing here>
<javax.swing.JTabbedPane, setSelectedIndex[int], void, org.jext.JextTabbedPane, previousTab[], void, null, nothing here>
<java.util.HashMap, clear[], void, org.jext.JextTabbedPane, removeAll[], void, null, fileNames>
<javax.swing.JTabbedPane, getSelectedComponent[], java.awt.Component, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, nothing here>
<SAD, setTitle[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<javax.swing.JTabbedPane, getTitleAt[int], java.lang.String, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, nothing here>
<javax.swing.JTabbedPane, indexOfComponent[java.awt.Component], int, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, nothing here>
<SAD, getName[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, getName[], parent>
<SAD, disableSplittedTextArea[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<SAD, setParentTitle[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, textArea>
<SAD, updateStatus[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<SAD, setStatus[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<SAD, updateSplittedTextArea[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, parent>
<SAD, grabFocus[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, textArea>
<SAD, requestFocus[], SADNESS, org.jext.JextTabbedPane, stateChanged[javax.swing.event.ChangeEvent], void, null, textArea>
<SAD, connect[], SADNESS, org.jext.protocol.jextresource.Handler, openConnection[java.net.URL], java.net.URLConnection, null, c>
<java.net.URL, getFile[], java.lang.String, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, url>
<java.lang.String, indexOf[int, int], int, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, file>
<java.lang.String, charAt[int], char, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, file>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, Integer>
<java.lang.String, substring[int, int], java.lang.String, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, file>
<SAD, getResourceAsStream[], SADNESS, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, getClassLoader(pluginIndex)>
<SAD, getClassLoader[], SADNESS, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, getResourceAsStream[], JARClassLoader>
<java.lang.String, substring[int], java.lang.String, org.jext.protocol.jextresource.PluginResURLConnection, PluginResURLConnection[java.net.URL], void, null, file>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, name>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, getFile()>
<java.net.URL, getFile[], java.lang.String, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, toLowerCase[], getURL()>
<java.net.URLConnection, getURL[], java.net.URL, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, getFile[], nothing here>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.protocol.jextresource.PluginResURLConnection, getHeaderField[java.lang.String], java.lang.String, null, filename>
<java.awt.Font, getName[], java.lang.String, org.jext.print.PrintingOptions, PrintingOptions[boolean, boolean, boolean, boolean, java.awt.Font, java.awt.print.PageFormat], void, null, pageFont_>
<java.awt.Font, getSize[], int, org.jext.print.PrintingOptions, PrintingOptions[boolean, boolean, boolean, boolean, java.awt.Font, java.awt.print.PageFormat], void, null, pageFont_>
<java.awt.Font, getName[], java.lang.String, org.jext.print.PrintingOptions, setPageFont[java.awt.Font], void, null, pageFont_>
<java.awt.Font, getSize[], int, org.jext.print.PrintingOptions, setPageFont[java.awt.Font], void, null, pageFont_>
<SAD, getPrintJob[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, getPrintJob[], parent>
<SAD, getName[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, textArea>
<java.awt.PrintJob, getPageResolution[], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, job>
<SAD, getBooleanProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<SAD, getName[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, textArea>
<java.util.Date, toString[], java.lang.String, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Date()>
<SAD, getElementCount[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, getElementCount[], getDocument()>
<SAD, getDocument[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, getDefaultRootElement[], textArea>
<SAD, getProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<SAD, getStyles[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, getStyles[], textArea>
<java.awt.PrintJob, getPageDimension[], java.awt.Dimension, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, job>
<java.lang.Math, ceil[double], double, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Math>
<java.lang.Math, log[double], double, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Math>
<java.lang.Math, log[double], double, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Math>
<java.awt.PrintJob, getGraphics[], java.awt.Graphics, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, job>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, getFontMetrics[], java.awt.FontMetrics, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.FontMetrics, charWidth[char], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<SAD, getTabSize[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.FontMetrics, getDescent[], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.lang.String, valueOf[int], java.lang.String, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, String>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.FontMetrics, charWidth[char], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, nothing here>
<SAD, getTokenMarker[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.FontMetrics, getAscent[], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<SAD, getProperty[], SADNESS, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, Jext>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, fm>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.Graphics, dispose[], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, gfx>
<java.awt.PrintJob, end[], void, org.jext.print.PrintSyntax, print[org.jext.print.JextFrame, org.jext.print.JextTextArea], void, null, job>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<SAD, getLineText[], SADNESS, org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, null, textArea>
<SAD, paintSyntaxLine[], SADNESS, org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, null, SyntaxUtilities>
<SAD, markTokens[], SADNESS, org.jext.print.PrintSyntax, paintSyntaxLine[org.jext.print.JextTextArea, java.awt.Graphics, javax.swing.text.TabExpander, org.jext.print.TokenMarker, org.jext.print.SyntaxStyle[], java.awt.FontMetrics, int, java.awt.Font, java.awt.Color, int, int], int, null, tokenMarker>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, document>
<javax.swing.text.Element, getElementCount[], int, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, root>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, root>
<javax.swing.text.AbstractDocument, getText[int, int, javax.swing.text.Segment], void, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, document>
<javax.swing.text.Element, getStartOffset[], int, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, lineElement>
<javax.swing.text.Element, getStartOffset[], int, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, lineElement>
<javax.swing.text.Segment, toString[], java.lang.String, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, segment>
<org.jext.print.PrintText, printTextArray[], void, org.jext.print.PrintText, PrintText[javax.swing.text.PlainDocument, java.lang.String, org.jext.print.PrintingOptions, boolean, int], void, null, nothing here>
<org.jext.print.PrintText, printTextArray[], void, org.jext.print.PrintText, PrintText[java.lang.String[]], void, null, nothing here>
<org.jext.print.PrintText, printTextArray[], void, org.jext.print.PrintText, PrintText[java.lang.String[], java.awt.Font], void, null, nothing here>
<SAD, getPageFormat[], SADNESS, org.jext.print.PrintText, printTextArray[], void, null, printOptions_>
<SAD, getPageFont[], SADNESS, org.jext.print.PrintText, printTextArray[], void, null, printOptions_>
<java.awt.print.PrinterJob, getPrinterJob[], java.awt.print.PrinterJob, org.jext.print.PrintText, printTextArray[], void, null, PrinterJob>
<org.jext.print.PrintText, removeEOLChar[], java.lang.String[], org.jext.print.PrintText, printTextArray[], void, null, nothing here>
<SAD, getPrintLineNumbers[], SADNESS, org.jext.print.PrintText, printTextArray[], void, null, printOptions_>
<org.jext.print.PrintText, addLineNumbers[], java.lang.String[], org.jext.print.PrintText, printTextArray[], void, null, nothing here>
<SAD, getWrapText[], SADNESS, org.jext.print.PrintText, printTextArray[], void, null, printOptions_>
<org.jext.print.PrintText, wrapText[], java.lang.String[], org.jext.print.PrintText, printTextArray[], void, null, nothing here>
<org.jext.print.PrintText, pageinateText[], java.awt.print.Book, org.jext.print.PrintText, printTextArray[], void, null, nothing here>
<java.awt.print.PrinterJob, setPageable[java.awt.print.Pageable], void, org.jext.print.PrintText, printTextArray[], void, null, job>
<java.awt.print.PrinterJob, printDialog[], boolean, org.jext.print.PrintText, printTextArray[], void, null, job>
<java.awt.print.PrinterJob, print[], void, org.jext.print.PrintText, printTextArray[], void, null, job>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.print.PrintText, printTextArray[], void, null, JOptionPane>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.print.PrintText, printTextArray[], void, null, JOptionPane>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, compareTo[java.lang.String], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp1>
<java.lang.String, compareTo[java.lang.String], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp1>
<java.lang.String, compareTo[java.lang.String], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp2>
<java.lang.String, compareTo[java.lang.String], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp2>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, text_[i]>
<java.lang.String, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp3>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, "\t">
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp3>
<java.lang.StringBuffer, length[], int, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp4>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp4>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp4>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp3>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText, removeEOLChar[], java.lang.String[], null, temp4>
<java.lang.Integer, toString[], java.lang.String, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, lines>
<java.lang.String, length[], int, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, temp>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, num>
<java.lang.StringBuffer, length[], int, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, num>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, lineNum>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, lineNum>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, num>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText, addLineNumbers[], java.lang.String[], null, lineNum>
<SAD, getPageFormat[], SADNESS, org.jext.print.PrintText, wrapText[], java.lang.String[], null, printOptions_>
<SAD, getPageFont[], SADNESS, org.jext.print.PrintText, wrapText[], java.lang.String[], null, printOptions_>
<java.awt.print.PageFormat, getImageableWidth[], double, org.jext.print.PrintText, wrapText[], java.lang.String[], null, pgfmt>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.print.PrintText, wrapText[], java.lang.String[], null, wrapSpaces>
<java.awt.geom.RectangularShape, getWidth[], double, org.jext.print.PrintText, wrapText[], java.lang.String[], null, getTransform(),false,false))>
<java.awt.Font, getStringBounds[java.lang.String, java.awt.font.FontRenderContext], java.awt.geom.Rectangle2D, org.jext.print.PrintText, wrapText[], java.lang.String[], null, pageFont>
<java.awt.Font, getTransform[], java.awt.geom.AffineTransform, org.jext.print.PrintText, wrapText[], java.lang.String[], null, pageFont>
<java.lang.String, length[], int, org.jext.print.PrintText, wrapText[], java.lang.String[], null, currentLine>
<java.awt.geom.RectangularShape, getWidth[], double, org.jext.print.PrintText, wrapText[], java.lang.String[], null, getTransform(),false,false))>
<java.awt.Font, getStringBounds[java.lang.String, java.awt.font.FontRenderContext], java.awt.geom.Rectangle2D, org.jext.print.PrintText, wrapText[], java.lang.String[], null, pageFont>
<java.awt.Font, getTransform[], java.awt.geom.AffineTransform, org.jext.print.PrintText, wrapText[], java.lang.String[], null, pageFont>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, wrapText[], java.lang.String[], null, currentLine>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText, wrapText[], java.lang.String[], null, wrapSpaces>
<java.lang.String, substring[int, int], java.lang.String, org.jext.print.PrintText, wrapText[], java.lang.String[], null, currentLine>
<java.lang.String, length[], int, org.jext.print.PrintText, wrapText[], java.lang.String[], null, currentLine>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Vector, size[], int, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Vector, get[int], java.lang.Object, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<SAD, getPageFormat[], SADNESS, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, printOptions_>
<SAD, getPageFont[], SADNESS, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, printOptions_>
<java.awt.print.PageFormat, getImageableHeight[], double, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, pgfmt>
<java.awt.Font, getSize[], int, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, pageFont>
<org.jext.print.PrintText, convertUnprintables[], void, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, nothing here>
<SAD, getPrintHeader[], SADNESS, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, printOptions_>
<java.awt.print.Book, append[java.awt.print.Printable, java.awt.print.PageFormat], void, org.jext.print.PrintText, pageinateText[], java.awt.print.Book, null, book>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.print.PrintText, convertUnprintables[], void, null, "">
<java.awt.print.PageFormat, getImageableWidth[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<SAD, getPageFont[], SADNESS, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, printOptions_>
<SAD, getPrintHeader[], SADNESS, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, printOptions_>
<java.util.Calendar, getInstance[], java.util.Calendar, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, Calendar>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.util.Calendar, get[int], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, date>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.util.Calendar, get[int], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, date>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.util.Calendar, get[int], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, date>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageNumText>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageNumText>
<java.awt.print.PageFormat, getWidth[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.print.PageFormat, getImageableWidth[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<SAD, getHeaderFont[], SADNESS, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, printOptions_>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.awt.print.PageFormat, getImageableY[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<SAD, getSize[], SADNESS, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, getHeaderFont()>
<SAD, getHeaderFont[], SADNESS, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, getSize[], printOptions_>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, header>
<java.awt.print.PageFormat, getImageableX[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.print.PageFormat, getWidth[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, getFontMetrics()>
<java.awt.Graphics, getFontMetrics[], java.awt.FontMetrics, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, stringWidth[java.lang.String], graphics>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.awt.print.PageFormat, getWidth[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, getFontMetrics()>
<java.awt.Graphics, getFontMetrics[], java.awt.FontMetrics, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, stringWidth[java.lang.String], graphics>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageNumText>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageNumText>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.awt.print.PageFormat, getImageableY[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.awt.Font, getSize[], int, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFont>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, graphics>
<java.awt.print.PageFormat, getImageableX[], double, org.jext.print.PrintText.Page, print[java.awt.Graphics, java.awt.print.PageFormat, int], int, null, pageFormat>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "XTOOLBAR">
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XBarHandler, startElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, "BUTTON">
<SAD, setFocusPainted[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, setText[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, class>
<SAD, concat[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, icons"))>
<java.lang.String, concat[java.lang.String], java.lang.String, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, lastPicture>
<SAD, getProperty[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, Jext>
<SAD, setIcon[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, setToolTipText[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, setMnemonic[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<java.lang.String, charAt[int], char, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, lastShortcut>
<SAD, setActionCommand[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, getAction[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, addActionListener[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, setEnabled[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, btn>
<SAD, addButton[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, tbar>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, "SEPARATOR">
<SAD, addButtonSeparator[], SADNESS, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, tbar>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, err>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XBarHandler, startDocument[], void, null, stateStack>
<SAD, setJextToolBar[], SADNESS, org.jext.xml.XBarHandler, endDocument[], void, null, parent>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.InputStream, close[], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.OneClickActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, reader>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "XMENUBAR">
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "LABEL">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "MENU">
<SAD, loadMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, GUIUtilities>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "SUBMENU">
<SAD, loadMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, GUIUtilities>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "RECENTS">
<SAD, loadMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, GUIUtilities>
<SAD, setRecentMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, parent>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "PLUGINS">
<SAD, loadMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, GUIUtilities>
<SAD, setPluginsMenu[], SADNESS, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, parent>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "ITEM">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, "TEMPLATES">
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "ITEM">
<SAD, loadMenuItem[], SADNESS, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, GUIUtilities>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, currentMenu>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "SEPARATOR">
<java.lang.String, length[], int, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, lastLabel>
<SAD, getFlatMenus[], SADNESS, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, add[javax.swing.JMenuItem], currentMenu>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, addSeparator[], currentMenu>
<SAD, getFlatMenus[], SADNESS, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, add[javax.swing.JMenuItem], currentMenu>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, addSeparator[], currentMenu>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "MENU">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "PLUGINS">
<SAD, add[], SADNESS, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, mbar>
<SAD, addIdentifiedMenu[], SADNESS, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, mbar>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "SUBMENU">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "RECENTS">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, "TEMPLATES">
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, lastMenu>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, err>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<SAD, getBooleanProperty[], SADNESS, org.jext.xml.XMenuHandler, startDocument[], void, null, Jext>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XMenuHandler, startDocument[], void, null, stateStack>
<SAD, setJMenuBar[], SADNESS, org.jext.xml.XMenuHandler, endDocument[], void, null, parent>
<java.lang.String, length[], int, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, in>
<java.lang.String, length[], int, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, in>
<java.lang.String, length[], int, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, null, _out>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPropertiesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<org.jext.xml.XPropertiesHandler, parse[java.lang.String], java.lang.String, org.jext.xml.XPropertiesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, nothing here>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPropertiesHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPropertiesHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "xproperties">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPropertiesHandler, endElement[java.lang.String], void, null, name>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.xml.XPropertiesHandler, endElement[java.lang.String], void, null, props>
<SAD, getProperties[], SADNESS, org.jext.xml.XPropertiesHandler, startDocument[], void, null, Jext>
<org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String], boolean, null, nothing here>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, e>
<java.io.InputStream, close[], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, fileStream>
<java.io.InputStream, close[], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, in>
<java.io.InputStreamReader, close[], void, org.jext.xml.XPropertiesReader, read[java.io.InputStream, java.lang.String, boolean], boolean, null, reader>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.io.InputStream, close[], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.XMenuReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, reader>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.PyActionsHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.PyActionsHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.xml.PyActionsHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, "yes">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.PyActionsHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "pyactions">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.PyActionsHandler, endElement[java.lang.String], void, null, name>
<SAD, addPythonAction[], SADNESS, org.jext.xml.PyActionsHandler, endElement[java.lang.String], void, null, Jext>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.InputStream, close[], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.PyActionsReader, read[java.io.InputStream, java.lang.String], boolean, null, reader>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.OneClickActionsHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.OneClickActionsHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.OneClickActionsHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "oneclickactions">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.OneClickActionsHandler, endElement[java.lang.String], void, null, name>
<SAD, addAction[], SADNESS, org.jext.xml.OneClickActionsHandler, endElement[java.lang.String], void, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, e>
<java.io.InputStream, close[], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.XInsertReader, read[org.jext.xml.XTree, java.io.InputStream, java.lang.String], boolean, null, reader>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, value>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "XPOPUP">
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, "LABEL">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, "SUBMENU">
<SAD, loadMenu[], SADNESS, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, GUIUtilities>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, toUpperCase()>
<java.lang.String, toUpperCase[], java.lang.String, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, equals[java.lang.Object], name>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, "ITEM">
<SAD, loadMenuItem[], SADNESS, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, GUIUtilities>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, currentMenu>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, popup>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, "SEPARATOR">
<SAD, getFlatMenus[], SADNESS, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, add[javax.swing.JMenuItem], currentMenu>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, addSeparator[], currentMenu>
<SAD, getFlatMenus[], SADNESS, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, popup>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, popup>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, "SUBMENU">
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, popup>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, add[javax.swing.JMenuItem], stateStack>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, err>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XPopupHandler, startDocument[], void, null, stateStack>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, e>
<java.io.InputStream, close[], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.XBarReader, read[org.jext.xml.JextFrame, java.io.InputStream, java.lang.String], void, null, reader>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, attribute[java.lang.String, java.lang.String, boolean], void, null, aname>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, doctypeDecl[java.lang.String, java.lang.String, java.lang.String], void, null, "XINSERT">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, charData[char[], int, int], void, null, "ITEM">
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, charData[char[], int, int], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XInsertHandler, startElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, startElement[java.lang.String], void, null, "NAME">
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, startElement[java.lang.String], void, null, "MENU">
<SAD, addMenu[], SADNESS, org.jext.xml.XInsertHandler, startElement[java.lang.String], void, null, tree>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, name>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, lastStartTag>
<SAD, closeMenu[], SADNESS, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, tree>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, lastStartTag>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, type>
<java.lang.String, equalsIgnoreCase[java.lang.String], boolean, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, type>
<SAD, addInsert[], SADNESS, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, tree>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, err>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XInsertHandler, startDocument[], void, null, stateStack>
<SAD, getLanguageStream[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, Jext>
<SAD, setHandler[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, parser>
<SAD, parse[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, setHandler[], parser>
<java.net.URL, toString[], java.lang.String, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, dtd")>
<java.lang.Class, getResource[java.lang.String], java.net.URL, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, err>
<SAD, getLine[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, e>
<SAD, getColumn[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, e>
<java.io.PrintStream, println[char[]], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, err>
<SAD, getMessage[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, e>
<java.lang.Throwable, printStackTrace[], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, e>
<java.io.InputStream, close[], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, fileName>
<java.io.InputStreamReader, close[], void, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, reader>
<SAD, getPopupMenu[], SADNESS, org.jext.xml.XPopupReader, read[java.io.InputStream, java.lang.String], javax.swing.JPopupMenu, null, xmh>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getDefaultRootElement[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, getDefaultRootElement[], textArea>
<SAD, getFontMetrics[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, getFontMetrics[], textArea>
<java.awt.FontMetrics, charWidth[char], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, fm>
<SAD, getHorizontalOffset[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getWidth[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.util.ArrayList, size[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, matches>
<SAD, getPos[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, get(i))>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, getPos[], matches>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, map>
<SAD, offsetToX[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, lineElement>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, gfx>
<SAD, paintHighlight[], SADNESS, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, next>
<SAD, setLineSeparator[], SADNESS, org.jext.search.SearchHighlight, getToolTipText[java.awt.event.MouseEvent], java.lang.String, null, RE_CHAR_CLASSES)>
<SAD, set[], SADNESS, org.jext.search.SearchHighlight, getToolTipText[java.awt.event.MouseEvent], java.lang.String, null, RE_SYNTAX_PERL5)>
<SAD, getMatch[], SADNESS, org.jext.search.RESearchMatcher, nextMatch[javax.swing.text.Segment], int[], null, re>
<SAD, getStartIndex[], SADNESS, org.jext.search.RESearchMatcher, nextMatch[javax.swing.text.Segment], int[], null, match>
<SAD, getEndIndex[], SADNESS, org.jext.search.RESearchMatcher, nextMatch[javax.swing.text.Segment], int[], null, match>
<SAD, getMatch[], SADNESS, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, re>
<SAD, getNumSubs[], SADNESS, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, re>
<SAD, toString[], SADNESS, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, match>
<SAD, eval[], SADNESS, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, Run>
<java.lang.Object, toString[], java.lang.String, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, obj>
<SAD, substituteInto[], SADNESS, org.jext.search.RESearchMatcher, substitute[java.lang.String], java.lang.String, null, match>
<java.lang.String, toCharArray[], char[], org.jext.search.BoyerMooreSearchMatcher, BoyerMooreSearchMatcher[java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String], void, null, toUpperCase()>
<java.lang.String, toUpperCase[], java.lang.String, org.jext.search.BoyerMooreSearchMatcher, BoyerMooreSearchMatcher[java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String], void, toCharArray[], pattern>
<java.lang.String, toCharArray[], char[], org.jext.search.BoyerMooreSearchMatcher, BoyerMooreSearchMatcher[java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String], void, null, pattern>
<org.jext.search.BoyerMooreSearchMatcher, generateSkipArray[], void, org.jext.search.BoyerMooreSearchMatcher, BoyerMooreSearchMatcher[java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String], void, null, nothing here>
<org.jext.search.BoyerMooreSearchMatcher, generateSuffixArray[], void, org.jext.search.BoyerMooreSearchMatcher, BoyerMooreSearchMatcher[java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String], void, null, nothing here>
<org.jext.search.BoyerMooreSearchMatcher, match[char[], int, int], int, org.jext.search.BoyerMooreSearchMatcher, nextMatch[javax.swing.text.Segment], int[], null, nothing here>
<SAD, eval[], SADNESS, org.jext.search.BoyerMooreSearchMatcher, substitute[java.lang.String], java.lang.String, null, Run>
<java.lang.Object, toString[], java.lang.String, org.jext.search.BoyerMooreSearchMatcher, substitute[java.lang.String], java.lang.String, null, obj>
<java.lang.Character, toUpperCase[char], char, org.jext.search.BoyerMooreSearchMatcher, match[char[], int, int], int, null, Character>
<org.jext.search.BoyerMooreSearchMatcher, getSkipIndex[char], int, org.jext.search.BoyerMooreSearchMatcher, match[char[], int, int], int, null, nothing here>
<org.jext.search.BoyerMooreSearchMatcher, getSkipIndex[char], int, org.jext.search.BoyerMooreSearchMatcher, generateSkipArray[], void, null, nothing here>
<java.lang.String, toCharArray[], char[], org.jext.search.LiteralSearchMatcher, LiteralSearchMatcher[java.lang.String, java.lang.String, boolean], void, null, toUpperCase()>
<java.lang.String, toUpperCase[], java.lang.String, org.jext.search.LiteralSearchMatcher, LiteralSearchMatcher[java.lang.String, java.lang.String, boolean], void, toCharArray[], search>
<java.lang.String, toCharArray[], char[], org.jext.search.LiteralSearchMatcher, LiteralSearchMatcher[java.lang.String, java.lang.String, boolean], void, null, search>
<org.jext.search.LiteralSearchMatcher, nextMatch[java.lang.String, int], int[], org.jext.search.LiteralSearchMatcher, nextMatch[java.lang.String], int[], null, nothing here>
<java.lang.String, toCharArray[], char[], org.jext.search.LiteralSearchMatcher, nextMatch[java.lang.String, int], int[], null, text>
<java.lang.Character, toUpperCase[char], char, org.jext.search.LiteralSearchMatcher, nextMatch[java.lang.String, int], int[], null, Character>
<java.lang.Character, toUpperCase[char], char, org.jext.search.LiteralSearchMatcher, nextMatch[java.lang.String, int], int[], null, Character>
<java.lang.String, toCharArray[], char[], org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, text>
<java.lang.Character, toUpperCase[char], char, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, Character>
<java.lang.Character, toUpperCase[char], char, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, Character>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.search.LiteralSearchMatcher, substitute[java.lang.String], java.lang.String, null, buf>
<SAD, getDefaultRootElement[], SADNESS, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, null, map>
<javax.swing.text.Position, getOffset[], int, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, null, start>
<org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, null, nothing here>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.search.SearchResult, SearchResult[org.jext.search.JextTextArea, javax.swing.text.Position, javax.swing.text.Position], void, null, map>
<javax.swing.text.Position, getOffset[], int, org.jext.search.SearchResult, getPos[], int[], null, start>
<javax.swing.text.Position, getOffset[], int, org.jext.search.SearchResult, getPos[], int[], null, end>
<SAD, getText[], SADNESS, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, elem>
<javax.swing.text.Element, getEndOffset[], int, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, elem>
<javax.swing.text.Element, getStartOffset[], int, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, elem>
<java.lang.String, substring[int], java.lang.String, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, text>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, Utilities>
<java.lang.String, length[], int, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, text>
<java.lang.String, substring[int, int], java.lang.String, org.jext.search.SearchResult, getLine[javax.swing.text.Element], java.lang.String, null, text>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<javax.swing.ComboBoxEditor, getEditorComponent[], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getEditor()>
<javax.swing.JComboBox, getEditor[], javax.swing.ComboBoxEditor, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, getEditorComponent[], fieldSearch>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearchEditor>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, find>
<SAD, charAt[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, find>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, pane2>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, results>
<javax.swing.JList, setVisibleRowCount[int], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, results>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, results>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, results>
<javax.swing.JList, setModel[javax.swing.ListModel], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, results>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, add[java.awt.Component, java.lang.Object], nothing here>
<SAD, addActionListener[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, find>
<SAD, addActionListener[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, cancel>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<java.awt.FontMetrics, charWidth[char], int, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<javax.swing.JComboBox, addItem[java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<SAD, getTextArea[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, parent>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Jext>
<org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<SAD, getSelectedText[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, textArea>
<SAD, getSelectedText[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, textArea>
<org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, fieldSearch>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, getRootPane()>
<javax.swing.JFrame, getRootPane[], javax.swing.JRootPane, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<javax.swing.JFrame, setDefaultCloseOperation[int], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<org.jext.search.FindAllDialog, exit[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<javax.swing.JFrame, setIconImage[java.awt.Image], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<SAD, getJextIconImage[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, GUIUtilities>
<java.awt.Window, pack[], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<java.awt.Frame, setResizable[boolean], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, Utilities>
<java.awt.Window, setVisible[boolean], void, org.jext.search.FindAllDialog, FindAllDialog[org.jext.search.JextFrame], void, null, nothing here>
<SAD, setProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindAllDialog, exit[], void, null, fieldSearchEditor>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindAllDialog, exit[], void, null, fieldSearch>
<SAD, setProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindAllDialog, exit[], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindAllDialog, exit[], void, null, fieldSearch>
<SAD, unsetProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, exit[], void, null, useRegexp>
<SAD, setProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, exit[], void, null, ignoreCase>
<SAD, setProperty[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, Jext>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, exit[], void, null, highlight>
<SAD, getTextAreas[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, parent>
<SAD, getSearchHighlight[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, areas[i]>
<SAD, disable[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, h>
<SAD, repaint[], SADNESS, org.jext.search.FindAllDialog, exit[], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.search.FindAllDialog, exit[], void, repaint[], parent>
<java.awt.Window, dispose[], void, org.jext.search.FindAllDialog, exit[], void, null, nothing here>
<org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, org.jext.search.FindAllDialog, addSearchHistory[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindAllDialog, addSearchHistory[], void, null, fieldSearchEditor>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, fieldSearch>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, getItemAt(i))>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, equals[java.lang.Object], fieldSearch>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, removeItemAt[int], void, org.jext.search.FindAllDialog, addSearchHistory[java.lang.String], void, null, fieldSearch>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.search.FindAllDialog, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.search.FindAllDialog, exit[], void, org.jext.search.FindAllDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.search.FindAllDialog, findAll[], void, org.jext.search.FindAllDialog, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindAllDialog, findAll[], void, null, fieldSearchEditor>
<java.lang.String, length[], int, org.jext.search.FindAllDialog, findAll[], void, null, searchStr>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, Utilities>
<org.jext.search.FindAllDialog, addSearchHistory[], void, org.jext.search.FindAllDialog, findAll[], void, null, nothing here>
<javax.swing.DefaultListModel, removeAllElements[], void, org.jext.search.FindAllDialog, findAll[], void, null, resultModel>
<SAD, getTextArea[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, parent>
<SAD, getDocument[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.search.FindAllDialog, findAll[], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.search.FindAllDialog, findAll[], void, null, map>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, findAll[], void, null, highlight>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, findAll[], void, null, useRegexp>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, findAll[], void, null, ignoreCase>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.search.FindAllDialog, findAll[], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.search.FindAllDialog, findAll[], void, null, lineElement>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.search.FindAllDialog, findAll[], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.search.FindAllDialog, findAll[], void, null, lineElement>
<org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], org.jext.search.FindAllDialog, findAll[], void, null, nothing here>
<SAD, nextMatch[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, matcher>
<javax.swing.text.Document, createPosition[int], javax.swing.text.Position, org.jext.search.FindAllDialog, findAll[], void, null, doc>
<javax.swing.text.Document, createPosition[int], javax.swing.text.Position, org.jext.search.FindAllDialog, findAll[], void, null, doc>
<javax.swing.DefaultListModel, addElement[java.lang.Object], void, org.jext.search.FindAllDialog, findAll[], void, null, resultModel>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.search.FindAllDialog, findAll[], void, null, matches>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, Utilities>
<javax.swing.DefaultListModel, isEmpty[], boolean, org.jext.search.FindAllDialog, findAll[], void, null, resultModel>
<SAD, beep[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, beep[], textArea>
<javax.swing.JList, setModel[javax.swing.ListModel], void, org.jext.search.FindAllDialog, findAll[], void, null, results>
<SAD, initSearchHighlight[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, textArea>
<SAD, getSearchHighlight[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, textArea>
<SAD, trigger[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, h>
<SAD, setMatches[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, h>
<SAD, getSearchHighlight[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, textArea>
<SAD, trigger[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, h>
<SAD, setMatches[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, h>
<java.awt.Window, pack[], void, org.jext.search.FindAllDialog, findAll[], void, null, nothing here>
<SAD, repaint[], SADNESS, org.jext.search.FindAllDialog, findAll[], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, str>
<javax.swing.JComboBox, getSelectedItem[], java.lang.Object, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, fieldSearch>
<javax.swing.AbstractButton, isSelected[], boolean, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, ignoreCase>
<java.awt.Toolkit, beep[], void, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, getToolkit()>
<java.awt.Window, getToolkit[], java.awt.Toolkit, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], beep[], nothing here>
<SAD, getMatch[], SADNESS, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, regexp>
<SAD, getStartIndex[], SADNESS, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, match>
<SAD, getEndIndex[], SADNESS, org.jext.search.FindAllDialog, nextMatch[java.lang.String, int], int[], null, match>
<javax.swing.JList, isSelectionEmpty[], boolean, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, results>
<javax.swing.event.ListSelectionEvent, getValueIsAdjusting[], boolean, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, evt>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, results>
<SAD, getPos[], SADNESS, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, result>
<SAD, select[], SADNESS, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.search.FindAllDialog.ListHandler, valueChanged[javax.swing.event.ListSelectionEvent], void, select[], result>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.search.FindAllDialog.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.search.FindAllDialog, findAll[], void, org.jext.search.FindAllDialog.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<org.jext.search.FindAllDialog, exit[], void, org.jext.search.FindAllDialog.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldSearch>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldSearch>
<javax.swing.JComboBox, setRenderer[javax.swing.ListCellRenderer], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<javax.swing.JComboBox, setEditable[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<javax.swing.ComboBoxEditor, getEditorComponent[], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getEditor()>
<javax.swing.JComboBox, getEditor[], javax.swing.ComboBoxEditor, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, getEditorComponent[], fieldSearch>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldSearchEditor>
<javax.swing.ComboBoxEditor, getEditorComponent[], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getEditor()>
<javax.swing.JComboBox, getEditor[], javax.swing.ComboBoxEditor, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, getEditorComponent[], fieldReplace>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplaceEditor>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, setLayout[java.awt.LayoutManager], nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, ((JPanel)getContentPane())>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, setBorder[javax.swing.border.Border], nothing here>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, BorderFactory>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnFind>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnFind>
<SAD, charAt[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnFind>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, setDefaultButton[javax.swing.JButton], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnCancel>
<SAD, charAt[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnCancel>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, replaceLabel>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<javax.swing.JComboBox, setEnabled[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplace>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplace>
<SAD, charAt[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplace>
<SAD, addActionListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplace>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setToolTipText[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplaceAll>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplaceAll>
<SAD, charAt[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplaceAll>
<SAD, addActionListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplaceAll>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getPythonScript[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Search>
<SAD, setEnabled[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, scripted>
<javax.swing.JComboBox, setEnabled[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, scripted>
<SAD, addActionListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, scripted>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, script>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, script>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, scripted>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, script>
<SAD, getPythonScriptString[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Search>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getIgnoreCase[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Search>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, cPane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, cPane>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Jext>
<SAD, getRegexp[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Search>
<org.jext.search.FindReplace, buildConstraints[java.awt.GridBagConstraints, int, int, int, int, int, int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, gridbag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, add[java.awt.Component], nothing here>
<org.jext.search.FindReplace, load[], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<org.jext.search.FindReplace, exit[], void, java.awt.event.WindowAdapter, windowClosing[java.awt.event.WindowEvent], void, null, nothing here>
<java.awt.Component, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldSearch>
<java.awt.FontMetrics, charWidth[char], int, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldSearch>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<java.awt.FontMetrics, charWidth[char], int, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fm>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, fieldReplace>
<java.awt.Window, pack[], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<java.awt.Dialog, setResizable[boolean], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<SAD, centerComponentChild[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, Utilities>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnFind>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplace>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnReplaceAll>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, btnCancel>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, checkIgnoreCase>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, saveStates>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, useRegexp>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, allFiles>
<SAD, addKeyListener[], SADNESS, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, scripted>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, script>
<java.awt.Dialog, show[], void, org.jext.search.FindReplace, FindReplace[org.jext.search.JextFrame, int, boolean], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, load[], void, null, Jext>
<javax.swing.JComboBox, addItem[java.lang.Object], void, org.jext.search.FindReplace, load[], void, null, fieldSearch>
<SAD, getTextArea[], SADNESS, org.jext.search.FindReplace, load[], void, null, parent>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.FindReplace, load[], void, null, Jext>
<SAD, getFindPattern[], SADNESS, org.jext.search.FindReplace, load[], void, null, Search>
<org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, org.jext.search.FindReplace, load[], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.search.FindReplace, load[], void, null, fieldSearch>
<SAD, getSelectedText[], SADNESS, org.jext.search.FindReplace, load[], void, null, textArea>
<java.lang.String, length[], int, org.jext.search.FindReplace, load[], void, null, s>
<java.lang.String, length[], int, org.jext.search.FindReplace, load[], void, null, s>
<java.lang.String, charAt[int], char, org.jext.search.FindReplace, load[], void, null, s>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.search.FindReplace, load[], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.search.FindReplace, load[], void, null, buf>
<org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, org.jext.search.FindReplace, load[], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.search.FindReplace, load[], void, null, fieldSearch>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, load[], void, null, Jext>
<javax.swing.JComboBox, addItem[java.lang.Object], void, org.jext.search.FindReplace, load[], void, null, fieldReplace>
<SAD, getReplacePattern[], SADNESS, org.jext.search.FindReplace, load[], void, null, Search>
<org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, org.jext.search.FindReplace, load[], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.search.FindReplace, load[], void, null, fieldReplace>
<javax.swing.text.JTextComponent, selectAll[], void, org.jext.search.FindReplace, load[], void, null, fieldSearchEditor>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, exit[], void, null, saveStates>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, exit[], void, null, fieldSearch>
<SAD, setProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, exit[], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, exit[], void, null, fieldSearch>
<SAD, unsetProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, exit[], void, null, fieldReplace>
<SAD, setProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, exit[], void, null, fieldReplace>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, exit[], void, null, fieldReplace>
<SAD, unsetProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, exit[], void, null, saveStates>
<SAD, setProperty[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, exit[], void, null, allFiles>
<SAD, setIgnoreCase[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Search>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, exit[], void, null, checkIgnoreCase>
<SAD, setRegexp[], SADNESS, org.jext.search.FindReplace, exit[], void, null, Search>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, exit[], void, null, useRegexp>
<java.awt.Window, dispose[], void, org.jext.search.FindReplace, exit[], void, null, nothing here>
<org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, org.jext.search.FindReplace, addSearchHistory[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindReplace, addSearchHistory[], void, null, fieldSearchEditor>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, getItemAt(i))>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, equals[java.lang.Object], fieldSearch>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.JComboBox, removeItemAt[int], void, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearchEditor>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, addSearchHistory[java.lang.String], void, null, fieldSearch>
<org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, org.jext.search.FindReplace, addReplaceHistory[], void, null, nothing here>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindReplace, addReplaceHistory[], void, null, fieldReplaceEditor>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, getItemAt(i))>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, equals[java.lang.Object], fieldReplace>
<javax.swing.JComboBox, insertItemAt[java.lang.Object, int], void, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<javax.swing.JComboBox, getItemCount[], int, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<javax.swing.JComboBox, removeItemAt[int], void, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplaceEditor>
<javax.swing.JComboBox, getItemAt[int], java.lang.Object, org.jext.search.FindReplace, addReplaceHistory[java.lang.String], void, null, fieldReplace>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.search.FindReplace, exit[], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.search.FindReplace, doFind[], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.search.FindReplace, doReplace[], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.search.FindReplace, doReplaceAll[], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, script>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, scripted>
<javax.swing.JComboBox, setEnabled[boolean], void, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, fieldReplace>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, actionPerformed[java.awt.event.ActionEvent], void, null, scripted>
<SAD, setFindPattern[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindReplace, setSettings[], void, null, fieldSearchEditor>
<SAD, setIgnoreCase[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, checkIgnoreCase>
<SAD, setRegexp[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, useRegexp>
<SAD, setReplacePattern[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindReplace, setSettings[], void, null, fieldReplaceEditor>
<SAD, setPythonScript[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, scripted>
<SAD, setPythonScriptString[], SADNESS, org.jext.search.FindReplace, setSettings[], void, null, Search>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.search.FindReplace, setSettings[], void, null, script>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, Utilities>
<org.jext.search.FindReplace, addReplaceHistory[], void, org.jext.search.FindReplace, doReplaceAll[], void, null, nothing here>
<org.jext.search.FindReplace, addSearchHistory[], void, org.jext.search.FindReplace, doReplaceAll[], void, null, nothing here>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, allFiles>
<SAD, setBatchMode[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, parent>
<SAD, getTextAreas[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, parent>
<org.jext.search.FindReplace, setSettings[], void, org.jext.search.FindReplace, doReplaceAll[], void, null, nothing here>
<SAD, replaceAll[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, Search>
<SAD, getLength[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, textArea>
<SAD, setBatchMode[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, parent>
<SAD, getTextArea[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, parent>
<org.jext.search.FindReplace, setSettings[], void, org.jext.search.FindReplace, doReplaceAll[], void, null, nothing here>
<SAD, replaceAll[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, Search>
<SAD, getLength[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, textArea>
<SAD, beep[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, Utilities>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doReplaceAll[], void, null, Utilities>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doReplace[], void, null, Utilities>
<org.jext.search.FindReplace, addReplaceHistory[], void, org.jext.search.FindReplace, doReplace[], void, null, nothing here>
<org.jext.search.FindReplace, addSearchHistory[], void, org.jext.search.FindReplace, doReplace[], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.search.FindReplace, doReplace[], void, null, parent>
<org.jext.search.FindReplace, setSettings[], void, org.jext.search.FindReplace, doReplace[], void, null, nothing here>
<SAD, replace[], SADNESS, org.jext.search.FindReplace, doReplace[], void, null, Search>
<SAD, beep[], SADNESS, org.jext.search.FindReplace, doReplace[], void, null, Utilities>
<org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, org.jext.search.FindReplace, doReplace[], void, null, nothing here>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doReplace[], void, null, Utilities>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doFind[], void, null, Utilities>
<org.jext.search.FindReplace, addSearchHistory[], void, org.jext.search.FindReplace, doFind[], void, null, nothing here>
<org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, org.jext.search.FindReplace, doFind[], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.search.FindReplace, doFind[], void, null, parent>
<SAD, setCursorOnWait[], SADNESS, org.jext.search.FindReplace, doFind[], void, null, Utilities>
<org.jext.search.FindReplace, setSettings[], void, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, nothing here>
<SAD, find[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, Search>
<SAD, getCaretPosition[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, textArea>
<SAD, getName[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, textArea>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, allFiles>
<SAD, setCaretPosition[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, textArea>
<org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, nothing here>
<SAD, isSelected[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, allFiles>
<SAD, getTabbedPane[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, parent>
<SAD, indexOfComponent[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, pane>
<SAD, getTabCount[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, pane>
<SAD, getComponentAt[], SADNESS, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, pane>
<org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, org.jext.search.FindReplace, find[org.jext.search.JextTextArea], void, null, nothing here>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.search.FindReplace, doFind[], void, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<org.jext.search.FindReplace, doReplace[], void, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<org.jext.search.FindReplace, exit[], void, org.jext.search.FindReplace.KeyHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.search.Search, load[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.search.Search, save[], void, null, Jext>
<org.jext.search.Search, getSearchMatcher[boolean], org.jext.search.SearchMatcher, org.jext.search.Search, getSearchMatcher[], org.jext.search.SearchMatcher, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.Search, getSearchMatcher[boolean], org.jext.search.SearchMatcher, null, "">
<org.jext.search.Search, getSearchMatcher[boolean], org.jext.search.SearchMatcher, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, textArea>
<SAD, getText[], SADNESS, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, buffer>
<SAD, getLength[], SADNESS, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, buffer>
<SAD, nextMatch[], SADNESS, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, matcher>
<SAD, select[], SADNESS, org.jext.search.Search, find[org.jext.search.JextTextArea, int], boolean, null, textArea>
<SAD, isEditable[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, beep[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, Utilities>
<SAD, getSelectionStart[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, isSelectionRectangular[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, beep[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, Utilities>
<org.jext.search.Search, getSearchMatcher[boolean], org.jext.search.SearchMatcher, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, nothing here>
<SAD, beep[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, Utilities>
<SAD, getSelectedText[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, substitute[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, matcher>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, replacement>
<SAD, setSelectedText[], SADNESS, org.jext.search.Search, replace[org.jext.search.JextTextArea], boolean, null, textArea>
<SAD, isEditable[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, textArea>
<org.jext.search.Search, getSearchMatcher[boolean], org.jext.search.SearchMatcher, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, nothing here>
<SAD, getText[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, buffer>
<SAD, nextMatch[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, matcher>
<SAD, getText[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, buffer>
<SAD, substitute[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, matcher>
<java.lang.String, length[], int, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, found>
<java.lang.String, length[], int, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, subst>
<SAD, remove[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, buffer>
<SAD, insertString[], SADNESS, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, buffer>
<java.lang.String, length[], int, org.jext.search.Search, replaceAll[org.jext.search.JextTextArea, int, int], int, null, found>
<SAD, getCurrentProject[], SADNESS, org.jext.project.ProjectEvent, ProjectEvent[org.jext.project.ProjectManager, int], void, null, projectManager>
<SAD, getSelectedFile[], SADNESS, org.jext.project.ProjectEvent, ProjectEvent[org.jext.project.ProjectManager, org.jext.project.Project, int, java.lang.Object], void, null, project>
<SAD, toString[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, null, valueOf(getTarget()))>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, null, append("target=")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], append(", ")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], valueOf(getWhat()))>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, null, append("what=")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], append(", ")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], getName())>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, null, append("project=")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], append(", ")>
<SAD, append[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, append[], valueOf(getProjectManager()))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.project.ProjectEvent, toString[], java.lang.String, null, append("projectManager=")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.project.ProjectEvent, toString[], java.lang.String, append[java.lang.Object], new StringBuffer("ProjectEvent:  ")>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.project.ProjectEvent, toString[], java.lang.String, null, String>
<org.jext.project.ProjectEvent, getProjectManager[], org.jext.project.ProjectManager, org.jext.project.ProjectEvent, toString[], java.lang.String, null, nothing here>
<SAD, getName[], SADNESS, org.jext.project.ProjectEvent, toString[], java.lang.String, null, getProject()>
<org.jext.project.ProjectEvent, getProject[], org.jext.project.Project, org.jext.project.ProjectEvent, toString[], java.lang.String, getName[], nothing here>
<java.lang.String, valueOf[int], java.lang.String, org.jext.project.ProjectEvent, toString[], java.lang.String, null, String>
<org.jext.project.ProjectEvent, getWhat[], int, org.jext.project.ProjectEvent, toString[], java.lang.String, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.project.ProjectEvent, toString[], java.lang.String, null, String>
<org.jext.project.ProjectEvent, getTarget[], java.lang.Object, org.jext.project.ProjectEvent, toString[], java.lang.String, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.project.DefaultProjectManagement, getLabel[], java.lang.String, null, Jext>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, addProjectListener[org.jext.project.ProjectListener], void, null, listeners>
<java.util.Vector, remove[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, removeProjectListener[org.jext.project.ProjectListener], void, null, listeners>
<java.util.Vector, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.ArrayList, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<java.util.Vector, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.Iterator, hasNext[], boolean, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, it>
<java.util.Iterator, next[], java.lang.Object, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, it>
<java.util.ArrayList, contains[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<SAD, projectEventFired[], SADNESS, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listener>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<SAD, addJextListener[], SADNESS, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, null, parent>
<org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, null, nothing here>
<SAD, addListDataListener[], SADNESS, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, null, getList()>
<SAD, getList[], SADNESS, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, addListDataListener[], getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, getList[], parent>
<org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, java.lang.Object, contentsChanged[javax.swing.event.ListDataEvent], void, null, nothing here>
<javax.swing.event.ListDataEvent, getIndex0[], int, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, e>
<javax.swing.event.ListDataEvent, getIndex1[], int, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, e>
<SAD, get[], SADNESS, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, getList()>
<SAD, getList[], SADNESS, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, get[], getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, getList[], parent>
<java.util.Vector, add[int, java.lang.Object], void, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, projectNames>
<SAD, getName[], SADNESS, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, elm>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, projects>
<SAD, getName[], SADNESS, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, elm>
<javax.swing.event.ListDataEvent, getIndex0[], int, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, e>
<javax.swing.event.ListDataEvent, getIndex1[], int, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, e>
<SAD, fireProjectEvent[], SADNESS, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, nothing here>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, projects>
<java.util.Vector, remove[int], java.lang.Object, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, projectNames>
<org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, org.jext.project.DefaultProjectManager, DefaultProjectManager[org.jext.project.JextFrame], void, null, nothing here>
<SAD, getList[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, getList[], parent>
<javax.swing.DefaultListModel, size[], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, list>
<javax.swing.DefaultListModel, size[], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, list>
<javax.swing.DefaultListModel, size[], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, list>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, list>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, tempNames>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, elm>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, tempProjects>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, elm>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, elm>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, elm>
<java.util.Vector, removeAll[java.util.Collection], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Iterator, hasNext[], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, iter>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, nothing here>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Vector, remove[int], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, String>
<java.util.Iterator, next[], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, iter>
<java.util.Hashtable, clear[], void, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Vector, addAll[java.util.Collection], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Hashtable, putAll[java.util.Map], void, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<SAD, getProjectManager[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, parent>
<SAD, getWhat[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, evt>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, getName[], parent>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, currentProject>
<org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, nothing here>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, nothing here>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.DefaultProjectManager, jextEventFired[org.jext.project.JextEvent], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, null, projects>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, getName[], parent>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, null, nothing here>
<java.util.Vector, size[], int, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projectNames>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projects>
<java.util.Vector, get[int], java.lang.Object, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projectNames>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.project.DefaultProjectManager, newProject[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.project.DefaultProjectManager, newProject[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.project.DefaultProjectManager, newProject[], void, null, Jext>
<java.lang.String, length[], int, org.jext.project.DefaultProjectManager, newProject[], void, null, response>
<org.jext.project.DefaultProjectManager, openProject[java.lang.Object], void, org.jext.project.DefaultProjectManager, newProject[], void, null, nothing here>
<SAD, selectWorkspaceOfNameOrCreate[], SADNESS, org.jext.project.DefaultProjectManager, openProject[java.lang.Object], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, openProject[java.lang.Object], void, selectWorkspaceOfNameOrCreate[], parent>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.project.DefaultProjectManager, openProject[java.lang.Object], void, null, String>
<SAD, getList[], SADNESS, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, getList[], parent>
<javax.swing.DefaultListModel, size[], int, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, null, list>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, null, getName()>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, equals[], get(i)))>
<javax.swing.DefaultListModel, get[int], java.lang.Object, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, getName[], list>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, null, p>
<javax.swing.DefaultListModel, remove[int], java.lang.Object, org.jext.project.DefaultProjectManager, closeProject[org.jext.project.Project], void, null, list>
<SAD, save[], SADNESS, org.jext.project.DefaultProjectManager, saveProject[org.jext.project.Project], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager, saveProject[org.jext.project.Project], void, save[], parent>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, DefaultProject[Workspaces.WorkspaceElement], void, null, ws>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, DefaultProject[Workspaces.WorkspaceElement], void, null, nothing here>
<SAD, size[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, contents>
<SAD, size[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, contents>
<SAD, get[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, contents>
<SAD, getFile[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, get(i)))>
<SAD, get[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], getFile[], contents>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.ArrayList, size[], int, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.lang.Throwable, printStackTrace[java.io.PrintStream], void, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, ayEssEx>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.Iterator, hasNext[], boolean, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, it>
<java.io.PrintStream, println[java.lang.Object], void, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, out>
<java.util.Iterator, next[], java.lang.Object, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, it>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, null, getName()>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, equals[], getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, getName[], parent>
<SAD, selectWorkspaceOfName[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, selectWorkspaceOfName[], parent>
<SAD, open[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, null, parent>
<java.io.File, getAbsolutePath[], java.lang.String, org.jext.project.DefaultProjectManager.DefaultProject, openFile[java.io.File], void, null, f>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, getName()>
<SAD, getName[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, equals[], getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, getName[], parent>
<SAD, selectWorkspaceOfName[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, selectWorkspaceOfName[], parent>
<SAD, iterator[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, contents>
<java.util.Iterator, hasNext[], boolean, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, it>
<java.util.Iterator, next[], java.lang.Object, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, it>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, getFile()>
<SAD, getFile[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, equals[], nextText>
<SAD, removeFile[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, null, getWorkspaces()>
<SAD, getWorkspaces[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, closeFile[java.io.File], void, removeFile[], parent>
<SAD, size[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, null, contents>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, null, getFile()>
<SAD, getFile[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, equals[], get(i)))>
<SAD, get[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, getFile[], contents>
<org.jext.project.DefaultProjectManager$DefaultProject, openFile[java.io.File], void, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, null, nothing here>
<SAD, setSelectedIndex[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, setSelectedIndex[], parent>
<SAD, setSelectedIndex[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, selectFile[java.io.File], void, null, ws>
<SAD, getFile[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getSelectedFile[], java.io.File, null, getSelectedIndex())))>
<SAD, get[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getSelectedFile[], java.io.File, getFile[], contents>
<SAD, getSelectedIndex[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, getSelectedFile[], java.io.File, null, ws>
<SAD, equals[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, equals[java.lang.Object], boolean, null, name>
<SAD, hashCode[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, hashCode[], int, null, name>
<SAD, toString[], SADNESS, org.jext.project.DefaultProjectManager.DefaultProject, toString[], java.lang.String, null, append(name)>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.project.DefaultProjectManager.DefaultProject, toString[], java.lang.String, toString[], new StringBuffer("DefaultProject ")>
<java.util.Map, get[java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, getAttribute[java.lang.String], java.lang.Object, null, attributes>
<org.jext.project.AbstractProject, getAttribute[java.lang.String], java.lang.Object, org.jext.project.AbstractProject, getAttribute[java.lang.String, java.lang.Object], java.lang.Object, null, nothing here>
<org.jext.project.AbstractProject, getAttribute[java.lang.String], java.lang.Object, org.jext.project.AbstractProject, getAttribute[java.lang.String, java.lang.Object], java.lang.Object, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.project.AbstractProject, getAttributeAsString[java.lang.String], java.lang.String, null, String>
<java.util.Map, get[java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, getAttributeAsString[java.lang.String], java.lang.String, null, attributes>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, setAttribute[java.lang.String, java.lang.Object], void, null, attributes>
<org.jext.project.AbstractProject, fireProjectEvent[int, java.lang.Object], void, org.jext.project.AbstractProject, setAttribute[java.lang.String, java.lang.Object], void, null, nothing here>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.AbstractProject, fireProjectEvent[int], void, null, manager>
<SAD, fireProjectEvent[], SADNESS, org.jext.project.AbstractProject, fireProjectEvent[int, java.lang.Object], void, null, manager>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.xinsert.XTreeNode, isAssociatedToMode[java.lang.String], boolean, null, token>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.xinsert.XTreeNode, isAssociatedToMode[java.lang.String], boolean, null, nextToken()>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.xinsert.XTreeNode, isAssociatedToMode[java.lang.String], boolean, equals[java.lang.Object], token>
<java.util.Stack, empty[], boolean, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, treeModel>
<SAD, getXTreeNode[], SADNESS, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, xtreeObj>
<java.util.Stack, peek[], java.lang.Object, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, treeModel>
<SAD, getXTreeNode[], SADNESS, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, xtreeObj>
<SAD, getXTreeNode[], SADNESS, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, obj>
<SAD, getIndex[], SADNESS, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, obj>
<SAD, incrementIndex[], SADNESS, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, obj>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xinsert.XTree, closeMenu[], void, null, menuStack>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, inserts>
<java.util.Vector, size[], int, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, inserts>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, treeModel>
<java.util.Stack, peek[], java.lang.Object, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, menuStack>
<javax.swing.tree.DefaultTreeModel, insertNodeInto[javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int], void, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, treeModel>
<SAD, getXTreeNode[], SADNESS, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, obj>
<SAD, getIndex[], SADNESS, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, obj>
<SAD, incrementIndex[], SADNESS, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, obj>
<SAD, addJextListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, parent>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, nothing here>
<javax.swing.JTree, addTreeSelectionListener[javax.swing.event.TreeSelectionListener], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, tree>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, tree>
<SAD, getBooleanProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<javax.swing.JTree, setCellRenderer[javax.swing.tree.TreeCellRenderer], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, tree>
<org.jext.xinsert.XTree, init[java.lang.String], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<javax.swing.JToolBar, setFloatable[boolean], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, pane>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Utilities>
<SAD, setMnemonic[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, collapse>
<SAD, charAt[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, collapse>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Utilities>
<SAD, setMnemonic[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, expand>
<SAD, charAt[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, expand>
<javax.swing.JToolBar, add[javax.swing.Action], javax.swing.JButton, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, pane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Utilities>
<SAD, setMnemonic[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, reload>
<SAD, charAt[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, reload>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, s>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, optionPane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, carriageReturn>
<SAD, getBooleanProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, carriageReturn>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, optionPane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, executeScript>
<SAD, getBooleanProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, executeScript>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, executeScript>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, optionPane>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, textSurrounding>
<SAD, getBooleanProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, Jext>
<SAD, setSelected[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, textSurrounding>
<SAD, addActionListener[], SADNESS, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, textSurrounding>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.xinsert.XTree, XTree[org.jext.xinsert.JextFrame, java.lang.String], void, null, nothing here>
<org.jext.xinsert.XTree, init[java.lang.String, boolean], void, org.jext.xinsert.XTree, init[java.lang.String], void, null, nothing here>
<java.lang.Thread, start[], void, org.jext.xinsert.XTree, init[java.lang.String, boolean], void, null, x>
<org.jext.xinsert.XTree, run[], void, org.jext.xinsert.XTree, init[java.lang.String, boolean], void, null, nothing here>
<SAD, read[], SADNESS, org.jext.xinsert.XTree, run[], void, null, XInsertReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.xinsert.XTree, run[], void, null, class>
<org.jext.xinsert.XTree, loadLocalFiles[], void, org.jext.xinsert.XTree, run[], void, null, nothing here>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.xinsert.XTree, run[], void, null, SwingUtilities>
<org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, java.lang.Object, run[], void, null, nothing here>
<javax.swing.JTree, expandRow[int], void, java.lang.Object, run[], void, null, tree>
<javax.swing.JTree, setRootVisible[boolean], void, java.lang.Object, run[], void, null, tree>
<javax.swing.JTree, setShowsRootHandles[boolean], void, java.lang.Object, run[], void, null, tree>
<SAD, getWildCardMatches[], SADNESS, org.jext.xinsert.XTree, loadLocalFiles[], void, null, Utilities>
<SAD, read[], SADNESS, org.jext.xinsert.XTree, loadLocalFiles[], void, null, XInsertReader>
<java.io.PrintStream, println[char[]], void, org.jext.xinsert.XTree, loadLocalFiles[], void, null, out>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, loadLocalFiles[], void, null, Jext>
<SAD, getWhat[], SADNESS, org.jext.xinsert.XTree, jextEventFired[org.jext.xinsert.JextEvent], void, null, evt>
<org.jext.xinsert.XTree, associateXTreeToMode[], void, org.jext.xinsert.XTree, jextEventFired[org.jext.xinsert.JextEvent], void, null, nothing here>
<org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, org.jext.xinsert.XTree, associateXTreeToMode[], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, parent>
<SAD, getColorizingMode[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, mode>
<SAD, getChildCount[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, root>
<SAD, getChildAt[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, root>
<SAD, isAssociatedToMode[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, child>
<SAD, setParent[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, child>
<SAD, isPermanent[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, child>
<SAD, add[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, _root>
<SAD, equalsIgnoreCase[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, toString()>
<SAD, toString[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, equalsIgnoreCase[], child>
<SAD, insert[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, _root>
<SAD, insert[], SADNESS, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, _root>
<javax.swing.JTree, setModel[javax.swing.tree.TreeModel], void, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, tree>
<javax.swing.JTree, expandRow[int], void, org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, null, tree>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, tse>
<javax.swing.JTree, isSelectionEmpty[], boolean, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, source>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getSelectionPath()>
<javax.swing.JTree, getSelectionPath[], javax.swing.tree.TreePath, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, getLastPathComponent[], source>
<SAD, getIndex[], SADNESS, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, node>
<SAD, grabFocus[], SADNESS, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, grabFocus[], parent>
<org.jext.xinsert.XTree, insert[int], void, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, nothing here>
<SAD, getIndex[], SADNESS, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, node>
<javax.swing.JTree, setSelectionPath[javax.swing.tree.TreePath], void, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, source>
<javax.swing.JTree, getPathForRow[int], javax.swing.tree.TreePath, org.jext.xinsert.XTree, valueChanged[javax.swing.event.TreeSelectionEvent], void, null, source>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<javax.swing.JTree, getRowCount[], int, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, tree>
<javax.swing.JTree, expandRow[int], void, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, tree>
<javax.swing.JTree, getRowCount[], int, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, tree>
<javax.swing.JTree, collapseRow[int], void, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, tree>
<SAD, removeAllChildren[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, root>
<javax.swing.tree.DefaultTreeModel, reload[], void, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, treeModel>
<org.jext.xinsert.XTree, init[java.lang.String, boolean], void, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.xinsert.XTree, associateXTreeToMode[boolean], void, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getInstances[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.util.ArrayList, size[], int, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, instances>
<SAD, reload[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, getXTree()>
<SAD, getXTree[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, reload[], instance>
<SAD, associateXTreeToMode[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, getXTree()>
<SAD, getXTree[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, associateXTreeToMode[], instance>
<SAD, setProperty[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, carriageReturn>
<SAD, setProperty[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, executeScript>
<SAD, setProperty[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, isSelected[], SADNESS, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, textSurrounding>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.xinsert.XTree, insert[int], void, null, inserts>
<SAD, getContent[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, item>
<SAD, isScript[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, item>
<SAD, isMixed[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, item>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, charAt[int], char, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, charAt[int], char, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<SAD, getTextArea[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, parent>
<SAD, isSelected[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, executeScript>
<SAD, execute[], SADNESS, org.jext.xinsert.XTree, insert[int], void, isSelected[], Run>
<SAD, beginProtectedCompoundEdit[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getEnterIndent[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getSelectedText[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<SAD, getCaretPosition[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, charAt[int], char, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, mixedScript>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, charAt[int], char, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, length[], int, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, mixedScript>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.xinsert.XTree, insert[int], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.StringBuffer, length[], int, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.StringBuffer, length[], int, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<javax.swing.text.Document, getLength[], int, org.jext.xinsert.XTree, insert[int], void, null, doc>
<SAD, indent[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Indent>
<SAD, getCaretLine[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.xinsert.XTree, insert[int], void, null, doc>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.String, charAt[int], char, org.jext.xinsert.XTree, insert[int], void, null, data>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, (parsing ? mixedScript : _buf)>
<SAD, isInitialized[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, DawnParser>
<SAD, init[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, DawnParser>
<SAD, installPackage[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, DawnParser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.xinsert.XTree, insert[int], void, null, mixedScript>
<SAD, setProperty[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, parser>
<SAD, exec[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, parser>
<SAD, isEmpty[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, getStack()>
<SAD, getStack[], SADNESS, org.jext.xinsert.XTree, insert[int], void, isEmpty[], parser>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<SAD, popString[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, parser>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.xinsert.XTree, insert[int], void, null, JOptionPane>
<SAD, getMessage[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, dre>
<SAD, getProperty[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Jext>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.xinsert.XTree, insert[int], void, null, (parsing ? mixedScript : _buf)>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.xinsert.XTree, insert[int], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.xinsert.XTree, insert[int], void, null, _buf>
<javax.swing.text.Document, getLength[], int, org.jext.xinsert.XTree, insert[int], void, null, doc>
<SAD, indent[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Indent>
<SAD, getCaretLine[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.xinsert.XTree, insert[int], void, null, doc>
<javax.swing.text.Document, getLength[], int, org.jext.xinsert.XTree, insert[int], void, null, doc>
<java.lang.String, length[], int, org.jext.xinsert.XTree, insert[int], void, null, surroundText>
<SAD, isSelected[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textSurrounding>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.xinsert.XTree, insert[int], void, null, doc>
<SAD, setCaretPosition[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, endProtectedCompoundEdit[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, grabFocus[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, textArea>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Utilities>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Utilities>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree, insert[int], void, null, Utilities>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree.XTreeCellRenderer, XTreeCellRenderer[], void, null, Utilities>
<SAD, getIcon[], SADNESS, org.jext.xinsert.XTree.XTreeCellRenderer, XTreeCellRenderer[], void, null, Utilities>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.xinsert.XTree.XTreeCellRenderer, XTreeCellRenderer[], void, null, tree>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.xinsert.XTree.XTreeCellRenderer, XTreeCellRenderer[], void, null, tree>
<javax.swing.JTree, getPathForRow[int], javax.swing.tree.TreePath, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, source>
<javax.swing.tree.TreePath, getLastPathComponent[], java.lang.Object, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, path>
<SAD, getIndex[], SADNESS, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, node>
<SAD, getType[], SADNESS, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, null, elementAt(index - 1))>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, getType[], inserts>
<SAD, getTextArea[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollPageDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollPageUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getCaretPosition[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementCount[], int, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, setCaretPosition[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(caret)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getText[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, charAt[int], char, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<SAD, setCaretPosition[], SADNESS, org.jext.textarea.NextLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollDown, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.ScrollUp, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.jext.textarea.ScrollUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.jext.textarea.ScrollUp, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionStart[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionEnd[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, actionPerformed[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, getAction("right_indent")>
<SAD, getAction[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, actionPerformed[], Jext>
<SAD, beginCompoundEdit[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getBooleanProperty[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getRealLength[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getCaretPosition[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getTabIndent[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, indent[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, Indent>
<SAD, setSelectedText[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, createWhiteSpace[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getSoftTab[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, createWhiteSpace[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getSoftTab[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.textarea.IndentOnTab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getCaretPosition[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(caret)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getText[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, charAt[int], char, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, _line>
<SAD, setCaretPosition[], SADNESS, org.jext.textarea.PrevLineIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getEnterIndent[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, indent[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, Indent>
<SAD, getCaretLine[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.textarea.IndentOnEnter, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSelectionStart[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, charAt[int], char, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<java.lang.String, charAt[int], char, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<SAD, findTypeChange[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<java.lang.String, charAt[int], char, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isUpperCase[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isLowerCase[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.String, charAt[int], char, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<java.lang.String, length[], int, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<java.lang.Character, isWhitespace[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isWhitespace[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.Character, isWhitespace[char], boolean, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.String, charAt[int], char, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, charAt[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, getText()>
<SAD, getText[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, charAt[], textArea>
<SAD, beep[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, select[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.Math, abs[int], int, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, remove[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<java.lang.Throwable, printStackTrace[], void, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, bl>
<SAD, setCaretPosition[], SADNESS, org.jext.textarea.CsWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.jext.gui.PlasticSettings, setSelectedLookAndFeel[javax.swing.LookAndFeel], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setSelectedTheme[org.jext.gui.PlasticTheme], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setUseSystemFonts[java.lang.Boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setFontSizeHints[org.jext.gui.FontSizeHints], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setUseNarrowButtons[boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setTabIconsEnabled[boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setPlasticTabStyle[java.lang.String], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setPlasticHighContrastFocusEnabled[boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setMenuBarHeaderStyle[org.jext.gui.HeaderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setMenuBarPlasticBorderStyle[org.jext.gui.BorderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setMenuBarWindowsBorderStyle[org.jext.gui.BorderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setMenuBar3DHint[java.lang.Boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setToolBarHeaderStyle[org.jext.gui.HeaderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setToolBarPlasticBorderStyle[org.jext.gui.BorderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setToolBarWindowsBorderStyle[org.jext.gui.BorderStyle], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setToolBar3DHint[java.lang.Boolean], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setClearLookMode[org.jext.gui.ClearLookMode], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<org.jext.gui.PlasticSettings, setClearLookPolicyName[java.lang.String], void, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, settings>
<SAD, getName[], SADNESS, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, getName[], getPolicy()>
<SAD, getPolicy[], SADNESS, org.jext.gui.PlasticSettings, createDefault[], org.jext.gui.PlasticSettings, getClass[], ClearLookManager>
<SAD, getFlatMenus[], SADNESS, org.jext.gui.EnhancedMenuItem, EnhancedMenuItem[java.lang.String, java.lang.String], void, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.EnhancedMenuItem, EnhancedMenuItem[java.lang.String, java.lang.String], void, null, nothing here>
<javax.swing.UIManager, getFont[java.lang.Object], java.awt.Font, org.jext.gui.EnhancedMenuItem, EnhancedMenuItem[java.lang.String, java.lang.String], void, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.EnhancedMenuItem, EnhancedMenuItem[java.lang.String, java.lang.String], void, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.EnhancedMenuItem, EnhancedMenuItem[java.lang.String, java.lang.String], void, null, UIManager>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.gui.EnhancedMenuItem, getPreferredSize[], java.awt.Dimension, null, getFontMetrics(acceleratorFont)>
<java.awt.Toolkit, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.gui.EnhancedMenuItem, getPreferredSize[], java.awt.Dimension, stringWidth[java.lang.String], getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.jext.gui.EnhancedMenuItem, getPreferredSize[], java.awt.Dimension, getFontMetrics[java.awt.Font], nothing here>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, g>
<javax.swing.ButtonModel, isArmed[], boolean, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, getModel()>
<javax.swing.AbstractButton, getModel[], javax.swing.ButtonModel, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, isArmed[], nothing here>
<java.awt.Graphics, getFontMetrics[], java.awt.FontMetrics, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, g>
<javax.swing.JComponent, getInsets[], java.awt.Insets, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, g>
<javax.swing.JComponent, getWidth[], int, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, nothing here>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, fm>
<java.awt.Font, getSize[], int, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, null, getFont()>
<java.awt.Component, getFont[], java.awt.Font, org.jext.gui.EnhancedMenuItem, paint[java.awt.Graphics], void, getSize[], nothing here>
<javax.swing.ButtonModel, getActionCommand[], java.lang.String, org.jext.gui.EnhancedMenuItem, getActionCommand[], java.lang.String, null, getModel()>
<javax.swing.AbstractButton, getModel[], javax.swing.ButtonModel, org.jext.gui.EnhancedMenuItem, getActionCommand[], java.lang.String, getActionCommand[], nothing here>
<SAD, getTextArea[], SADNESS, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, MenuAction>
<SAD, setOneClick[], SADNESS, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<SAD, endCurrentEdit[], SADNESS, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, listenerList>
<SAD, isEditable[], SADNESS, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, event>
<org.jext.gui.EnhancedMenuItem, getActionCommand[], java.lang.String, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.event.ActionEvent, getModifiers[], int, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, event>
<java.awt.event.ActionListener, actionPerformed[java.awt.event.ActionEvent], void, org.jext.gui.EnhancedMenuItem, fireActionPerformed[java.awt.event.ActionEvent], void, null, ((ActionListener)listeners[i + 1])>
<org.jext.gui.JextMenu, setBorders[], void, org.jext.gui.JextMenu, JextMenu[], void, null, nothing here>
<org.jext.gui.JextMenu, setBorders[], void, org.jext.gui.JextMenu, JextMenu[java.lang.String], void, null, nothing here>
<SAD, getFlatMenus[], SADNESS, org.jext.gui.JextMenu, setBorders[], void, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.JextMenu, setBorders[], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.JextMenu, setBorders[], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.gui.JextMenu, setBorders[], void, setBorder[javax.swing.border.Border], nothing here>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, org.jext.gui.JextMenu, setBorders[], void, null, LineBorder>
<javax.swing.JMenu, getMenuComponents[], java.awt.Component[], org.jext.gui.JextMenu, freeze[], void, null, nothing here>
<javax.swing.JMenu, removeAll[], void, org.jext.gui.JextMenu, reset[], void, null, nothing here>
<javax.swing.JMenu, add[java.awt.Component], java.awt.Component, org.jext.gui.JextMenu, reset[], void, null, nothing here>
<javax.swing.AbstractButton, setBorderPainted[boolean], void, org.jext.gui.JextButton, init[], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.gui.JextButton, init[], void, null, nothing here>
<SAD, getButtonsHighlight[], SADNESS, org.jext.gui.JextButton, init[], void, null, Jext>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.gui.JextButton, init[], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.gui.JextButton, init[], void, null, nothing here>
<org.jext.gui.JextButton, init[], void, org.jext.gui.JextButton, JextButton[], void, null, nothing here>
<org.jext.gui.JextButton, init[], void, org.jext.gui.JextButton, JextButton[javax.swing.Icon], void, null, nothing here>
<org.jext.gui.JextButton, init[], void, org.jext.gui.JextButton, JextButton[java.lang.String], void, null, nothing here>
<org.jext.gui.JextButton, init[], void, org.jext.gui.JextButton, JextButton[java.lang.String, javax.swing.Icon], void, null, nothing here>
<javax.swing.AbstractButton, getIcon[], javax.swing.Icon, org.jext.gui.JextButton, setGrayed[boolean], void, null, nothing here>
<javax.swing.AbstractButton, getRolloverIcon[], javax.swing.Icon, org.jext.gui.JextButton, setGrayed[boolean], void, null, nothing here>
<java.awt.Toolkit, createImage[java.awt.image.ImageProducer], java.awt.Image, org.jext.gui.JextButton, setGrayed[boolean], void, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.jext.gui.JextButton, setGrayed[boolean], void, createImage[java.awt.image.ImageProducer], Toolkit>
<java.awt.Image, getSource[], java.awt.image.ImageProducer, org.jext.gui.JextButton, setGrayed[boolean], void, null, getImage()>
<javax.swing.ImageIcon, getImage[], java.awt.Image, org.jext.gui.JextButton, setGrayed[boolean], void, getSource[], coloredIcon>
<javax.swing.AbstractButton, setRolloverIcon[javax.swing.Icon], void, org.jext.gui.JextButton, setGrayed[boolean], void, null, nothing here>
<javax.swing.AbstractButton, setIcon[javax.swing.Icon], void, org.jext.gui.JextButton, setGrayed[boolean], void, null, nothing here>
<javax.swing.AbstractButton, setRolloverEnabled[boolean], void, org.jext.gui.JextButton, setGrayed[boolean], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, MenuAction>
<SAD, setOneClick[], SADNESS, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<SAD, endCurrentEdit[], SADNESS, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, listenerList>
<SAD, isEditable[], SADNESS, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, area>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, event>
<javax.swing.AbstractButton, getActionCommand[], java.lang.String, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.event.ActionEvent, getModifiers[], int, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, event>
<java.awt.event.ActionListener, actionPerformed[java.awt.event.ActionEvent], void, org.jext.gui.JextButton, fireActionPerformed[java.awt.event.ActionEvent], void, null, ((ActionListener)listeners[i + 1])>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.AbstractButton, setBorderPainted[boolean], void, org.jext.gui.JextButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.AbstractButton, setBorderPainted[boolean], void, org.jext.gui.JextButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextSeparatorUI, JextSeparatorUI[], void, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextSeparatorUI, JextSeparatorUI[], void, null, UIManager>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, org.jext.gui.JextSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.JProgressBar, setUI[javax.swing.plaf.ProgressBarUI], void, org.jext.gui.JextProgressBar, updateUI[], void, null, this>
<javax.swing.UIManager, getUI[javax.swing.JComponent], javax.swing.plaf.ComponentUI, org.jext.gui.JextProgressBar, updateUI[], void, null, UIManager>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, getSystemLookAndFeelClassName()>
<javax.swing.UIManager, getSystemLookAndFeelClassName[], java.lang.String, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], equals[java.lang.Object], UIManager>
<javax.swing.UIManager, getCrossPlatformLookAndFeelClassName[], java.lang.String, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, UIManager>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<javax.swing.UIManager, getSystemLookAndFeelClassName[], java.lang.String, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, UIManager>
<org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, nothing here>
<org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, nothing here>
<org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, nothing here>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, null, Class>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, null, skins>
<javax.swing.plaf.metal.MetalLookAndFeel, setCurrentTheme[javax.swing.plaf.metal.MetalTheme], void, org.jext.gui.BundledSkinFactory.MetalSkin, apply[], void, null, MetalLookAndFeel>
<javax.swing.UIManager, setLookAndFeel[java.lang.String], void, org.jext.gui.BundledSkinFactory.MetalSkin, apply[], void, null, UIManager>
<javax.swing.UIManager, getCrossPlatformLookAndFeelClassName[], java.lang.String, org.jext.gui.BundledSkinFactory.MetalSkin, apply[], void, null, UIManager>
<javax.swing.plaf.metal.MetalLookAndFeel, setCurrentTheme[javax.swing.plaf.metal.MetalTheme], void, org.jext.gui.BundledSkinFactory.JextSkin, apply[], void, null, MetalLookAndFeel>
<javax.swing.UIManager, setLookAndFeel[java.lang.String], void, org.jext.gui.BundledSkinFactory.JextSkin, apply[], void, null, UIManager>
<javax.swing.UIManager, getCrossPlatformLookAndFeelClassName[], java.lang.String, org.jext.gui.BundledSkinFactory.JextSkin, apply[], void, null, UIManager>
<SAD, createDefault[], SADNESS, org.jext.gui.BundledSkinFactory.JextSkin, apply[], void, null, PlasticSettings>
<javax.swing.UIManager, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.BundledSkinFactory.PlasticSkin, unapply[], void, null, UIManager>
<javax.swing.UIManager, get[java.lang.Object], java.lang.Object, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, UIManager>
<javax.swing.UIManager, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, UIManager>
<java.lang.Class, getClassLoader[], java.lang.ClassLoader, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, class>
<SAD, setDefaultIconSize[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, Options>
<javax.swing.UIManager, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, UIManager>
<SAD, isUseSystemFonts[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setGlobalFontSizeHints[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, Options>
<SAD, getFontSizeHints[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setUseNarrowButtons[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, Options>
<SAD, isUseNarrowButtons[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setTabIconsEnabled[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, Options>
<SAD, isTabIconsEnabled[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setMode[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, ClearLookManager>
<SAD, getClearLookMode[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setPolicy[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, ClearLookManager>
<SAD, getClearLookPolicyName[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<javax.swing.UIManager, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, UIManager>
<SAD, isPopupDropShadowEnabled[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setMyCurrentTheme[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, PlasticLookAndFeel>
<SAD, getSelectedTheme[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setTabStyle[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, PlasticLookAndFeel>
<SAD, getPlasticTabStyle[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<SAD, setHighContrastFocusColorsEnabled[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, PlasticLookAndFeel>
<SAD, isPlasticHighContrastFocusEnabled[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<javax.swing.plaf.ComponentUI, uninstallUI[javax.swing.JComponent], void, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, getUI()>
<javax.swing.AbstractButton, getUI[], javax.swing.plaf.ButtonUI, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, uninstallUI[javax.swing.JComponent], radio>
<javax.swing.plaf.ComponentUI, uninstallUI[javax.swing.JComponent], void, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, getUI()>
<javax.swing.AbstractButton, getUI[], javax.swing.plaf.ButtonUI, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, uninstallUI[javax.swing.JComponent], checkBox>
<javax.swing.UIManager, setLookAndFeel[javax.swing.LookAndFeel], void, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, UIManager>
<SAD, getSelectedLookAndFeel[], SADNESS, org.jext.gui.BundledSkinFactory.PlasticSkin, apply[], void, null, settings>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.gui.JextMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.gui.JextMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.gui.ModifiedCellRenderer, getListCellRendererComponent[javax.swing.JList, java.lang.Object, int, boolean, boolean], java.awt.Component, null, nothing here>
<SAD, getButtonsHighlight[], SADNESS, org.jext.gui.JextToggleButton, init[], void, null, Jext>
<javax.swing.AbstractButton, setFocusPainted[boolean], void, org.jext.gui.JextToggleButton, init[], void, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.gui.JextToggleButton, init[], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.gui.JextToggleButton, init[], void, null, nothing here>
<org.jext.gui.JextToggleButton, init[], void, org.jext.gui.JextToggleButton, JextToggleButton[], void, null, nothing here>
<org.jext.gui.JextToggleButton, init[], void, org.jext.gui.JextToggleButton, JextToggleButton[java.lang.String], void, null, nothing here>
<org.jext.gui.JextToggleButton, init[], void, org.jext.gui.JextToggleButton, JextToggleButton[javax.swing.Icon], void, null, nothing here>
<org.jext.gui.JextToggleButton, init[], void, org.jext.gui.JextToggleButton, JextToggleButton[java.lang.String, javax.swing.Icon], void, null, nothing here>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextToggleButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextToggleButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextToggleButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextToggleButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, getInsets[], java.awt.Insets, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, progressBar>
<javax.swing.JComponent, getWidth[], int, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, progressBar>
<javax.swing.JComponent, getHeight[], int, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, progressBar>
<javax.swing.plaf.basic.BasicProgressBarUI, getAmountFull[java.awt.Insets, int, int], int, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, nothing here>
<org.jext.gui.JextProgressBarUI, getHeaderBackground[], java.awt.Color, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, nothing here>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, UIManager>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g2>
<java.awt.Graphics2D, fill[java.awt.Shape], void, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g2>
<javax.swing.JProgressBar, isStringPainted[], boolean, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, progressBar>
<javax.swing.plaf.basic.BasicProgressBarUI, paintString[java.awt.Graphics, int, int, int, int, int, java.awt.Insets], void, org.jext.gui.JextProgressBarUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, nothing here>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextProgressBarUI, getHeaderBackground[], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextProgressBarUI, getHeaderBackground[], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextProgressBarUI, getHeaderBackground[], java.awt.Color, null, UIManager>
<SAD, getButtonsHighlight[], SADNESS, org.jext.gui.JextHighlightButton, init[], void, null, Jext>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.gui.JextHighlightButton, init[], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.gui.JextHighlightButton, init[], void, null, nothing here>
<org.jext.gui.JextHighlightButton, init[], void, org.jext.gui.JextHighlightButton, JextHighlightButton[], void, null, nothing here>
<org.jext.gui.JextHighlightButton, init[], void, org.jext.gui.JextHighlightButton, JextHighlightButton[java.lang.String], void, null, nothing here>
<org.jext.gui.JextHighlightButton, init[], void, org.jext.gui.JextHighlightButton, JextHighlightButton[javax.swing.Icon], void, null, nothing here>
<org.jext.gui.JextHighlightButton, init[], void, org.jext.gui.JextHighlightButton, JextHighlightButton[java.lang.String, javax.swing.Icon], void, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.gui.JextHighlightButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextHighlightButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextHighlightButton.MouseHandler, mouseEntered[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Component, isEnabled[], boolean, org.jext.gui.JextHighlightButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.JextHighlightButton.MouseHandler, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.UIManager, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.GenericSkin, apply[], void, null, UIManager>
<javax.swing.UIManager, setLookAndFeel[java.lang.String], void, org.jext.gui.GenericSkin, apply[], void, null, UIManager>
<javax.swing.UIManager, setLookAndFeel[javax.swing.LookAndFeel], void, org.jext.gui.GenericSkin, apply[], void, null, UIManager>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.gui.AbstractDisposer, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.gui.AbstractDisposer, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.gui.AbstractDisposer, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, getSeparatorText[], SADNESS, org.jext.gui.JextLabeledMenuSeparatorUI, JextLabeledMenuSeparatorUI[javax.swing.JComponent], void, null, ((JextLabeledMenuSeparator)c)>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextLabeledMenuSeparatorUI, JextLabeledMenuSeparatorUI[javax.swing.JComponent], void, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, org.jext.gui.JextLabeledMenuSeparatorUI, JextLabeledMenuSeparatorUI[javax.swing.JComponent], void, null, UIManager>
<java.awt.Graphics, setFont[java.awt.Font], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, getFontMetrics[], java.awt.FontMetrics, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.FontMetrics, getHeight[], int, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, fm>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, fm>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<java.awt.Graphics, setColor[java.awt.Color], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, g>
<java.awt.Component, getSize[], java.awt.Dimension, org.jext.gui.JextLabeledMenuSeparatorUI, paint[java.awt.Graphics, javax.swing.JComponent], void, null, c>
<javax.swing.JComponent, setOpaque[boolean], void, org.jext.gui.DisabledCellRenderer, DisabledCellRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.DisabledCellRenderer, DisabledCellRenderer[], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getBackground[], java.awt.Color, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.awt.Component, getForeground[], java.awt.Color, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, table>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, nothing here>
<java.lang.Object, toString[], java.lang.String, org.jext.gui.DisabledCellRenderer, getTableCellRendererComponent[javax.swing.JTable, java.lang.Object, boolean, boolean, int, int], java.awt.Component, null, value>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.AbstractOptionPane, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.AbstractOptionPane, addComponent[java.lang.String, java.awt.Component], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.AbstractOptionPane, addComponent[java.lang.String, java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.AbstractOptionPane, addComponent[java.lang.String, java.awt.Component], void, null, nothing here>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.AbstractOptionPane, addComponent[java.awt.Component], void, null, gridBag>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.AbstractOptionPane, addComponent[java.awt.Component], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.gui.AbstractOptionPane, AbstractOptionPane[java.lang.String], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.AbstractOptionPane, AbstractOptionPane[java.lang.String], void, null, nothing here>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, org.jext.gui.AbstractOptionPane, AbstractOptionPane[java.lang.String], void, null, BorderFactory>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, addOptionGroup[org.jext.gui.OptionGroup], void, null, members>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.OptionGroup, addOptionGroup[org.jext.gui.OptionGroup], void, null, members>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, addOptionPane[org.jext.gui.OptionPane], void, null, members>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.OptionGroup, addOptionPane[org.jext.gui.OptionPane], void, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, getMember[int], java.lang.Object, null, members>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.gui.OptionGroup, getMember[int], java.lang.Object, null, members>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, getMemberIndex[java.lang.Object], int, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, getMemberCount[], int, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, save[], void, null, members>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.gui.OptionGroup, save[], void, null, members>
<SAD, save[], SADNESS, org.jext.gui.OptionGroup, save[], void, null, ((OptionPane)elem)>
<org.jext.gui.OptionGroup, save[], void, org.jext.gui.OptionGroup, save[], void, null, ((OptionGroup)elem)>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.VoidComponent, update[java.awt.Graphics], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, org.jext.gui.VoidComponent, update[java.awt.Graphics], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.JSeparator, setUI[javax.swing.plaf.SeparatorUI], void, org.jext.gui.JextMenuSeparator, updateUI[], void, null, this>
<javax.swing.UIManager, getUI[javax.swing.JComponent], javax.swing.plaf.ComponentUI, org.jext.gui.JextMenuSeparator, updateUI[], void, null, UIManager>
<SAD, getProperty[], SADNESS, org.jext.gui.JextMenuSeparator, updateUI[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.gui.JextMenuSeparator, updateUI[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.gui.JextMenuSeparator, updateUI[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.gui.JextMenuSeparator, updateUI[], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.gui.FontSelector, FontSelector[java.lang.String], void, null, nothing here>
<org.jext.gui.FontSelector, changeFont[java.awt.Font], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.gui.FontSelector$SelectorFrame, getSelectedFont[], java.awt.Font, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, new SelectorFrame(getFont())>
<SAD, getFont[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, getSelectedFont[], nothing here>
<org.jext.gui.FontSelector, load[], void, org.jext.gui.FontSelector, FontSelector[java.lang.String], void, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.gui.FontSelector, load[], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector, load[], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.gui.FontSelector, load[], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector, load[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector, load[], void, null, Jext>
<org.jext.gui.FontSelector, changeFont[java.awt.Font], void, org.jext.gui.FontSelector, load[], void, null, nothing here>
<SAD, getFont[], SADNESS, org.jext.gui.FontSelector, save[], void, null, nothing here>
<SAD, setProperty[], SADNESS, org.jext.gui.FontSelector, save[], void, null, Jext>
<java.awt.Font, getFamily[], java.lang.String, org.jext.gui.FontSelector, save[], void, null, font>
<SAD, setProperty[], SADNESS, org.jext.gui.FontSelector, save[], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.gui.FontSelector, save[], void, null, String>
<java.awt.Font, getSize[], int, org.jext.gui.FontSelector, save[], void, null, font>
<SAD, setProperty[], SADNESS, org.jext.gui.FontSelector, save[], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.gui.FontSelector, save[], void, null, String>
<java.awt.Font, getStyle[], int, org.jext.gui.FontSelector, save[], void, null, font>
<SAD, setFont[], SADNESS, org.jext.gui.FontSelector, changeFont[java.awt.Font], void, null, nothing here>
<org.jext.gui.FontSelector, setFontLabel[], void, org.jext.gui.FontSelector, changeFont[java.awt.Font], void, null, nothing here>
<SAD, getFont[], SADNESS, org.jext.gui.FontSelector, setFontLabel[], void, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.gui.FontSelector, setFontLabel[], void, null, getSize())>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.gui.FontSelector, setFontLabel[], void, null, append(':')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.gui.FontSelector, setFontLabel[], void, append[int], getName())>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.gui.FontSelector, setFontLabel[], void, null, buf>
<java.awt.Font, getName[], java.lang.String, org.jext.gui.FontSelector, setFontLabel[], void, null, font>
<java.awt.Font, getSize[], int, org.jext.gui.FontSelector, setFontLabel[], void, null, font>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.gui.FontSelector, setFontLabel[], void, null, buf>
<java.awt.Font, getStyle[], int, org.jext.gui.FontSelector, setFontLabel[], void, null, font>
<SAD, setText[], SADNESS, org.jext.gui.FontSelector, setFontLabel[], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.gui.FontSelector, setFontLabel[], void, null, buf>
<javax.swing.JOptionPane, getFrameForComponent[java.awt.Component], java.awt.Frame, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, setLayout[java.awt.LayoutManager], nothing here>
<org.jext.gui.FontSelector$SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, fontsField>
<java.awt.Font, getName[], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, font>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, fontsField>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, fontsList>
<org.jext.gui.FontSelector$SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<javax.swing.JList, setSelectedValue[java.lang.Object, boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, sizesList>
<java.lang.String, valueOf[int], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, String>
<java.awt.Font, getSize[], int, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, font>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, sizesField>
<java.lang.String, valueOf[int], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, String>
<java.awt.Font, getSize[], int, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, font>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, sizesList>
<org.jext.gui.FontSelector$SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<javax.swing.JList, setSelectedIndex[int], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesList>
<java.awt.Font, getStyle[], int, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, font>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesField>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesList>
<javax.swing.JComponent, setEnabled[boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesField>
<javax.swing.JList, setCellRenderer[javax.swing.ListCellRenderer], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesList>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, fontsList>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, sizesList>
<javax.swing.JList, addListSelectionListener[javax.swing.event.ListSelectionListener], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, stylesList>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, listsPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, listsPanel>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, listsPanel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, examplePanel>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, examplePanel>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, buttonsPanel>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, ok>
<SAD, charAt[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, buttonsPanel>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<SAD, setMnemonic[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, cancel>
<SAD, charAt[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, mnemonic")>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Jext>
<SAD, addActionListener[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, ok>
<SAD, addActionListener[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, cancel>
<org.jext.gui.FontSelector$SelectorFrame, preview[], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, add[java.awt.Component, java.lang.Object], nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, getContentPane()>
<javax.swing.JDialog, getContentPane[], java.awt.Container, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, add[java.awt.Component, java.lang.Object], nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, example>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, example>
<javax.swing.JRootPane, setDefaultButton[javax.swing.JButton], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, getRootPane()>
<javax.swing.JDialog, getRootPane[], javax.swing.JRootPane, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, setDefaultButton[javax.swing.JButton], nothing here>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<javax.swing.JDialog, setDefaultCloseOperation[int], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<javax.swing.JList, setSelectedValue[java.lang.Object, boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, fontsList>
<java.awt.Font, getName[], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, font>
<java.awt.Window, pack[], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<SAD, centerComponent[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, Utilities>
<java.awt.Dialog, setResizable[boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<java.awt.Dialog, setVisible[boolean], void, org.jext.gui.FontSelector.SelectorFrame, SelectorFrame[java.awt.Font], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<java.awt.Window, dispose[], void, org.jext.gui.FontSelector.SelectorFrame, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.Window, dispose[], void, org.jext.gui.FontSelector.SelectorFrame, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.gui.FontSelector$SelectorFrame, buildFont[], java.awt.Font, org.jext.gui.FontSelector.SelectorFrame, getSelectedFont[], java.awt.Font, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.gui.FontSelector.SelectorFrame, buildFont[], java.awt.Font, null, Integer>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, buildFont[], java.awt.Font, null, sizesField>
<javax.swing.text.JTextComponent, getText[], java.lang.String, org.jext.gui.FontSelector.SelectorFrame, buildFont[], java.awt.Font, null, fontsField>
<javax.swing.JList, getSelectedIndex[], int, org.jext.gui.FontSelector.SelectorFrame, buildFont[], java.awt.Font, null, stylesList>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.gui.FontSelector.SelectorFrame, preview[], void, null, example>
<org.jext.gui.FontSelector$SelectorFrame, buildFont[], java.awt.Font, org.jext.gui.FontSelector.SelectorFrame, preview[], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, evt>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, fontsList>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, fontsField>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, sizesList>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, sizesField>
<javax.swing.JList, getSelectedValue[], java.lang.Object, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, stylesList>
<javax.swing.text.JTextComponent, setText[java.lang.String], void, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, stylesField>
<org.jext.gui.FontSelector$SelectorFrame, preview[], void, org.jext.gui.FontSelector.SelectorFrame, valueChanged[javax.swing.event.ListSelectionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, Jext>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, layout>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, panel>
<javax.swing.Box, createVerticalStrut[int], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, Box>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, layout>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, panel>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, layout>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, panel>
<javax.swing.Box, createVerticalStrut[int], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, Box>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, layout>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, panel>
<java.awt.GridBagLayout, setConstraints[java.awt.Component, java.awt.GridBagConstraints], void, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, layout>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.FontSelector.SelectorFrame, createTextFieldAndListPanel[java.lang.String, javax.swing.JTextField, javax.swing.JList], javax.swing.JPanel, null, panel>
<java.awt.GraphicsEnvironment, getAvailableFontFamilyNames[], java.lang.String[], org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, getLocalGraphicsEnvironment()>
<java.awt.GraphicsEnvironment, getLocalGraphicsEnvironment[], java.awt.GraphicsEnvironment, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], getAvailableFontFamilyNames[], GraphicsEnvironment>
<java.lang.String, indexOf[java.lang.String], int, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameArray[i]>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<java.util.Vector, size[], int, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.DockChangeHandler, dockChangeHandler[int, int], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, org.jext.gui.DockChangeHandler, dockChangeHandler[int, int], void, put[java.lang.Object, java.lang.Object], UIManager>
<javax.swing.JSeparator, setUI[javax.swing.plaf.SeparatorUI], void, org.jext.gui.JextSeparator, updateUI[], void, null, this>
<javax.swing.UIManager, getUI[javax.swing.JComponent], javax.swing.plaf.ComponentUI, org.jext.gui.JextSeparator, updateUI[], void, null, UIManager>
<javax.swing.UIDefaults, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.OptionPane, load[], void, null, getDefaults()>
<javax.swing.UIManager, getDefaults[], javax.swing.UIDefaults, org.jext.gui.OptionPane, load[], void, put[java.lang.Object, java.lang.Object], UIManager>
<org.jext.gui.JextLabeledMenuSeparator, updateUI[], void, org.jext.gui.JextLabeledMenuSeparator, JextLabeledMenuSeparator[java.lang.String], void, null, nothing here>
<javax.swing.JSeparator, setUI[javax.swing.plaf.SeparatorUI], void, org.jext.gui.JextLabeledMenuSeparator, updateUI[], void, null, this>
<javax.swing.UIManager, getUI[javax.swing.JComponent], javax.swing.plaf.ComponentUI, org.jext.gui.JextLabeledMenuSeparator, updateUI[], void, null, UIManager>
<org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, org.jext.gui.SkinManager, SkinManager[], void, null, nothing here>
<SAD, getSkins[], SADNESS, org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, null, sf>
<SAD, isAvailable[], SADNESS, org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, null, skins[i]>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, null, skinList>
<SAD, getSkinInternName[], SADNESS, org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, null, skins[i]>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, skinList>
<SAD, getProperty[], SADNESS, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, Jext>
<SAD, unapply[], SADNESS, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, currSkin>
<SAD, apply[], SADNESS, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, newSkin>
<java.io.PrintStream, println[java.lang.String], void, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, err>
<java.io.PrintStream, println[char[]], void, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, err>
<SAD, getProperty[], SADNESS, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, Jext>
<java.lang.Throwable, printStackTrace[], void, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, t>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, skinList>
<SAD, apply[], SADNESS, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, newSkin>
<java.io.PrintStream, println[java.lang.String], void, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, err>
<java.io.PrintStream, println[java.lang.String], void, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, err>
<org.jext.gui.Dockable, getDockingStatus[], int, org.jext.gui.Dockable, isDocked[], boolean, null, nothing here>
<java.awt.Component, isVisible[], boolean, org.jext.gui.Dockable, getDockingStatus[], int, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, getDockingStatus[], int, isVisible[], nothing here>
<org.jext.gui.Dockable, getDockingStatus[], int, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<java.awt.Window, toFront[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, toFront[], nothing here>
<org.jext.gui.Dockable, showFrame[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<java.awt.Window, dispose[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, dispose[], nothing here>
<java.lang.Throwable, printStackTrace[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, (new Exception())>
<javax.swing.JTabbedPane, remove[java.awt.Component], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, ownerPane>
<org.jext.gui.Dockable, putInPane[int], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<javax.swing.JTabbedPane, remove[java.awt.Component], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, ownerPane>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, content>
<javax.swing.JFrame, setContentPane[java.awt.Container], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, setContentPane[java.awt.Container], nothing here>
<org.jext.gui.Dockable, showFrame[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<java.awt.Window, dispose[], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, dispose[], nothing here>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, getContentPane[], nothing here>
<javax.swing.JFrame, setContentPane[java.awt.Container], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, setDockingStatus[int], void, setContentPane[java.awt.Container], nothing here>
<javax.swing.JComponent, getMinimumSize[], java.awt.Dimension, org.jext.gui.Dockable, setDockingStatus[int], void, null, content>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, content>
<org.jext.gui.Dockable, putInPane[int], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<SAD, dockChangeHandler[], SADNESS, org.jext.gui.Dockable, setDockingStatus[int], void, null, handler>
<org.jext.gui.Dockable, _setDockingStatus[int], void, org.jext.gui.Dockable, setDockingStatus[int], void, null, nothing here>
<java.awt.Window, pack[], void, org.jext.gui.Dockable, showFrame[], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, showFrame[], void, pack[], nothing here>
<java.awt.Window, setVisible[boolean], void, org.jext.gui.Dockable, showFrame[], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, showFrame[], void, setVisible[boolean], nothing here>
<java.awt.Window, toFront[], void, org.jext.gui.Dockable, showFrame[], void, null, getFrame()>
<org.jext.gui.Dockable, getFrame[], javax.swing.JFrame, org.jext.gui.Dockable, showFrame[], void, toFront[], nothing here>
<SAD, getVerticalTabbedPane[], SADNESS, org.jext.gui.Dockable, putInPane[int], void, null, parent>
<SAD, getHorizontalTabbedPane[], SADNESS, org.jext.gui.Dockable, putInPane[int], void, null, parent>
<javax.swing.JTabbedPane, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.gui.Dockable, putInPane[int], void, null, ownerPane>
<java.awt.Window, setBackground[java.awt.Color], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<javax.swing.JComponent, setFont[java.awt.Font], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.gui.SplashScreen, SplashScreen[], void, null, pane>
<SAD, getIcon[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, Utilities>
<java.lang.Math, abs[int], int, org.jext.gui.SplashScreen, SplashScreen[], void, null, Math>
<java.util.Random, nextInt[], int, org.jext.gui.SplashScreen, SplashScreen[], void, null, new Random()>
<SAD, setStringPainted[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, progress>
<SAD, setFont[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, progress>
<SAD, setString[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, progress>
<SAD, setBorder[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, progress>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.gui.SplashScreen, SplashScreen[], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.gui.SplashScreen, SplashScreen[], void, null, pane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, pane>
<java.awt.Container, add[java.awt.Component], java.awt.Component, org.jext.gui.SplashScreen, SplashScreen[], void, null, getContentPane()>
<javax.swing.JWindow, getContentPane[], java.awt.Container, org.jext.gui.SplashScreen, SplashScreen[], void, add[java.awt.Component], nothing here>
<java.awt.Window, pack[], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, Jext>
<org.jext.gui.SplashScreen, createClassesList[], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<java.lang.Thread, setDaemon[boolean], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, thread>
<java.lang.Thread, setPriority[int], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, thread>
<SAD, centerComponent[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, Utilities>
<SAD, setCursorOnWait[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, Utilities>
<java.awt.Window, setVisible[boolean], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<java.lang.Thread, start[], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, thread>
<org.jext.gui.SplashScreen, setProgress[int], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<org.jext.gui.SplashScreen, setText[java.lang.String], void, org.jext.gui.SplashScreen, SplashScreen[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.gui.SplashScreen, SplashScreen[], void, null, Jext>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.gui.SplashScreen, createClassesList[], void, null, class>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.gui.SplashScreen, createClassesList[], void, null, in>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.io.BufferedReader, close[], void, org.jext.gui.SplashScreen, createClassesList[], void, null, in>
<java.util.Vector, size[], int, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.lang.Class, getName[], java.lang.String, org.jext.gui.SplashScreen, run[], void, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends org.jext.gui.SplashScreen>, org.jext.gui.SplashScreen, run[], void, getName[], nothing here>
<java.lang.String, lastIndexOf[int], int, org.jext.gui.SplashScreen, run[], void, null, packs>
<java.lang.String, substring[int, int], java.lang.String, org.jext.gui.SplashScreen, run[], void, null, packs>
<java.lang.String, lastIndexOf[int], int, org.jext.gui.SplashScreen, run[], void, null, n>
<SAD, setString[], SADNESS, org.jext.gui.SplashScreen, run[], void, null, progress>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.gui.SplashScreen, run[], void, null, Class>
<SAD, setValue[], SADNESS, org.jext.gui.SplashScreen, run[], void, null, progress>
<org.jext.gui.SplashScreen, setText[java.lang.String], void, org.jext.gui.SplashScreen, run[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.gui.SplashScreen, run[], void, null, Jext>
<org.jext.gui.SplashScreen, stop[], void, org.jext.gui.SplashScreen, run[], void, null, nothing here>
<SAD, setString[], SADNESS, org.jext.gui.SplashScreen, setText[java.lang.String], void, null, progress>
<SAD, setValue[], SADNESS, org.jext.gui.SplashScreen, setProgress[int], void, null, progress>
<SAD, getTextArea[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSoftTab[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.lang.Math, max[int, int], int, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, getLeadingWhiteSpaceWidth[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, createWhiteSpace[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.lang.Throwable, printStackTrace[], void, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, ble>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.LeftIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectedText[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, toUpperCase[], java.lang.String, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, selection>
<SAD, getDocument[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineOfOffset[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineEndOffset[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, charAt[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, getText(start,end)>
<SAD, getText[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, charAt[], textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.String, toUpperCase[], java.lang.String, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, toString()>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, toUpperCase[], append(c)>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, toString[], new StringBuffer(1)>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.ToUpperCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, JOptionPane>
<SAD, getJextParent[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getTextArea[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getText[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.EndLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectedText[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, selection>
<SAD, getDocument[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineOfOffset[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineEndOffset[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, charAt[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, getText(start,end)>
<SAD, getText[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, charAt[], textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, toString()>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, toLowerCase[], append(c)>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, toString[], new StringBuffer(1)>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.ToLowerCase, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.SpacesToTabs, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, in>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.SpacesToTabs, doSpacesToTabs[java.lang.String, int], java.lang.String, null, buf>
<SAD, getTextArea[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSoftTab[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getLeadingWhiteSpaceWidth[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, createWhiteSpace[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.lang.Throwable, printStackTrace[], void, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, ble>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.RightIndent, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getJextParent[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getBooleanProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, print[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printSyntax>
<SAD, setPrintLineNumbers[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printOptions>
<SAD, getBooleanProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setPrintHeader[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printOptions>
<SAD, getBooleanProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setWrapText[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printOptions>
<SAD, getBooleanProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, setPageFont[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printOptions>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Integer, intValue[], int, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, fontSize")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.awt.print.PageFormat, getPaper[], java.awt.print.Paper, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pgfmt>
<java.awt.print.PageFormat, setOrientation[int], void, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pgfmt>
<java.lang.Integer, intValue[], int, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageOrientation")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageWidth")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageHeight")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageImgX")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageImgY")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageImgWidth")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.Double, doubleValue[], double, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pageImgHeight")))>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.awt.print.Paper, setSize[double, double], void, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, paper>
<java.awt.print.Paper, setImageableArea[double, double, double, double], void, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, paper>
<java.awt.print.PageFormat, setPaper[java.awt.print.Paper], void, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, pgfmt>
<SAD, setPageFormat[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, printOptions>
<SAD, getDocument[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getName[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSoftTab[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTabSize[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, showError[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.Print, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getTextArea[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, append[java.lang.Object], buffer>
<SAD, trim[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, getText(start,end)>
<SAD, getText[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, trim[], textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(index)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, getEndOffset[], map>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, buffer>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, updateStatus[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, null, getJextParent()>
<SAD, getJextParent[], SADNESS, org.jext.actions.JoinLines, actionPerformed[java.awt.event.ActionEvent], void, updateStatus[], textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, comment>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(i)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, getStartOffset[], map>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(i)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, getEndOffset[], map>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, append(comment)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, append[java.lang.Object], buf>
<SAD, getText[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(startLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, getStartOffset[], map>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(endLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, getEndOffset[], map>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.SimpleComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getJextParent[], SADNESS, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, tokens>
<org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, open[], SADNESS, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.io.PrintStream, println[java.lang.Object], void, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, err>
<java.io.File, exists[], boolean, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, source>
<java.io.File, canRead[], boolean, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, source>
<java.io.File, getName[], java.lang.String, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, source>
<java.io.File, length[], long, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, source>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, reader>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, append(line)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, append[char], buf>
<java.io.BufferedReader, close[], void, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, reader>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.CreateTemplate, loadFile[java.lang.String], java.lang.String, null, buf>
<SAD, getAllMatches[], SADNESS, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, re>
<SAD, toString[], SADNESS, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, matches[i]>
<java.util.HashMap, containsKey[java.lang.Object], boolean, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, tokens>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, key>
<java.lang.String, length[], int, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, key>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon, java.lang.Object[], java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, Jext>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, tokens>
<java.util.Set, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, keySet()>
<java.util.HashMap, keySet[], java.util.Set, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, toArray[java.lang.Object[]], tokens>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, currKey>
<SAD, substituteAll[], SADNESS, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, re>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, tokens>
<SAD, substituteAll[], SADNESS, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, re>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, tokens>
<SAD, chooseFile[], SADNESS, org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, null, Utilities>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, null, writer>
<java.lang.String, length[], int, org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, null, output>
<java.io.BufferedWriter, flush[], void, org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, null, writer>
<java.io.BufferedWriter, close[], void, org.jext.actions.CreateTemplate, saveOutput[org.jext.actions.JextFrame, java.lang.String], java.lang.String, null, writer>
<SAD, getJextParent[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, createFile[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, JOptionPane>
<SAD, getJextParent[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, open[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.net.URL, openStream[], java.io.InputStream, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, url>
<SAD, showError[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, showError[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<java.lang.Throwable, toString[], java.lang.String, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, ioe>
<SAD, close[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, close[], SADNESS, org.jext.actions.OpenUrl, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getJextParent[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getTextAreas[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getDocument[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getProperty[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getLineText[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getCaretLine[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getLineStartOffset[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, getCaretLine[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<SAD, findWordStart[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<SAD, showWaitCursor[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getLineCount[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<org.jext.actions.CompleteWordAll, getWord[java.lang.String, int, java.lang.String], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, _word>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.String, indexOf[int], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, noWordSep>
<java.lang.String, regionMatches[int, java.lang.String, int, int], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<org.jext.actions.CompleteWordAll, getWord[java.lang.String, int, java.lang.String], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, _word>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, iterator[], java.util.Iterator, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.Iterator, hasNext[], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, iter>
<java.lang.Math, min[int, int], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.Iterator, next[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, iter>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, setSelectedText[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.AbstractCollection, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<SAD, setSelectedText[], SADNESS, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, textAreaAnt>
<java.lang.String, substring[int], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, length[], int, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str2>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWordAll, getDivergentIndex[java.lang.String, java.lang.String], int, null, str2>
<SAD, findWordEnd[], SADNESS, org.jext.actions.CompleteWordAll, getWord[java.lang.String, int, java.lang.String], java.lang.String, null, TextUtilities>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWordAll, getWord[java.lang.String, int, java.lang.String], java.lang.String, null, line>
<SAD, getTextArea[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(i)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, getStartOffset[], map>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, getElement(i)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, getEndOffset[], map>
<org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.SimpleUnComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, doc>
<SAD, getProperty[], SADNESS, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, textArea>
<java.lang.String, trim[], java.lang.String, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, line>
<java.lang.String, indexOf[java.lang.String], int, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, tmp>
<java.lang.String, indexOf[java.lang.String], int, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, line>
<java.lang.String, length[], int, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, comment>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, doc>
<java.lang.String, length[], int, org.jext.actions.SimpleUnComment, possiblyUncomentThisLine[javax.swing.text.Document, org.jext.actions.JextTextArea, int, int], void, null, comment>
<SAD, getTextArea[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getDocument[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.Math, max[int, int], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getLeadingWhiteSpace[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<java.lang.Math, max[int, int], int, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.BoxComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<org.jext.actions.RemoveWhitespace, doRemove[java.lang.String], java.lang.String, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.RemoveWhitespace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.jext.actions.RemoveWhitespace, doRemove[java.lang.String], java.lang.String, null, in>
<java.lang.Character, isWhitespace[char], boolean, org.jext.actions.RemoveWhitespace, doRemove[java.lang.String], java.lang.String, null, Character>
<java.lang.String, charAt[int], char, org.jext.actions.RemoveWhitespace, doRemove[java.lang.String], java.lang.String, null, in>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.RemoveWhitespace, doRemove[java.lang.String], java.lang.String, null, in>
<SAD, getTextArea[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, insertString[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, insertString[], textArea>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, insertString[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, insertString[], textArea>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.WingComment, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<org.jext.actions.WordCount, doWordCount[java.lang.String], void, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.String, valueOf[int], java.lang.String, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<javax.swing.JOptionPane, showMessageDialog[java.awt.Component, java.lang.Object, java.lang.String, int], void, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, JOptionPane>
<SAD, getJextParent[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.WordCount, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<java.lang.String, length[], int, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, text>
<java.lang.String, trim[], java.lang.String, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, text>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, buf>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, buf>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, buf>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, buf>
<java.lang.String, length[], int, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, text>
<java.lang.String, charAt[int], char, org.jext.actions.WordCount, doWordCount[java.lang.String], void, null, text>
<javax.swing.JOptionPane, showInputDialog[java.awt.Component, java.lang.Object, java.lang.String, int], java.lang.String, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, JOptionPane>
<SAD, getJextParent[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getTextArea[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionStart[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<SAD, getSelectionEnd[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getText[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.BeginLine, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getJextParent[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getTextArea[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getDocument[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, findWordStart[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<SAD, showWaitCursor[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<SAD, getLineCount[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<org.jext.actions.CompleteWord, getWord[java.lang.String, int, java.lang.String], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, _word>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, word>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, Character>
<java.lang.String, indexOf[int], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, noWordSep>
<java.lang.String, regionMatches[int, java.lang.String, int, int], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, line>
<org.jext.actions.CompleteWord, getWord[java.lang.String, int, java.lang.String], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, _word>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, iterator[], java.util.Iterator, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.Iterator, hasNext[], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, iter>
<java.lang.Math, min[int, int], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.Iterator, next[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, iter>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, setSelectedText[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.AbstractCollection, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<SAD, hideWaitCursor[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<SAD, setSelectedText[], SADNESS, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, substring[int], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, first())>
<java.lang.String, valueOf[java.lang.Object], java.lang.String, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, String>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, length[], int, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str2>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str1>
<java.lang.String, charAt[int], char, org.jext.actions.CompleteWord, getDivergentIndex[java.lang.String, java.lang.String], int, null, str2>
<SAD, findWordEnd[], SADNESS, org.jext.actions.CompleteWord, getWord[java.lang.String, int, java.lang.String], java.lang.String, null, TextUtilities>
<java.lang.String, substring[int, int], java.lang.String, org.jext.actions.CompleteWord, getWord[java.lang.String, int, java.lang.String], java.lang.String, null, line>
<SAD, getTextArea[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getText[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, getLength[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, st>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, getLength[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, trim[], java.lang.String, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, nextToken()>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, trim[], st>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, updateStatus[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, null, getJextParent()>
<SAD, getJextParent[], SADNESS, org.jext.actions.JoinAllLines, actionPerformed[java.awt.event.ActionEvent], void, updateStatus[], textArea>
<SAD, getTextArea[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, getDefaultRootElement[], javax.swing.text.Element, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Element, getElementCount[], int, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, lineElement>
<SAD, getTabSize[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getText[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, doc>
<SAD, endCompoundEdit[], SADNESS, org.jext.actions.TabsToSpaces, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, in>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.actions.TabsToSpaces, doTabsToSpaces[java.lang.String, int], java.lang.String, null, buf>
<SAD, getAction[], SADNESS, org.jext.menus.JextRecentMenu, JextRecentMenu[org.jext.menus.JextFrame, javax.swing.JMenu], void, null, Jext>
<javax.swing.JMenu, removeAll[], void, org.jext.menus.JextRecentMenu, removeRecent[], void, null, recentMenu>
<SAD, getProperty[], SADNESS, org.jext.menus.JextRecentMenu, removeRecent[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextRecentMenu, removeRecent[], void, null, prop>
<SAD, unsetProperty[], SADNESS, org.jext.menus.JextRecentMenu, removeRecent[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.menus.JextRecentMenu, removeRecent[], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.menus.JextRecentMenu, removeRecent[], void, null, nothing>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextRecentMenu, removeRecent[], void, null, recentMenu>
<SAD, recentChanged[], SADNESS, org.jext.menus.JextRecentMenu, removeRecent[], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.menus.JextRecentMenu, createRecent[], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, Jext>
<javax.swing.JMenu, removeAll[], void, org.jext.menus.JextRecentMenu, createRecent[], void, null, recentMenu>
<SAD, getProperty[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextRecentMenu, createRecent[], void, null, recent[i]>
<java.io.File, exists[], boolean, org.jext.menus.JextRecentMenu, createRecent[], void, null, (new File(recent[i]))>
<SAD, getShortStringOf[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, Utilities>
<SAD, setActionCommand[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, recentItem>
<SAD, addActionListener[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, recentItem>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextRecentMenu, createRecent[], void, null, recentMenu>
<SAD, unsetProperty[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, Jext>
<SAD, setEnabled[], SADNESS, org.jext.menus.JextRecentMenu, createRecent[], void, null, nothing>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextRecentMenu, createRecent[], void, null, recentMenu>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, file>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, recent[i]>
<SAD, setProperty[], SADNESS, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, Jext>
<org.jext.menus.JextRecentMenu, createRecent[], void, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, nothing here>
<SAD, recentChanged[], SADNESS, org.jext.menus.JextRecentMenu, saveRecent[java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.menus.TemplatesMenu, TemplatesMenu[], void, null, Jext>
<org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, org.jext.menus.TemplatesMenu, TemplatesMenu[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.menus.TemplatesMenu, TemplatesMenu[], void, null, Jext>
<java.io.File, exists[], boolean, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, directory>
<SAD, getProperty[], SADNESS, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, Jext>
<javax.swing.JMenuItem, setEnabled[boolean], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, retval>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, menu>
<java.io.File, getName[], java.lang.String, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, directory>
<java.io.File, isDirectory[], boolean, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, directory>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, file>
<SAD, getProperty[], SADNESS, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, Jext>
<java.io.File, list[], java.lang.String[], org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, directory>
<SAD, getProperty[], SADNESS, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, Jext>
<javax.swing.JMenuItem, setEnabled[boolean], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, retval>
<SAD, add[], SADNESS, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, _menu>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, menu>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, Arrays>
<org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, nothing here>
<java.lang.String, lastIndexOf[int], int, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, fileName>
<java.lang.String, substring[int, int], java.lang.String, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, fileName>
<javax.swing.AbstractButton, setActionCommand[java.lang.String], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, retval>
<javax.swing.AbstractButton, addActionListener[java.awt.event.ActionListener], void, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, retval>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.TemplatesMenu, processDirectory[javax.swing.JMenu, java.lang.String], void, null, menu>
<java.util.Hashtable, containsKey[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<java.io.PrintStream, println[java.lang.String], void, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, err>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<javax.swing.JMenuBar, add[javax.swing.JMenu], javax.swing.JMenu, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, nothing here>
<org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, nothing here>
<SAD, itemAdded[], SADNESS, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, frame>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, ID>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, ID>
<javax.swing.JMenu, getMenuComponent[int], java.awt.Component, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, _menu>
<javax.swing.JMenu, getItemCount[], int, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, _menu>
<SAD, getFlatMenus[], SADNESS, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, add[javax.swing.JMenuItem], _menu>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, addSeparator[], _menu>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, _menu>
<javax.swing.JMenu, insert[javax.swing.JMenuItem, int], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, _menu>
<org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, nothing here>
<SAD, itemAdded[], SADNESS, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, frame>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, menus>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, ID>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, ID>
<javax.swing.JMenu, getMenuComponent[int], java.awt.Component, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, _menu>
<javax.swing.JMenu, getItemCount[], int, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, _menu>
<SAD, getFlatMenus[], SADNESS, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, add[javax.swing.JMenuItem], _menu>
<javax.swing.JPopupMenu, addSeparator[], void, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, addSeparator[], _menu>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, _menu>
<SAD, getFlatMenus[], SADNESS, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, Jext>
<javax.swing.JPopupMenu, insert[javax.swing.Action, int], void, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, insert[javax.swing.Action, int], _menu>
<javax.swing.JPopupMenu, insert[java.awt.Component, int], void, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, getPopupMenu()>
<javax.swing.JMenu, getPopupMenu[], javax.swing.JPopupMenu, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, insert[java.awt.Component, int], _menu>
<javax.swing.JMenu, insert[javax.swing.JMenuItem, int], javax.swing.JMenuItem, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, _menu>
<org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, nothing here>
<SAD, itemAdded[], SADNESS, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, frame>
<java.awt.Component, getParent[], java.awt.Container, org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, null, nothing here>
<java.awt.Component, getParent[], java.awt.Container, org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, null, parent>
<java.awt.Component, getParent[], java.awt.Container, org.jext.menus.JextMenuBar, getJextFrame[], org.jext.menus.JextFrame, null, parent>
<SAD, addCaretListener[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, addFocusListener[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<org.jext.JextTextArea, setMouseWheel[], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<javax.swing.undo.UndoManager, setLimit[int], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, undo>
<SAD, setBorder[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, setInvalidLinesPainted[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, setInvalidLinesPainted[], nothing here>
<java.awt.Font, getName[], java.lang.String, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, defaultFont>
<java.awt.Font, getSize[], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, defaultFont>
<java.awt.Font, getStyle[], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, defaultFont>
<SAD, setFont[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, setRightClickPopup[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<org.jext.JextTextArea, setTabSize[int], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<org.jext.JextTextArea, resetLineTerm[], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, getFont[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<SAD, setMinimumSize[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, fm>
<SAD, setPreferredSize[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, fm>
<SAD, add[], SADNESS, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, lineTermSelector>
<org.jext.JextTextArea, getLineTermName[], java.lang.String, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, nothing here>
<javax.swing.JComboBox, addActionListener[java.awt.event.ActionListener], void, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, lineTermSelector>
<org.jext.JextTextArea, getJextParent[], org.jext.JextFrame, org.jext.JextTextArea, JextTextArea[org.jext.JextFrame], void, null, this>
<javax.swing.JComboBox, getSelectedIndex[], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, lineTermSelector>
<org.jext.JextTextArea, setLineTerm[int], void, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, updateStatus[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, setLineTerm[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<org.jext.JextTextArea, isDirty[], boolean, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, this>
<SAD, setDirtyIcon[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, setDirtyIcon[], parent>
<SAD, setCleanIcon[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, getTabbedPane()>
<SAD, getTabbedPane[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, setCleanIcon[], parent>
<SAD, setStatus[], SADNESS, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, resetLineTerm[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, resetLineTerm[], void, null, "">
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, resetLineTerm[], void, null, System>
<SAD, setProperty[], SADNESS, org.jext.JextTextArea, resetLineTerm[], void, null, Jext>
<org.jext.JextTextArea, storeOrigLineTerm[], void, org.jext.JextTextArea, resetLineTerm[], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, isLineTermChanged[], boolean, null, myLineTerm>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, getLineTermName[], java.lang.String, null, "\r">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, getLineTermName[], java.lang.String, null, "\n">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, getLineTermName[], java.lang.String, null, "\r\n">
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, rotateLineTerm[], void, null, myLineTerm>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, rotateLineTerm[], void, null, myLineTerm>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, rotateLineTerm[], void, null, myLineTerm>
<org.jext.JextTextArea, isLineTermChanged[], boolean, org.jext.JextTextArea, rotateLineTerm[], void, null, nothing here>
<SAD, setChanged[], SADNESS, org.jext.JextTextArea, rotateLineTerm[], void, null, parent>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, rotateLineTerm[], void, null, nothing here>
<SAD, setSaved[], SADNESS, org.jext.JextTextArea, rotateLineTerm[], void, null, parent>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.JextTextArea, rotateLineTerm[], void, null, lineTermSelector>
<org.jext.JextTextArea, getLineTermName[], java.lang.String, org.jext.JextTextArea, rotateLineTerm[], void, null, nothing here>
<SAD, charAt[], SADNESS, org.jext.JextTextArea, setMouseWheel[], void, null, JDK_VERSION>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.JextTextArea, setMouseWheel[], void, null, Class>
<java.lang.Class, getMethod[java.lang.String, java.lang.Class[]], java.lang.reflect.Method, org.jext.JextTextArea, setMouseWheel[], void, null, cl>
<java.lang.Object, getClass[], java.lang.Class<? extends org.jext.JextTextArea>, org.jext.JextTextArea, setMouseWheel[], void, null, nothing here>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, org.jext.JextTextArea, setMouseWheel[], void, null, m>
<SAD, addCustomHighlight[], SADNESS, org.jext.JextTextArea, initSearchHighlight[], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextTextArea, initSearchHighlight[], void, addCustomHighlight[], nothing here>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, getProperty[java.lang.String], java.lang.String, null, Jext>
<SAD, removeUndoableEditListener[], SADNESS, org.jext.JextTextArea, setDocument[org.gjt.sp.jedit.syntax.SyntaxDocument], void, null, document>
<SAD, removeDocumentListener[], SADNESS, org.jext.JextTextArea, setDocument[org.gjt.sp.jedit.syntax.SyntaxDocument], void, null, document>
<SAD, addDocumentListener[], SADNESS, org.jext.JextTextArea, setDocument[org.gjt.sp.jedit.syntax.SyntaxDocument], void, null, document>
<SAD, addUndoableEditListener[], SADNESS, org.jext.JextTextArea, setDocument[org.gjt.sp.jedit.syntax.SyntaxDocument], void, null, document>
<org.jext.JextTextArea, changeFont[], void, org.jext.JextTextArea, setFontName[java.lang.String], void, null, nothing here>
<org.jext.JextTextArea, changeFont[], void, org.jext.JextTextArea, setFontSize[int], void, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.jext.JextTextArea, setFontSize[int], void, null, nothing here>
<SAD, getFont[], SADNESS, org.jext.JextTextArea, setFontSize[int], void, null, nothing here>
<SAD, setMinimumSize[], SADNESS, org.jext.JextTextArea, setFontSize[int], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.JextTextArea, setFontSize[int], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.JextTextArea, setFontSize[int], void, null, fm>
<SAD, repaint[], SADNESS, org.jext.JextTextArea, setFontSize[int], void, null, nothing here>
<org.jext.JextTextArea, changeFont[], void, org.jext.JextTextArea, setFontStyle[int], void, null, nothing here>
<SAD, repaint[], SADNESS, org.jext.JextTextArea, setFontStyle[int], void, null, nothing here>
<SAD, setFont[], SADNESS, org.jext.JextTextArea, changeFont[], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextTextArea, changeFont[], void, setFont[], nothing here>
<SAD, showWaitCursor[], SADNESS, org.jext.JextTextArea, waitingCursor[boolean], void, null, parent>
<SAD, hideWaitCursor[], SADNESS, org.jext.JextTextArea, waitingCursor[boolean], void, null, parent>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, getTabIndent[], boolean, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, getEnterIndent[], boolean, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, getSoftTab[], boolean, null, Jext>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, beginOperation[], void, null, nothing here>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, endOperation[], void, null, nothing here>
<SAD, getSystemClipboard[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, getSystemClipboard[], nothing here>
<java.lang.String, replace[char, char], java.lang.String, org.jext.JextTextArea, filteredPaste[], void, null, stringFlavor))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.jext.JextTextArea, filteredPaste[], void, null, getContents(this)>
<java.awt.datatransfer.Clipboard, getContents[java.lang.Object], java.awt.datatransfer.Transferable, org.jext.JextTextArea, filteredPaste[], void, getTransferData[java.awt.datatransfer.DataFlavor], clipboard>
<SAD, length[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, getFindPattern()>
<SAD, getFindPattern[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, length[], Search>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Jext>
<SAD, getFindPattern[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Search>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Jext>
<SAD, substituteAll[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, regexp>
<SAD, getReplacePattern[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Search>
<SAD, getFindPattern[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Search>
<SAD, getReplacePattern[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Search>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, Jext>
<SAD, substitute[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, matcher>
<SAD, setSelectedText[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, nothing here>
<SAD, beep[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.JextTextArea, filteredPaste[], void, beep[], nothing here>
<org.jext.JextTextArea, beginOperation[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, isEmpty[], boolean, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, getName[], java.lang.String, org.jext.JextTextArea, newFile[], void, null, nothing here>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextTextArea, newFile[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, newFile[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, newFile[], void, null, Jext>
<org.jext.JextTextArea, saveContent[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, endOperation[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, endOperation[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<SAD, removeUndoableEditListener[], SADNESS, org.jext.JextTextArea, newFile[], void, null, document>
<SAD, removeDocumentListener[], SADNESS, org.jext.JextTextArea, newFile[], void, null, document>
<org.jext.JextTextArea, clean[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, discard[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<SAD, setEditable[], SADNESS, org.jext.JextTextArea, newFile[], void, null, nothing here>
<SAD, setText[], SADNESS, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, resetLineTerm[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<SAD, addUndoableEditListener[], SADNESS, org.jext.JextTextArea, newFile[], void, null, document>
<SAD, addDocumentListener[], SADNESS, org.jext.JextTextArea, newFile[], void, null, document>
<SAD, setNew[], SADNESS, org.jext.JextTextArea, newFile[], void, null, parent>
<SAD, setTextAreaName[], SADNESS, org.jext.JextTextArea, newFile[], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, newFile[], void, null, Jext>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, newFile[], void, null, parent>
<org.jext.JextTextArea, setParentTitle[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, endOperation[], void, org.jext.JextTextArea, newFile[], void, null, nothing here>
<org.jext.JextTextArea, isNew[], boolean, org.jext.JextTextArea, autoSave[], void, null, nothing here>
<org.jext.JextTextArea, saveContent[], void, org.jext.JextTextArea, autoSave[], void, null, nothing here>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, insert[java.lang.String, int], void, null, nothing here>
<SAD, setSelectedText[], SADNESS, org.jext.JextTextArea, insert[java.lang.String, int], void, null, nothing here>
<org.jext.JextTextArea, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, userInput[char], void, null, nothing here>
<org.jext.JextTextArea, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, userInput[char], void, null, nothing here>
<java.lang.String, indexOf[int], int, org.jext.JextTextArea, userInput[char], void, null, indentCloseBrackets>
<java.lang.String, indexOf[int], int, org.jext.JextTextArea, userInput[char], void, null, indentOpenBrackets>
<SAD, indent[], SADNESS, org.jext.JextTextArea, userInput[char], void, indexOf[int], Indent>
<SAD, getCaretLine[], SADNESS, org.jext.JextTextArea, userInput[char], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, getTabSize[], int, null, Jext>
<java.lang.Integer, intValue[], int, org.jext.JextTextArea, getTabSize[], int, null, i>
<SAD, putProperty[], SADNESS, org.jext.JextTextArea, setTabSize[int], void, null, document>
<SAD, getWorkspaces[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, parent>
<SAD, setTitle[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, Jext>
<SAD, getName[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, ws>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, Jext>
<SAD, getShortStringOf[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, Utilities>
<org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, org.jext.JextTextArea, setParentTitle[], void, null, nothing here>
<SAD, getWorkspaces[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, parent>
<SAD, setTitle[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, parent>
<SAD, getName[], SADNESS, org.jext.JextTextArea, setParentTitle[], void, null, ws>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, null, Jext>
<java.lang.String, substring[int], java.lang.String, org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, null, file>
<java.lang.String, lastIndexOf[java.lang.String], int, org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, null, file>
<org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, org.jext.JextTextArea, getName[], java.lang.String, null, nothing here>
<org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, org.jext.JextTextArea, setColorizing[java.lang.String], void, null, nothing here>
<SAD, getTokenMarker[], SADNESS, org.jext.JextTextArea, setColorizing[java.lang.String], void, null, getMode(mode)>
<SAD, getMode[], SADNESS, org.jext.JextTextArea, setColorizing[java.lang.String], void, getTokenMarker[], Jext>
<org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, org.jext.JextTextArea, setColorizing[org.jext.Mode], void, null, nothing here>
<SAD, getModeName[], SADNESS, org.jext.JextTextArea, setColorizing[org.jext.Mode], void, null, mode>
<SAD, getTokenMarker[], SADNESS, org.jext.JextTextArea, setColorizing[org.jext.Mode], void, null, mode>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, mode>
<SAD, setTokenMarker[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, nothing here>
<SAD, setBracketHighlightEnabled[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, setBracketHighlightEnabled[], nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, "on">
<org.jext.JextTextArea, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, nothing here>
<SAD, setProperty[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, Jext>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, parent>
<SAD, repaint[], SADNESS, org.jext.JextTextArea, enableColorizing[java.lang.String, org.jext.TokenMarker], void, null, nothing here>
<org.jext.JextTextArea, getFile[], java.io.File, org.jext.JextTextArea, checkLastModificationTime[], void, null, nothing here>
<java.io.File, lastModified[], long, org.jext.JextTextArea, checkLastModificationTime[], void, null, file>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, checkLastModificationTime[], void, null, nothing here>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextTextArea, checkLastModificationTime[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, checkLastModificationTime[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, checkLastModificationTime[], void, null, Jext>
<org.jext.JextTextArea, open[java.lang.String], void, org.jext.JextTextArea, checkLastModificationTime[], void, null, nothing here>
<SAD, length[], SADNESS, org.jext.JextTextArea, zipContent[], void, null, getText()>
<SAD, getText[], SADNESS, org.jext.JextTextArea, zipContent[], void, length[], nothing here>
<org.jext.JextTextArea, isNew[], boolean, org.jext.JextTextArea, zipContent[], void, null, nothing here>
<SAD, showMessage[], SADNESS, org.jext.JextTextArea, zipContent[], void, null, Utilities>
<SAD, chooseFile[], SADNESS, org.jext.JextTextArea, zipContent[], void, null, Utilities>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JextTextArea, zipContent[], void, null, zipFile>
<java.io.File, exists[], boolean, org.jext.JextTextArea, zipContent[], void, null, (new File(zipFile))>
<org.jext.JextTextArea, zip[java.lang.String], void, org.jext.JextTextArea, zipContent[], void, exists[], nothing here>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextTextArea, zipContent[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, zipContent[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, zipContent[], void, null, Jext>
<org.jext.JextTextArea, zip[java.lang.String], void, org.jext.JextTextArea, zipContent[], void, null, nothing here>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, zip[java.lang.String], void, null, nothing here>
<java.util.zip.ZipOutputStream, putNextEntry[java.util.zip.ZipEntry], void, org.jext.JextTextArea, zip[java.lang.String], void, null, out>
<java.io.File, getName[], java.lang.String, org.jext.JextTextArea, zip[java.lang.String], void, null, (new File(currentFile))>
<org.jext.JextTextArea, getLineTerm[], java.lang.String, org.jext.JextTextArea, zip[java.lang.String], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, org.jext.JextTextArea, zip[java.lang.String], void, null, document>
<javax.swing.text.Element, getElementCount[], int, org.jext.JextTextArea, zip[java.lang.String], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.JextTextArea, zip[java.lang.String], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.JextTextArea, zip[java.lang.String], void, null, line>
<SAD, getBytes[], SADNESS, org.jext.JextTextArea, zip[java.lang.String], void, null, getEndOffset() - start - 1) + newline)>
<SAD, getText[], SADNESS, org.jext.JextTextArea, zip[java.lang.String], void, null, nothing here>
<javax.swing.text.Element, getEndOffset[], int, org.jext.JextTextArea, zip[java.lang.String], void, null, line>
<java.util.zip.ZipOutputStream, write[byte[], int, int], void, org.jext.JextTextArea, zip[java.lang.String], void, null, out>
<java.util.zip.ZipOutputStream, closeEntry[], void, org.jext.JextTextArea, zip[java.lang.String], void, null, out>
<java.util.zip.ZipOutputStream, close[], void, org.jext.JextTextArea, zip[java.lang.String], void, null, out>
<SAD, showError[], SADNESS, org.jext.JextTextArea, zip[java.lang.String], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, zip[java.lang.String], void, null, Jext>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, zip[java.lang.String], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<org.jext.JextTextArea, isNew[], boolean, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<SAD, chooseFile[], SADNESS, org.jext.JextTextArea, saveContent[], void, null, Utilities>
<java.io.File, exists[], boolean, org.jext.JextTextArea, saveContent[], void, null, (new File(fileToSave))>
<org.jext.JextTextArea, save[java.lang.String], void, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextTextArea, saveContent[], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, saveContent[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, saveContent[], void, null, Jext>
<org.jext.JextTextArea, save[java.lang.String], void, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<org.jext.JextTextArea, save[java.lang.String], void, org.jext.JextTextArea, saveContent[], void, null, nothing here>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<java.io.File, lastModified[], long, org.jext.JextTextArea, save[java.lang.String], void, null, _file>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextTextArea, save[java.lang.String], void, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Jext>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Jext>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, save[java.lang.String], void, null, System>
<org.jext.JextTextArea, getLineTerm[], java.lang.String, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, document>
<javax.swing.text.Element, getElementCount[], int, org.jext.JextTextArea, save[java.lang.String], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.JextTextArea, save[java.lang.String], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.JextTextArea, save[java.lang.String], void, null, line>
<SAD, getText[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, document>
<javax.swing.text.Element, getEndOffset[], int, org.jext.JextTextArea, save[java.lang.String], void, null, line>
<java.io.BufferedWriter, write[char[], int, int], void, org.jext.JextTextArea, save[java.lang.String], void, null, out>
<java.io.Writer, write[java.lang.String], void, org.jext.JextTextArea, save[java.lang.String], void, null, out>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.JextTextArea, save[java.lang.String], void, null, map>
<javax.swing.text.Element, getElementCount[], int, org.jext.JextTextArea, save[java.lang.String], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.JextTextArea, save[java.lang.String], void, null, line>
<SAD, getText[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, document>
<javax.swing.text.Element, getEndOffset[], int, org.jext.JextTextArea, save[java.lang.String], void, null, line>
<java.io.BufferedWriter, write[char[], int, int], void, org.jext.JextTextArea, save[java.lang.String], void, null, out>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Jext>
<java.io.Writer, write[java.lang.String], void, org.jext.JextTextArea, save[java.lang.String], void, null, out>
<java.io.BufferedWriter, close[], void, org.jext.JextTextArea, save[java.lang.String], void, null, out>
<org.jext.JextTextArea, storeOrigLineTerm[], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, save[java.lang.String], void, null, file>
<SAD, setTextAreaName[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, parent>
<org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<SAD, saveRecent[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, parent>
<org.jext.JextTextArea, setParentTitle[], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<java.io.File, lastModified[], long, org.jext.JextTextArea, save[java.lang.String], void, null, _file>
<org.jext.JextTextArea, isNew[], boolean, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<org.jext.JextTextArea, clean[], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<SAD, setSaved[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, parent>
<SAD, showError[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, save[java.lang.String], void, null, Jext>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, save[java.lang.String], void, null, nothing here>
<org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int], void, org.jext.JextTextArea, open[java.lang.String], void, null, nothing here>
<org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, org.jext.JextTextArea, open[java.lang.String, boolean], void, null, nothing here>
<org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int], void, null, nothing here>
<org.jext.JextTextArea, beginOperation[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, path>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, path>
<org.jext.JextTextArea, endOperation[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, removeUndoableEditListener[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<SAD, removeDocumentListener[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<org.jext.JextTextArea, clean[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, discard[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<java.io.File, canWrite[], boolean, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, toLoad>
<SAD, setEditable[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, setEditable[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<java.io.File, length[], long, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, toLoad>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Jext>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, System>
<java.io.InputStreamReader, read[char[], int, int], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, in>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.io.InputStreamReader, close[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, in>
<org.jext.JextTextArea, resetLineTerm[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Jext>
<org.jext.JextTextArea, setLineTerm[java.lang.String], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, setLineTerm[java.lang.String], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, setLineTerm[java.lang.String], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, storeOrigLineTerm[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, lineTermSelector>
<org.jext.JextTextArea, getLineTermName[], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, setLineTerm[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, getJextParent()>
<org.jext.JextTextArea, getJextParent[], org.jext.JextFrame, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, setLineTerm[], nothing here>
<javax.swing.JComboBox, getSelectedIndex[], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, lineTermSelector>
<java.lang.StringBuffer, length[], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, charAt[int], char, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, length[], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, setLength[int], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<java.lang.StringBuffer, length[], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<SAD, remove[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<org.jext.JextTextArea, getLength[], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, insertString[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, buffer>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, setNew[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<SAD, setTextAreaName[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<org.jext.JextTextArea, getFileName[java.lang.String], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, saveRecent[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<java.io.File, lastModified[], long, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, getFile()>
<org.jext.JextTextArea, getFile[], java.io.File, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, lastModified[], nothing here>
<java.io.File, getName[], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, (new File(path))>
<java.lang.String, substring[int], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, path>
<java.lang.String, lastIndexOf[int], int, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, path>
<SAD, setTextAreaName[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<org.jext.JextTextArea, setDirty[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, setChanged[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<java.io.InputStreamReader, close[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, _in>
<org.jext.JextTextArea, setParentTitle[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<java.lang.String, toLowerCase[], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, path>
<SAD, size[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, modes>
<SAD, get[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, modes>
<SAD, getModeName[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, modeClass>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, _mode>
<SAD, globToRE[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Jext>
<SAD, isMatch[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, regexp>
<org.jext.JextTextArea, setColorizing[java.lang.String], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, setColorizing[java.lang.String], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<SAD, addUndoableEditListener[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<SAD, addDocumentListener[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, document>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, parent>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, bl>
<SAD, showError[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Jext>
<SAD, showError[], SADNESS, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, Utilities>
<java.lang.Throwable, toString[], java.lang.String, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, io>
<org.jext.JextTextArea, endOperation[], void, org.jext.JextTextArea, open[java.lang.String, java.io.InputStreamReader, int, boolean, boolean], void, null, nothing here>
<org.jext.JextTextArea, resetLineTerm[], void, org.jext.JextTextArea, setNewFlag[boolean], void, null, nothing here>
<javax.swing.JComboBox, setSelectedItem[java.lang.Object], void, org.jext.JextTextArea, setNewFlag[boolean], void, null, lineTermSelector>
<org.jext.JextTextArea, getLineTermName[], java.lang.String, org.jext.JextTextArea, setNewFlag[boolean], void, null, nothing here>
<org.jext.JextTextArea, getLength[], int, org.jext.JextTextArea, isEmpty[], boolean, null, nothing here>
<org.jext.JextTextArea, isLineTermChanged[], boolean, org.jext.JextTextArea, isDirty[], boolean, null, nothing here>
<javax.swing.undo.UndoManager, discardAllEdits[], void, org.jext.JextTextArea, discard[], void, null, undo>
<SAD, createPosition[], SADNESS, org.jext.JextTextArea, setAnchor[], void, null, document>
<SAD, getCaretPosition[], SADNESS, org.jext.JextTextArea, setAnchor[], void, null, nothing here>
<SAD, beep[], SADNESS, org.jext.JextTextArea, gotoAnchor[], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.jext.JextTextArea, gotoAnchor[], void, beep[], nothing here>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, gotoAnchor[], void, null, nothing here>
<javax.swing.text.Position, getOffset[], int, org.jext.JextTextArea, gotoAnchor[], void, null, anchor>
<javax.swing.text.Position, getOffset[], int, org.jext.JextTextArea, getAnchorOffset[], int, null, anchor>
<org.jext.JextTextArea, beginCompoundEdit[boolean], void, org.jext.JextTextArea, beginCompoundEdit[], void, null, nothing here>
<org.jext.JextTextArea, endCurrentEdit[], void, org.jext.JextTextArea, beginCompoundEdit[boolean], void, null, nothing here>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, beginCompoundEdit[boolean], void, null, nothing here>
<org.jext.JextTextArea, beginCompoundEdit[boolean], void, org.jext.JextTextArea, beginProtectedCompoundEdit[], void, null, nothing here>
<org.jext.JextTextArea, endCompoundEdit[boolean], void, org.jext.JextTextArea, endCompoundEdit[], void, null, nothing here>
<javax.swing.undo.CompoundEdit, end[], void, org.jext.JextTextArea, endCompoundEdit[boolean], void, null, compoundEdit>
<javax.swing.undo.CompoundEdit, canUndo[], boolean, org.jext.JextTextArea, endCompoundEdit[boolean], void, null, compoundEdit>
<javax.swing.undo.UndoManager, addEdit[javax.swing.undo.UndoableEdit], boolean, org.jext.JextTextArea, endCompoundEdit[boolean], void, null, undo>
<org.jext.JextTextArea, waitingCursor[boolean], void, org.jext.JextTextArea, endCompoundEdit[boolean], void, null, nothing here>
<org.jext.JextTextArea, endCompoundEdit[boolean], void, org.jext.JextTextArea, endProtectedCompoundEdit[], void, null, nothing here>
<SAD, getLength[], SADNESS, org.jext.JextTextArea, getLength[], int, null, document>
<org.jext.JextTextArea, getOperation[], boolean, org.jext.JextTextArea, undoableEditHappened[javax.swing.event.UndoableEditEvent], void, null, nothing here>
<javax.swing.undo.CompoundEdit, addEdit[javax.swing.undo.UndoableEdit], boolean, org.jext.JextTextArea, undoableEditHappened[javax.swing.event.UndoableEditEvent], void, null, currentEdit>
<javax.swing.event.UndoableEditEvent, getEdit[], javax.swing.undo.UndoableEdit, org.jext.JextTextArea, undoableEditHappened[javax.swing.event.UndoableEditEvent], void, null, e>
<javax.swing.undo.CompoundEdit, addEdit[javax.swing.undo.UndoableEdit], boolean, org.jext.JextTextArea, undoableEditHappened[javax.swing.event.UndoableEditEvent], void, null, compoundEdit>
<javax.swing.event.UndoableEditEvent, getEdit[], javax.swing.undo.UndoableEdit, org.jext.JextTextArea, undoableEditHappened[javax.swing.event.UndoableEditEvent], void, null, e>
<javax.swing.undo.CompoundEdit, isSignificant[], boolean, org.jext.JextTextArea, endCurrentEdit[], void, null, currentEdit>
<javax.swing.undo.CompoundEdit, end[], void, org.jext.JextTextArea, endCurrentEdit[], void, null, currentEdit>
<javax.swing.undo.CompoundEdit, canUndo[], boolean, org.jext.JextTextArea, endCurrentEdit[], void, null, currentEdit>
<javax.swing.undo.UndoManager, addEdit[javax.swing.undo.UndoableEdit], boolean, org.jext.JextTextArea, endCurrentEdit[], void, null, undo>
<org.jext.JextTextArea, getOperation[], boolean, org.jext.JextTextArea, changedUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, changedUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, setDirty[], void, org.jext.JextTextArea, changedUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, setChanged[], SADNESS, org.jext.JextTextArea, changedUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, changedUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<org.jext.JextTextArea, getOperation[], boolean, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, setDirty[], void, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, setChanged[], SADNESS, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<javax.swing.event.DocumentEvent, getLength[], int, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, e>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, e>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, e>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, insertUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<SAD, updateStatus[], SADNESS, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<org.jext.JextTextArea, getOperation[], boolean, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.jext.JextTextArea, setDirty[], void, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, setChanged[], SADNESS, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<SAD, setCaretPosition[], SADNESS, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, e>
<SAD, fireJextEvent[], SADNESS, org.jext.JextTextArea, removeUpdate[javax.swing.event.DocumentEvent], void, null, parent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, getCurrentFile[], java.lang.String, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, getLength[], int, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, isDirty[], boolean, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, isNew[], boolean, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<javax.swing.text.Position, getOffset[], int, org.jext.JextTextArea, toString[], java.lang.String, null, anchor>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, getFontName[], java.lang.String, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, getFontStyle[], int, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<org.jext.JextTextArea, getFontSize[], int, org.jext.JextTextArea, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JextTextArea, toString[], java.lang.String, null, buf>
<SAD, getBatchMode[], SADNESS, org.jext.JextTextArea.FocusHandler, focusGained[java.awt.event.FocusEvent], void, null, parent>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.JextTextArea.FocusHandler, focusGained[java.awt.event.FocusEvent], void, null, SwingUtilities>
<org.jext.JextTextArea, checkLastModificationTime[], void, java.lang.Object, run[], void, null, nothing here>
<SAD, updateStatus[], SADNESS, org.jext.JextTextArea.CaretHandler, caretUpdate[javax.swing.event.CaretEvent], void, null, parent>
<java.lang.Thread, start[], void, org.jext.JextTextArea.JextTextAreaPopupMenu, JextTextAreaPopupMenu[org.jext.JextTextArea], void, null, nothing here>
<SAD, read[], SADNESS, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, XPopupReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, class>
<SAD, getFlatMenus[], SADNESS, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, Jext>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, popupMenu>
<javax.swing.border.LineBorder, createBlackLineBorder[], javax.swing.border.Border, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, LineBorder>
<SAD, setRightClickPopup[], SADNESS, org.jext.JextTextArea.JextTextAreaPopupMenu, run[], void, null, area>
<SAD, setPromptPattern[], SADNESS, org.jext.JextFrame, getConsole[], org.jext.Console, null, c>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, getConsole[], org.jext.Console, null, Jext>
<SAD, displayPrompt[], SADNESS, org.jext.JextFrame, getConsole[], org.jext.Console, null, c>
<SAD, getFrame[], SADNESS, org.jext.JextFrame, getDawnLogWindow[], org.jext.AbstractLogWindow, null, getInstance(this)>
<SAD, getInstance[], SADNESS, org.jext.JextFrame, getDawnLogWindow[], org.jext.AbstractLogWindow, getFrame[], DawnLogWindow>
<SAD, getFrame[], SADNESS, org.jext.JextFrame, getPythonLogWindow[], org.jext.AbstractLogWindow, null, getInstance(this)>
<SAD, getInstance[], SADNESS, org.jext.JextFrame, getPythonLogWindow[], org.jext.AbstractLogWindow, getFrame[], PythonLogWindow>
<SAD, getContainingDock[], SADNESS, org.jext.JextFrame, getDawnDock[], org.jext.Dockable, null, getDawnLogWindow()>
<org.jext.JextFrame, getDawnLogWindow[], org.jext.AbstractLogWindow, org.jext.JextFrame, getDawnDock[], org.jext.Dockable, getContainingDock[], nothing here>
<SAD, getContainingDock[], SADNESS, org.jext.JextFrame, getPythonDock[], org.jext.Dockable, null, getPythonLogWindow()>
<org.jext.JextFrame, getPythonLogWindow[], org.jext.AbstractLogWindow, org.jext.JextFrame, getPythonDock[], org.jext.Dockable, getContainingDock[], nothing here>
<javax.swing.JFileChooser, setDialogType[int], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogTitle[java.lang.String], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, Jext>
<javax.swing.JFileChooser, getAccessory[], javax.swing.JComponent, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setAccessory[javax.swing.JComponent], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, getChoosableFileFilters[], javax.swing.filechooser.FileFilter[], org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<SAD, getColorizingMode[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, getTextArea()>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, getColorizingMode[], nothing here>
<SAD, size[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, modesFileFilters>
<SAD, get[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, modesFileFilters>
<javax.swing.JFileChooser, addChoosableFileFilter[javax.swing.filechooser.FileFilter], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, _mode>
<SAD, getModeName[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, filter>
<javax.swing.JFileChooser, setFileFilter[javax.swing.filechooser.FileFilter], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, getAcceptAllFileFilter[], javax.swing.filechooser.FileFilter, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogType[int], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogTitle[java.lang.String], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, Jext>
<javax.swing.JFileChooser, setAccessory[javax.swing.JComponent], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, resetChoosableFileFilters[], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogType[int], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setDialogTitle[java.lang.String], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, Jext>
<javax.swing.JFileChooser, setAccessory[javax.swing.JComponent], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, resetChoosableFileFilters[], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, setSelectedFile[java.io.File], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<javax.swing.JFileChooser, rescanCurrentDirectory[], void, org.jext.JextFrame, getFileChooser[int], javax.swing.JFileChooser, null, chooser>
<org.jext.JextFrame, fireJextEvent[int], void, org.jext.JextFrame, setBatchMode[boolean], void, null, nothing here>
<org.jext.JextFrame, fireJextEvent[int], void, org.jext.JextFrame, setBatchMode[boolean], void, null, nothing here>
<SAD, freeze[], SADNESS, org.jext.JextFrame, freeze[], void, null, getJextToolBar()>
<org.jext.JextFrame, getJextToolBar[], org.jext.JextToolBar, org.jext.JextFrame, freeze[], void, freeze[], nothing here>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JextFrame, itemAdded[java.awt.Component], void, null, transientItems>
<SAD, reset[], SADNESS, org.jext.JextFrame, reset[], void, null, getJextToolBar()>
<org.jext.JextFrame, getJextToolBar[], org.jext.JextToolBar, org.jext.JextFrame, reset[], void, reset[], nothing here>
<java.util.ArrayList, size[], int, org.jext.JextFrame, reset[], void, null, transientItems>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextFrame, reset[], void, null, transientItems>
<java.awt.Component, getParent[], java.awt.Container, org.jext.JextFrame, reset[], void, null, comp>
<java.awt.Container, remove[java.awt.Component], void, org.jext.JextFrame, reset[], void, null, parent>
<org.jext.JextFrame, getJextMenuBar[], org.jext.JextMenuBar, org.jext.JextFrame, reset[], void, null, nothing here>
<SAD, reset[], SADNESS, org.jext.JextFrame, reset[], void, null, getJextMenuBar()>
<org.jext.JextFrame, getJextMenuBar[], org.jext.JextMenuBar, org.jext.JextFrame, reset[], void, reset[], nothing here>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.JextFrame, fireJextEvent[int], void, null, jextListeners>
<java.util.Iterator, hasNext[], boolean, org.jext.JextFrame, fireJextEvent[int], void, null, iterator>
<SAD, jextEventFired[], SADNESS, org.jext.JextFrame, fireJextEvent[int], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.JextFrame, fireJextEvent[int], void, jextEventFired[], iterator>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, next[], jextListeners>
<java.util.Iterator, hasNext[], boolean, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, null, iterator>
<SAD, jextEventFired[], SADNESS, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, jextEventFired[], iterator>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, null, t>
<java.util.ArrayList, clear[], void, org.jext.JextFrame, removeAllJextListeners[], void, null, jextListeners>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JextFrame, addJextListener[org.jext.JextListener], void, null, jextListeners>
<java.util.ArrayList, remove[java.lang.Object], boolean, org.jext.JextFrame, removeJextListener[org.jext.JextListener], void, null, jextListeners>
<org.jext.JextFrame, loadProperties[boolean], void, org.jext.JextFrame, loadProperties[], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadProperties[boolean], void, null, Jext>
<org.jext.JextFrame, startAutoSave[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<org.jext.JextFrame, stopAutoSave[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadProperties[boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadProperties[boolean], void, null, Jext>
<java.lang.Math, abs[int], int, org.jext.JextFrame, loadProperties[boolean], void, null, Math>
<java.util.Random, nextInt[], int, org.jext.JextFrame, loadProperties[boolean], void, null, new Random()>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadProperties[boolean], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadProperties[boolean], void, null, Jext>
<javax.swing.JLabel, getText[], java.lang.String, org.jext.JextFrame, loadProperties[boolean], void, null, status>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, loadProperties[boolean], void, null, status>
<org.jext.JextFrame, triggerTabbedPanes[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<org.jext.JextFrame, splitEditor[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<org.jext.JextFrame, loadButtonsProperties[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<org.jext.JextFrame, loadConsoleProperties[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<org.jext.JextFrame, loadTextAreaProperties[], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<SAD, setParentTitle[], SADNESS, org.jext.JextFrame, loadProperties[boolean], void, null, getTextArea()>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, loadProperties[boolean], void, setParentTitle[], nothing here>
<org.jext.JextFrame, fireJextEvent[int], void, org.jext.JextFrame, loadProperties[boolean], void, null, nothing here>
<SAD, setGrayed[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, toolBar>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, Jext>
<SAD, setVisible[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, toolBar>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, Jext>
<SAD, setHighlightColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, JextButton>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, Jext>
<SAD, setHighlightColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, JextHighlightButton>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, Jext>
<SAD, setHighlightColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, JextToggleButton>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadButtonsProperties[], void, null, Jext>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, triggerTabbedPanes[], void, null, Jext>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.JextFrame, triggerTabbedPanes[], void, null, vTabbedPane>
<javax.swing.JSplitPane, getLeftComponent[], java.awt.Component, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, setDividerSize[int], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, setLeftComponent[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, resetToPreferredSizes[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, getLeftComponent[], java.awt.Component, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, setDividerSize[int], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, setLeftComponent[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<javax.swing.JSplitPane, resetToPreferredSizes[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, split>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, triggerTabbedPanes[], void, null, Jext>
<javax.swing.JTabbedPane, getTabCount[], int, org.jext.JextFrame, triggerTabbedPanes[], void, null, hTabbedPane>
<javax.swing.JSplitPane, getDividerSize[], int, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, setDividerSize[int], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, setTopComponent[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, resetToPreferredSizes[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, setBottomComponent[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, triggerTabbedPanes[], void, null, centerPane>
<java.awt.Container, validate[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, centerPane>
<javax.swing.JComponent, setVisible[boolean], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, getDividerSize[], int, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, setDividerSize[int], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, setTopComponent[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<javax.swing.JSplitPane, resetToPreferredSizes[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, splitter>
<java.awt.Container, remove[java.awt.Component], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, centerPane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, triggerTabbedPanes[], void, null, centerPane>
<java.awt.Container, validate[], void, org.jext.JextFrame, triggerTabbedPanes[], void, null, centerPane>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, Jext>
<SAD, getContent[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, rightFrame>
<javax.swing.JSplitPane, setTopComponent[java.awt.Component], void, org.jext.JextFrame, splitEditor[], void, null, textAreaSplitter>
<SAD, setContent[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, rightFrame>
<javax.swing.JSplitPane, setDividerLocation[double], void, org.jext.JextFrame, splitEditor[], void, null, textAreaSplitter>
<javax.swing.JSplitPane, setOrientation[int], void, org.jext.JextFrame, splitEditor[], void, null, textAreaSplitter>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, splitEditor[], void, null, "Horizontal">
<SAD, getProperty[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, Jext>
<org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, org.jext.JextFrame, splitEditor[], void, null, nothing here>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, splitEditor[], void, null, nothing here>
<javax.swing.JSplitPane, remove[java.awt.Component], void, org.jext.JextFrame, splitEditor[], void, null, textAreaSplitter>
<SAD, setContent[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, rightFrame>
<SAD, validate[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, rightFrame>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, splitEditor[], void, null, nothing here>
<SAD, grabFocus[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, textArea>
<SAD, requestFocus[], SADNESS, org.jext.JextFrame, splitEditor[], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, loadConsoleProperties[], void, null, promptPattern>
<SAD, getPromptPattern[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, setPromptPattern[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, displayPrompt[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, setErrorColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<SAD, setPromptColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<SAD, setOutputColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<SAD, setInfoColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<SAD, setBgColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<SAD, setSelectionColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, console>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadConsoleProperties[], void, null, Jext>
<org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, org.jext.JextFrame, loadTextAreaProperties[], void, null, nothing here>
<SAD, setElectricScroll[], SADNESS, org.jext.JextFrame, loadTextAreaProperties[], void, null, splittedTextArea>
<SAD, loadTextAreas[], SADNESS, org.jext.JextFrame, loadTextAreaProperties[], void, null, workspaces>
<SAD, setTabSize[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setTabSize[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, setProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setElectricScroll[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setElectricScroll[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, System>
<SAD, setFontSize[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setFontSize[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, setProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setFontStyle[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setFontStyle[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, setProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setFontName[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, setLinesInterval[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setLinesInterval[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, setWrapGuideOffset[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setWrapGuideOffset[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, setAntiAliasingEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setLineHighlightEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setEOLMarkersPainted[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setBlockCaretEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setLinesIntervalHighlightEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setWrapGuideEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setBracketHighlightColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setLineHighlightColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setHighlightColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setEOLMarkerColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setCaretColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setSelectionColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setBackground[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setForeground[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setLinesIntervalHighlightColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setWrapGuideColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, painter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<org.jext.JextFrame, loadGutter[org.jext.Gutter], void, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, nothing here>
<SAD, getGutter[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, nothing here>
<SAD, isNew[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, isEmpty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, setColorizing[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, putClientProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setCaretBlinkEnabled[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, Jext>
<SAD, setParentTitle[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, repaint[], SADNESS, org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setGutterWidth[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, setCollapsed[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, "yes">
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setLineNumberingEnabled[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, "no">
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setHighlightInterval[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, setAntiAliasingEnabled[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setBackground[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setForeground[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setHighlightedForeground[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setCaretMark[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setAnchorMark[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setSelectionMark[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, "right">
<SAD, setLineNumberAlignment[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, "center">
<SAD, setLineNumberAlignment[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, setLineNumberAlignment[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setBorder[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseColor[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<java.lang.Integer, parseInt[java.lang.String], int, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Integer>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, Jext>
<SAD, setFont[], SADNESS, org.jext.JextFrame, loadGutter[org.jext.Gutter], void, null, gutter>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, parseStyle[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, Jext>
<SAD, setStyles[], SADNESS, org.jext.JextFrame, loadStyles[org.jext.TextAreaPainter], void, null, painter>
<SAD, getPlugins[], SADNESS, org.jext.JextFrame, registerPlugins[], void, null, Jext>
<SAD, register[], SADNESS, org.jext.JextFrame, registerPlugins[], void, null, ((RegisterablePlugin)plugins[i])>
<java.io.PrintStream, println[java.lang.String], void, org.jext.JextFrame, registerPlugins[], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextFrame, registerPlugins[], void, null, t>
<org.jext.JextFrame, addProjectManagement[org.jext.ProjectManagement], void, org.jext.JextFrame, registerPlugins[], void, null, nothing here>
<javax.swing.JMenu, getMenuComponentCount[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<javax.swing.JMenu, removeAll[], void, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<SAD, getPlugins[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, Jext>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<SAD, loadMenuItem[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, Jext>
<SAD, getName[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, getClass()>
<SAD, getClass[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, getName[], plugins[i]>
<SAD, createMenuItems[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, plugins[i]>
<java.io.PrintStream, println[java.lang.String], void, org.jext.JextFrame, updatePluginsMenu[], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextFrame, updatePluginsMenu[], void, null, t>
<java.util.Vector, size[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenus>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenus>
<java.util.Vector, size[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenuItems>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenuItems>
<javax.swing.JMenu, getItemCount[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<javax.swing.JMenu, add[javax.swing.JMenuItem], javax.swing.JMenuItem, org.jext.JextFrame, updatePluginsMenu[], void, null, pluginsMenu>
<SAD, loadMenuItem[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, GUIUtilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, updatePluginsMenu[], void, null, Jext>
<org.jext.JextFrame, freeze[], void, org.jext.JextFrame, updatePluginsMenu[], void, null, nothing here>
<SAD, interrupt[], SADNESS, org.jext.JextFrame, stopAutoSave[], void, null, auto>
<SAD, getCaretPosition[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, textArea>
<SAD, getDefaultRootElement[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, getDefaultRootElement[], textArea>
<javax.swing.text.Element, getElementIndex[int], int, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, lineElement>
<javax.swing.text.Element, getElementCount[], int, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, map>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, status>
<SAD, toString[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, append('%')>
<SAD, append[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, toString[], append(((currLine + 1) * 100) / numLines)>
<SAD, append[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[], append(" ] - ")>
<SAD, append[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[], getLineTermName())>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, append(" - [ ")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[java.lang.Object], append(numLines)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[java.lang.String], append('/')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[int], append(currLine + 1)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[char], append(" - ")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[int], append(end - start)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[java.lang.String], append(':')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[int], append(off - start + 1)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[char], append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, append[int], new StringBuffer()>
<SAD, getLineTermName[], SADNESS, org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, null, textArea>
<SAD, isEditable[], SADNESS, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, textArea>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<SAD, isDirty[], SADNESS, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, Jext>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, Jext>
<java.lang.StringBuffer, length[], int, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, text>
<java.lang.String, length[], int, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, _text>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, message>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, null, message>
<SAD, clean[], SADNESS, org.jext.JextFrame, resetStatus[org.jext.JextTextArea], void, null, textArea>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, resetStatus[org.jext.JextTextArea], void, null, message>
<SAD, setCleanIcon[], SADNESS, org.jext.JextFrame, resetStatus[org.jext.JextTextArea], void, null, textAreasPane>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, setNew[org.jext.JextTextArea], void, null, message>
<SAD, isEditable[], SADNESS, org.jext.JextFrame, setNew[org.jext.JextTextArea], void, null, textArea>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, setNew[org.jext.JextTextArea], void, null, Jext>
<SAD, setCleanIcon[], SADNESS, org.jext.JextFrame, setNew[org.jext.JextTextArea], void, null, textAreasPane>
<org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, org.jext.JextFrame, setNew[org.jext.JextTextArea], void, null, nothing here>
<SAD, setDirtyIcon[], SADNESS, org.jext.JextFrame, setChanged[org.jext.JextTextArea], void, null, textAreasPane>
<org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, org.jext.JextFrame, setChanged[org.jext.JextTextArea], void, null, nothing here>
<SAD, setCleanIcon[], SADNESS, org.jext.JextFrame, setSaved[org.jext.JextTextArea], void, null, textAreasPane>
<javax.swing.JLabel, setText[java.lang.String], void, org.jext.JextFrame, setSaved[org.jext.JextTextArea], void, null, message>
<SAD, closeAllWorkspaces[], SADNESS, org.jext.JextFrame, closeToQuit[], void, null, workspaces>
<java.util.Collection, iterator[], java.util.Iterator, org.jext.JextFrame, closeToQuit[], void, null, values()>
<java.util.HashMap, values[], java.util.Collection, org.jext.JextFrame, closeToQuit[], void, iterator[], projectMgmts>
<java.util.Iterator, hasNext[], boolean, org.jext.JextFrame, closeToQuit[], void, null, it>
<SAD, getProjectManager[], SADNESS, org.jext.JextFrame, closeToQuit[], void, null, next()))>
<java.util.Iterator, next[], java.lang.Object, org.jext.JextFrame, closeToQuit[], void, getProjectManager[], it>
<SAD, getProjects[], SADNESS, org.jext.JextFrame, closeToQuit[], void, null, pm>
<SAD, saveProject[], SADNESS, org.jext.JextFrame, closeToQuit[], void, null, pm>
<org.jext.JextFrame, closeWindow[boolean], void, org.jext.JextFrame, closeWindow[], void, null, nothing here>
<SAD, stop[], SADNESS, org.jext.JextFrame, closeWindow[boolean], void, null, console>
<org.jext.JextFrame, stopAutoSave[], void, org.jext.JextFrame, closeWindow[boolean], void, null, nothing here>
<org.jext.JextFrame, removeAllJextListeners[], void, org.jext.JextFrame, closeWindow[boolean], void, null, nothing here>
<SAD, remove[], SADNESS, org.jext.JextFrame, closeWindow[boolean], void, null, getInstances()>
<SAD, getInstances[], SADNESS, org.jext.JextFrame, closeWindow[boolean], void, remove[], Jext>
<java.awt.Window, dispose[], void, org.jext.JextFrame, closeWindow[boolean], void, null, this>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, saveConsole[], void, null, Jext>
<SAD, save[], SADNESS, org.jext.JextFrame, saveConsole[], void, null, console>
<SAD, clear[], SADNESS, org.jext.JextFrame, cleanMemory[], void, null, workspaces>
<java.util.ArrayList, clear[], void, org.jext.JextFrame, cleanMemory[], void, null, transientItems>
<java.lang.System, gc[], void, org.jext.JextFrame, cleanMemory[], void, null, System>
<SAD, isDirty[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, textArea>
<SAD, isEmpty[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, textArea>
<SAD, setSelectedComponent[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, textAreasPane>
<SAD, getName[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, textArea>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, Jext>
<SAD, saveContent[], SADNESS, org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, null, textArea>
<org.jext.JextFrame, reloadRecent[], void, org.jext.JextFrame, setRecentMenu[org.jext.JextRecentMenu], void, null, nothing here>
<SAD, createRecent[], SADNESS, org.jext.JextFrame, reloadRecent[], void, null, menuRecent>
<SAD, removeRecent[], SADNESS, org.jext.JextFrame, removeRecent[], void, null, menuRecent>
<SAD, saveRecent[], SADNESS, org.jext.JextFrame, saveRecent[java.lang.String], void, null, menuRecent>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.JextFrame, showWaitCursor[], void, null, Cursor>
<java.awt.Window, setCursor[java.awt.Cursor], void, org.jext.JextFrame, showWaitCursor[], void, null, nothing here>
<org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], org.jext.JextFrame, showWaitCursor[], void, null, nothing here>
<SAD, setCursor[], SADNESS, org.jext.JextFrame, showWaitCursor[], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, showWaitCursor[], void, setCursor[], textAreas[i]>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.JextFrame, hideWaitCursor[], void, null, Cursor>
<java.awt.Window, setCursor[java.awt.Cursor], void, org.jext.JextFrame, hideWaitCursor[], void, null, nothing here>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.jext.JextFrame, hideWaitCursor[], void, null, Cursor>
<org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], org.jext.JextFrame, hideWaitCursor[], void, null, nothing here>
<SAD, setCursor[], SADNESS, org.jext.JextFrame, hideWaitCursor[], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, hideWaitCursor[], void, setCursor[], textAreas[i]>
<java.util.HashMap, containsKey[java.lang.Object], boolean, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, projectMgmts>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, projectMgmts>
<SAD, getProjectManager[], SADNESS, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, get(name)))>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, getProjectManager[], projectMgmts>
<javax.swing.JTabbedPane, remove[java.awt.Component], void, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, vTabbedPane>
<SAD, getUI[], SADNESS, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, currentProjectMgr>
<SAD, getUI[], SADNESS, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, currentProjectMgr>
<javax.swing.JTabbedPane, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, vTabbedPane>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, Jext>
<SAD, getUI[], SADNESS, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, newPM>
<SAD, putClientProperty[], SADNESS, org.jext.JextFrame, setJextToolBar[org.jext.JextToolBar], void, null, bar>
<javax.swing.JFrame, getJMenuBar[], javax.swing.JMenuBar, org.jext.JextFrame, getJextMenuBar[], org.jext.JextMenuBar, null, nothing here>
<SAD, hasFocus[], SADNESS, org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, null, splittedTextArea>
<org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, null, nothing here>
<SAD, getSelectedComponent[], SADNESS, org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, null, textAreasPane>
<SAD, getTabCount[], SADNESS, org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, null, textAreasPane>
<SAD, getComponentAt[], SADNESS, org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, null, textAreasPane>
<SAD, getTabCount[], SADNESS, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, textAreasPane>
<SAD, getTabCount[], SADNESS, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, textAreasPane>
<SAD, getComponentAt[], SADNESS, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, textAreasPane>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<java.util.Vector, size[], int, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, org.jext.JextFrame, close[org.jext.JextTextArea], void, null, nothing here>
<org.jext.JextFrame, checkContent[org.jext.JextTextArea], boolean, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, nothing here>
<SAD, indexOfComponent[], SADNESS, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, textAreasPane>
<SAD, removeFile[], SADNESS, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, workspaces>
<SAD, removeTabAt[], SADNESS, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, textAreasPane>
<SAD, setDropTarget[], SADNESS, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, setDropTarget[], textArea>
<org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, nothing here>
<org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, nothing here>
<org.jext.JextFrame, createFile[], org.jext.JextTextArea, org.jext.JextFrame, close[org.jext.JextTextArea, boolean], void, null, nothing here>
<org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, org.jext.JextFrame, open[java.lang.String], org.jext.JextTextArea, null, nothing here>
<java.io.File, exists[], boolean, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, (new File(file))>
<SAD, showError[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, Jext>
<org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, nothing here>
<SAD, isNew[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textArea>
<SAD, getCurrentFile[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, _file>
<javax.swing.JOptionPane, showConfirmDialog[java.awt.Component, java.lang.Object, java.lang.String, int, int], int, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, JOptionPane>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, Jext>
<SAD, open[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textArea>
<SAD, setSelectedComponent[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textAreasPane>
<org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, nothing here>
<SAD, open[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textArea>
<org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, nothing here>
<SAD, getComponentAt[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textAreasPane>
<SAD, getTabCount[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, textAreasPane>
<SAD, isNew[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, firstTextArea>
<SAD, getLength[], SADNESS, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, firstTextArea>
<org.jext.JextFrame, close[org.jext.JextTextArea], void, org.jext.JextFrame, open[java.lang.String, boolean], org.jext.JextTextArea, null, nothing here>
<java.io.File, exists[], boolean, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, (new File(file))>
<SAD, showError[], SADNESS, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, Jext>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, textArea>
<SAD, setDocument[], SADNESS, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, textArea>
<SAD, open[], SADNESS, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, textArea>
<org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, org.jext.JextFrame, openForLoading[java.lang.String], org.jext.JextTextArea, null, nothing here>
<SAD, getPainter[], SADNESS, org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, null, textArea>
<SAD, setDocument[], SADNESS, org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, null, textArea>
<org.jext.JextFrame, loadTextArea[org.jext.JextTextArea], void, org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, null, nothing here>
<SAD, addFile[], SADNESS, org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, null, workspaces>
<SAD, add[], SADNESS, org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, null, textAreasPane>
<org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, null, nothing here>
<SAD, setSelectedComponent[], SADNESS, org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, null, textAreasPane>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextFrame, addProjectManagement[org.jext.ProjectManagement], void, null, projectMgmts>
<SAD, getLabel[], SADNESS, org.jext.JextFrame, addProjectManagement[org.jext.ProjectManagement], void, null, projectMgmt>
<org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, org.jext.JextFrame, createFile[], org.jext.JextTextArea, null, nothing here>
<org.jext.JextFrame, addTextAreaInTabbedPane[org.jext.JextTextArea], void, org.jext.JextFrame, createFile[], org.jext.JextTextArea, null, nothing here>
<SAD, setTitleAt[], SADNESS, org.jext.JextFrame, setTextAreaName[org.jext.JextTextArea, java.lang.String], void, null, textAreasPane>
<SAD, indexOfComponent[], SADNESS, org.jext.JextFrame, setTextAreaName[org.jext.JextTextArea, java.lang.String], void, null, textAreasPane>
<javax.swing.JSplitPane, getBottomComponent[], java.awt.Component, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, textAreaSplitter>
<SAD, setDocument[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, splittedTextArea>
<SAD, getDocument[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, textArea>
<SAD, getColorizingMode[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, textArea>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, mode>
<SAD, getColorizingMode[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, splittedTextArea>
<SAD, setColorizing[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, splittedTextArea>
<SAD, discard[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, splittedTextArea>
<SAD, setEditable[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, splittedTextArea>
<SAD, isEditable[], SADNESS, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, textArea>
<org.jext.JextFrame, setLineTerm[org.jext.JextTextArea], void, org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, null, nothing here>
<javax.swing.JSplitPane, getBottomComponent[], java.awt.Component, org.jext.JextFrame, disableSplittedTextArea[], void, null, textAreaSplitter>
<SAD, setDocument[], SADNESS, org.jext.JextFrame, disableSplittedTextArea[], void, null, splittedTextArea>
<SAD, setEditable[], SADNESS, org.jext.JextFrame, disableSplittedTextArea[], void, null, splittedTextArea>
<org.jext.JextFrame, setLineTerm[org.jext.JextTextArea, int], void, org.jext.JextFrame, setLineTerm[org.jext.JextTextArea], void, null, nothing here>
<SAD, getSelectedIndex[], SADNESS, org.jext.JextFrame, setLineTerm[org.jext.JextTextArea], void, null, lineTermSelector>
<org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, org.jext.JextFrame, setLineTerm[org.jext.JextTextArea, int], void, null, nothing here>
<org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, org.jext.JextFrame, setLineTerm[org.jext.JextTextArea, int], void, null, nothing here>
<SAD, setSelectedIndex[], SADNESS, org.jext.JextFrame, setLineTerm[org.jext.JextTextArea, int], void, null, lineTermSelector>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, setLayout[java.awt.LayoutManager], nothing here>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<org.jext.JextFrame, addProjectManagement[org.jext.ProjectManagement], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, registerPlugins[], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<javax.swing.JFrame, setIconImage[java.awt.Image], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, getJextIconImage[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, GUIUtilities>
<SAD, read[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, XMenuReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, class>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getJMenuBar()>
<javax.swing.JFrame, getJMenuBar[], javax.swing.JMenuBar, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, putClientProperty[java.lang.Object, java.lang.Object], nothing here>
<SAD, getInputHandler[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, read[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, XBarReader>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, class>
<org.jext.JextFrame, createTextArea[], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, putClientProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreasPane>
<SAD, putClientProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreasPane>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, load[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, workspaces>
<javax.swing.JSplitPane, setContinuousLayout[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreaSplitter>
<javax.swing.JSplitPane, setTopComponent[java.awt.Component], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreaSplitter>
<javax.swing.JSplitPane, setBottomComponent[java.awt.Component], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreaSplitter>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, textAreaSplitter>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, vTabbedPane>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, vTabbedPane>
<SAD, setScrollableTabbedPane[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, GUIUtilities>
<org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getLabel[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, defaultProjectMgmt>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<javax.swing.JTabbedPane, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, vTabbedPane>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setContent[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, leftFrame>
<SAD, createStrippedSplitPane[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Factory>
<javax.swing.JSplitPane, setContinuousLayout[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, split>
<javax.swing.JSplitPane, getDividerSize[], int, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, split>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, hTabbedPane>
<javax.swing.JComponent, putClientProperty[java.lang.Object, java.lang.Object], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, hTabbedPane>
<SAD, setScrollableTabbedPane[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, GUIUtilities>
<SAD, getBooleanProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setPromptPattern[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, console>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, displayPrompt[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, console>
<javax.swing.JTabbedPane, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, hTabbedPane>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, hTabbedPane>
<SAD, getPreferredSize[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, console>
<SAD, setContent[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, consolesFrame>
<SAD, createStrippedSplitPane[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Factory>
<javax.swing.JSplitPane, setContinuousLayout[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, splitter>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, centerPane>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, status>
<org.jext.JextFrame, getNSTextArea[], org.jext.JextTextArea, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, rotateLineTerm[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, jta>
<SAD, rotateLineTerm[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, jtaSplitted>
<org.jext.JextFrame, updateStatus[org.jext.JextTextArea], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, isDirty[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, jta>
<SAD, setDirtyIcon[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, textAreasPane>
<SAD, setCleanIcon[], SADNESS, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, textAreasPane>
<org.jext.JextFrame, setStatus[org.jext.JextTextArea], void, java.awt.event.MouseAdapter, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, pane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, centerPane>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, centerPane>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, add[java.lang.String, java.awt.Component], nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getContentPane()>
<javax.swing.JFrame, getContentPane[], java.awt.Container, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, add[java.lang.String, java.awt.Component], nothing here>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<java.awt.Window, pack[], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, loadGeometry[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, GUIUtilities>
<org.jext.JextFrame, loadProperties[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<java.awt.Window, addWindowListener[java.awt.event.WindowListener], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, selectWorkspaceOfNameOrCreate[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, workspaces>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<org.jext.JextFrame, setBatchMode[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, open[java.lang.String], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, constructPath[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Utilities>
<org.jext.JextFrame, setBatchMode[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, updateSplittedTextArea[org.jext.JextTextArea], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, setSplashText[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, executeScripts[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<SAD, executeScripts[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, JARClassLoader>
<org.jext.JextFrame, updatePluginsMenu[], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, addMisc[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, toolBar>
<org.jext.JextFrame, triggerTabbedPanes[], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, setSplashProgress[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<javax.swing.JFrame, setDefaultCloseOperation[int], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, addJextListener[org.jext.JextListener], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, addJextListener[org.jext.JextListener], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<org.jext.JextFrame, fireJextEvent[int], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, setParentTitle[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getTextArea()>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, setParentTitle[], nothing here>
<SAD, killSplashScreen[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, Jext>
<java.awt.Window, setVisible[boolean], void, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, nothing here>
<SAD, grabFocus[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getTextArea()>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, grabFocus[], nothing here>
<SAD, requestFocus[], SADNESS, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, null, getTextArea()>
<org.jext.JextFrame, getTextArea[], org.jext.JextTextArea, org.jext.JextFrame, JextFrame[java.lang.String[], boolean], void, requestFocus[], nothing here>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.JComponent, getInputMap[], javax.swing.InputMap, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, comp>
<javax.swing.JComponent, getActionMap[], javax.swing.ActionMap, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, comp>
<java.awt.Component, isEnabled[], boolean, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, comp>
<javax.swing.InputMap, get[javax.swing.KeyStroke], java.lang.Object, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, map>
<javax.swing.KeyStroke, getKeyStrokeForEvent[java.awt.event.KeyEvent], javax.swing.KeyStroke, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, KeyStroke>
<javax.swing.ActionMap, get[java.lang.Object], javax.swing.Action, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, am>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.AWTEvent, getID[], int, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.text.JTextComponent, getKeymap[], javax.swing.text.Keymap, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, ((JTextComponent)getFocusOwner())>
<java.awt.Window, getFocusOwner[], java.awt.Component, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, getKeymap[], nothing here>
<javax.swing.text.Keymap, getAction[javax.swing.KeyStroke], javax.swing.Action, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, keymap>
<javax.swing.KeyStroke, getKeyStrokeForEvent[java.awt.event.KeyEvent], javax.swing.KeyStroke, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, KeyStroke>
<java.awt.event.InputEvent, isConsumed[], boolean, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<SAD, processKeyEvent[], SADNESS, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, KeyEventWorkaround>
<java.awt.AWTEvent, getID[], int, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyListener, keyTyped[java.awt.event.KeyEvent], void, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, isRepeatEnabled[], SADNESS, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<SAD, keyTyped[], SADNESS, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.KeyListener, keyPressed[java.awt.event.KeyEvent], void, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, keyPressed[], SADNESS, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.KeyListener, keyReleased[java.awt.event.KeyEvent], void, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, keyReleased[], SADNESS, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.InputEvent, isConsumed[], boolean, org.jext.JextFrame, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<SAD, closeToQuit[], SADNESS, org.jext.JextFrame.WindowHandler, windowClosing[java.awt.event.WindowEvent], void, null, Jext>
<SAD, getWhat[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, evt>
<org.jext.JextFrame, reset[], void, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, nothing here>
<SAD, getColorizingMode[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, getColorizingMode[], evt>
<SAD, getMode[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, Jext>
<SAD, getPlugins[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, mode>
<java.util.ArrayList, size[], int, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, plugins_>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, plugins_>
<SAD, createMenuItems[], SADNESS, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, plugin>
<java.io.PrintStream, println[java.lang.String], void, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, t>
<SAD, getWhat[], SADNESS, org.jext.JextFrame.ModeHandler, jextEventFired[org.jext.JextEvent], void, null, evt>
<SAD, size[], SADNESS, org.jext.JextFrame.ModeHandler, jextEventFired[org.jext.JextEvent], void, null, modesFileFilters>
<SAD, rebuildRegexp[], SADNESS, org.jext.JextFrame.ModeHandler, jextEventFired[org.jext.JextEvent], void, null, get(i))>
<SAD, get[], SADNESS, org.jext.JextFrame.ModeHandler, jextEventFired[org.jext.JextEvent], void, rebuildRegexp[], modesFileFilters>
<java.awt.dnd.DropTargetDropEvent, getCurrentDataFlavors[], java.awt.datatransfer.DataFlavor[], org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.datatransfer.DataFlavor, isFlavorJavaFileListType[], boolean, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, flavors[i]>
<java.awt.dnd.DropTargetDropEvent, acceptDrop[int], void, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getTransferable[], java.awt.datatransfer.Transferable, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.util.List, iterator[], java.util.Iterator, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, iterator[], transferable>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, SwingUtilities>
<java.util.Iterator, hasNext[], boolean, java.lang.Object, run[], void, null, iterator>
<org.jext.JextFrame, open[java.lang.String], org.jext.JextTextArea, java.lang.Object, run[], void, null, nothing here>
<java.io.File, getPath[], java.lang.String, java.lang.Object, run[], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, java.lang.Object, run[], void, getPath[], iterator>
<java.awt.dnd.DropTargetDropEvent, dropComplete[boolean], void, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Class, getMethods[], java.lang.reflect.Method[], org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Class)clazz)>
<java.lang.reflect.Method, getParameterTypes[], java.lang.Class<?>[], org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<java.lang.reflect.Method, getName[], java.lang.String, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.Class, getName[], java.lang.String, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, p[j]>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, decl>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.MethodFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.javaccess.FieldFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.javaccess.FieldFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.FieldFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, org.jext.dawn.javaccess.FieldFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Class)clazz)>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.FieldFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.javaccess.NewFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.NewFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<org.jext.dawn.javaccess.NewFunction, useDefaultConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.Class], void, org.jext.dawn.javaccess.NewFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, nothing here>
<org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, org.jext.dawn.javaccess.NewFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, nothing here>
<java.lang.Class, newInstance[], java.lang.Object, org.jext.dawn.javaccess.NewFunction, useDefaultConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.Class], void, null, clazz>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.NewFunction, useDefaultConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.Class], void, null, parser>
<java.lang.reflect.Constructor, getParameterTypes[], java.lang.Class[], org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, c>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, parser>
<java.lang.Number, intValue[], int, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, ((Number)p[i])>
<java.lang.Number, doubleValue[], double, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, ((Number)p[i])>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, "\"\"">
<java.lang.String, length[], int, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, s>
<java.lang.String, charAt[int], char, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, s>
<java.lang.String, charAt[int], char, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, s>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, s>
<java.lang.Number, floatValue[], float, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, ((Number)p[i])>
<java.lang.Number, intValue[], int, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, ((Number)p[i])>
<java.lang.Number, shortValue[], short, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, ((Number)p[i])>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, parser>
<java.lang.reflect.Constructor, newInstance[java.lang.Object[]], java.lang.Object, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, c>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, org.jext.dawn.javaccess.NewFunction, invokeConstructor[org.jext.dawn.javaccess.DawnParser, java.lang.reflect.Constructor], void, getMessage[], ex>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.javaccess.ClassFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.javaccess.ClassFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.dawn.javaccess.ClassFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, Class>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.ClassFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.NullFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Class, getConstructors[], java.lang.reflect.Constructor[], org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Class)clazz)>
<java.lang.reflect.Constructor, getParameterTypes[], java.lang.Class[], org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.Class, getName[], java.lang.String, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, p[j]>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, decl>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, d>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.ConstructorFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.reflect.Method, getParameterTypes[], java.lang.Class<?>[], org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<java.lang.reflect.Method, getModifiers[], int, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Number, intValue[], int, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Number)p[i])>
<java.lang.Number, doubleValue[], double, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Number)p[i])>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, "\"\"">
<java.lang.String, length[], int, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, s>
<java.lang.String, charAt[int], char, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, s>
<java.lang.String, charAt[int], char, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, s>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, s>
<java.lang.Number, floatValue[], float, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Number)p[i])>
<java.lang.Number, intValue[], int, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Number)p[i])>
<java.lang.Number, shortValue[], short, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, ((Number)p[i])>
<java.lang.reflect.Method, invoke[java.lang.Object, java.lang.Object[]], java.lang.Object, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, m>
<SAD, pop[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, parser>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, null, getTargetException()>
<java.lang.reflect.InvocationTargetException, getTargetException[], java.lang.Throwable, org.jext.dawn.javaccess.InvokeFunction, invoke[org.jext.dawn.javaccess.DawnParser], void, getMessage[], ex>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.NotFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.NotFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.EqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.EqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.EqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, isTopArray[], SADNESS, org.jext.dawn.test.IsArrayFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.IsArrayFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.IsArrayFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.DifferentFromFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.DifferentFromFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.DifferentFromFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.SameFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.SameFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.SameFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.lang.Object, equals[java.lang.Object], boolean, org.jext.dawn.test.SameFunction, invoke[org.jext.dawn.test.DawnParser], void, null, lobj>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.OrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.OrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.OrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, getTopType[], SADNESS, org.jext.dawn.test.GetTypeFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.GetTypeFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.GetTypeFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.GreaterThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.GreaterThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.GreaterThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.AndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.AndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.AndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.BinOrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.BinOrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.BinOrFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.BinAndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.BinAndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.BinAndFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, isTopString[], SADNESS, org.jext.dawn.test.IsStringFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.IsStringFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.IsStringFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.LowerThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.LowerThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.LowerThanFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.GreaterEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.GreaterEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.GreaterEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.XorFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.XorFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.XorFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, isTopLiteral[], SADNESS, org.jext.dawn.test.IsLiteralFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.IsLiteralFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.IsLiteralFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, getStream[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, (elseStatement ? elseBuffer : ifBuffer)>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, (elseStatement ? elseBuffer : ifBuffer)>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, (elseStatement ? elseBuffer : ifBuffer)>
<SAD, unescape[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, (elseStatement ? elseBuffer : ifBuffer)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, (elseStatement ? elseBuffer : ifBuffer)>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, buf>
<SAD, invoke[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, function>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.lang.StringBuffer, length[], int, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, ifBuffer>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, ifBuffer>
<SAD, invoke[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, function>
<java.lang.StringBuffer, length[], int, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, elseBuffer>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, elseBuffer>
<SAD, invoke[], SADNESS, org.jext.dawn.test.IfFunction, invoke[org.jext.dawn.test.DawnParser], void, null, function>
<SAD, isTopNumeric[], SADNESS, org.jext.dawn.test.IsNumericFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.test.IsNumericFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.IsNumericFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.LowerEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.test.LowerEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.test.LowerEqualsFunction, invoke[org.jext.dawn.test.DawnParser], void, null, parser>
<SAD, logln[], SADNESS, org.jext.dawn.util.DumpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, getDawnLogWindow()>
<SAD, getDawnLogWindow[], SADNESS, org.jext.dawn.util.DumpFunction, invoke[org.jext.dawn.util.DawnParser], void, logln[], JEXT_FRAME"))>
<SAD, getProperty[], SADNESS, org.jext.dawn.util.DumpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, dump[], SADNESS, org.jext.dawn.util.DumpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.util.DateFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.util.Date, toString[], java.lang.String, org.jext.dawn.util.DateFunction, invoke[org.jext.dawn.util.DawnParser], void, null, Date()>
<SAD, pushString[], SADNESS, org.jext.dawn.util.VersionFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.EvalFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.util.EvalFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.util.EvalFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, invoke[], SADNESS, org.jext.dawn.util.EvalFunction, invoke[org.jext.dawn.util.DawnParser], void, null, function>
<SAD, getMessage[], SADNESS, org.jext.dawn.util.EvalFunction, invoke[org.jext.dawn.util.DawnParser], void, null, dre>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, constructPath[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, DawnUtilities>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, append(line)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, append[char], buf>
<java.io.BufferedReader, close[], void, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, in>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, buf>
<SAD, exec[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, _parser>
<SAD, print[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, out>
<SAD, dump[], SADNESS, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, _parser>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.util.ScriptExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, e>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.FormattedDateFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.util.FormattedDateFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.text.DateFormat, format[java.util.Date], java.lang.String, org.jext.dawn.util.FormattedDateFunction, invoke[org.jext.dawn.util.DawnParser], void, null, popString())>
<SAD, popString[], SADNESS, org.jext.dawn.util.FormattedDateFunction, invoke[org.jext.dawn.util.DawnParser], void, format[java.util.Date], parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.util.TimeFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.lang.System, currentTimeMillis[], long, org.jext.dawn.util.TimeFunction, invoke[org.jext.dawn.util.DawnParser], void, null, System>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.WaitFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.lang.Thread, sleep[long], void, org.jext.dawn.util.WaitFunction, invoke[org.jext.dawn.util.DawnParser], void, null, Thread>
<SAD, popNumber[], SADNESS, org.jext.dawn.util.WaitFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, setSeed[], SADNESS, org.jext.dawn.util.RandomizeFunction, invoke[org.jext.dawn.util.DawnParser], void, null, _random>
<java.lang.System, currentTimeMillis[], long, org.jext.dawn.util.RandomizeFunction, invoke[org.jext.dawn.util.DawnParser], void, null, System>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.ConstructPathFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.util.ConstructPathFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, constructPath[], SADNESS, org.jext.dawn.util.ConstructPathFunction, invoke[org.jext.dawn.util.DawnParser], void, null, DawnUtilities>
<SAD, pushString[], SADNESS, org.jext.dawn.util.ConstructPathFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.util.RandomFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.util.Random, nextDouble[], double, org.jext.dawn.util.RandomFunction, invoke[org.jext.dawn.util.DawnParser], void, null, _random>
<SAD, setSeed[], SADNESS, org.jext.dawn.util.RdzFunction, invoke[org.jext.dawn.util.DawnParser], void, null, _random>
<SAD, popNumber[], SADNESS, org.jext.dawn.util.RdzFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, stop[], SADNESS, org.jext.dawn.util.ExitFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, getFunctions[], SADNESS, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, DawnParser>
<java.util.Hashtable, keys[], java.util.Enumeration, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, hash>
<java.util.Hashtable, size[], int, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, hash>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, e>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, e>
<java.util.Arrays, sort[java.lang.Object[]], void, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, Arrays>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, append(functions[i])>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, append[char], buf>
<SAD, logln[], SADNESS, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, getDawnLogWindow()>
<SAD, getDawnLogWindow[], SADNESS, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, logln[], JEXT_FRAME"))>
<SAD, getProperty[], SADNESS, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, buf>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.lang.Runtime, exec[java.lang.String], java.lang.Process, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, exec[java.lang.String], Runtime>
<java.io.OutputStream, close[], void, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, getOutputStream()>
<java.lang.Process, getOutputStream[], java.io.OutputStream, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, close[], process>
<SAD, pushNumber[], SADNESS, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, parser>
<java.lang.Process, waitFor[], int, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, process>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.util.ExecFunction, invoke[org.jext.dawn.util.DawnParser], void, null, e>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, out>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, init[], void, null, nothing here>
<java.io.PrintStream, println[], void, org.jext.dawn.DawnParser, init[], void, null, out>
<org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, org.jext.dawn.DawnParser, installPackage[java.lang.String], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String], void, null, nothing here>
<java.util.Vector, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, installedPackages>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, nothing here>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<java.lang.Class, forName[java.lang.String], java.lang.Class<?>, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, Class>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<java.lang.Class, newInstance[], java.lang.Object, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _class>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, getRuntimeFunctions())>
<org.jext.dawn.DawnParser, getRuntimeFunctions[], java.util.Hashtable, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, put[java.lang.Object, java.lang.Object], parser>
<SAD, getName[], SADNESS, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _function>
<org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, nothing here>
<SAD, getName[], SADNESS, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _codeFunction>
<SAD, getCode[], SADNESS, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _codeFunction>
<org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, parser>
<SAD, getName[], SADNESS, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _codeFunction>
<SAD, getCode[], SADNESS, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, _codeFunction>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, out>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, packageName>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, (parser == null ? installedPackages : installedRuntimePackages)>
<java.lang.Class, getResourceAsStream[java.lang.String], java.io.InputStream, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, loader>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, in>
<java.lang.String, trim[], java.lang.String, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.lang.String, indexOf[int], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, out>
<org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, nothing here>
<java.lang.String, substring[int], java.lang.String, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, line>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.io.BufferedReader, close[], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, in>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, org.jext.dawn.DawnParser, DawnParser[java.io.Reader], void, null, nothing here>
<java.io.StreamTokenizer, resetSyntax[], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, eolIsSignificant[boolean], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, whitespaceChars[int, int], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, wordChars[int, int], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, quoteChar[int], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, quoteChar[int], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, commentChar[int], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, parseNumbers[], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.io.StreamTokenizer, eolIsSignificant[boolean], void, org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, null, st>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, checkVarName[org.jext.dawn.Function, java.lang.String], void, null, var>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, checkVarName[org.jext.dawn.Function, java.lang.String], void, null, var>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, checkVarName[org.jext.dawn.Function, java.lang.String], void, null, var>
<java.lang.Character, isDigit[char], boolean, org.jext.dawn.DawnParser, checkVarName[org.jext.dawn.Function, java.lang.String], void, null, Character>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnParser, checkVarName[org.jext.dawn.Function, java.lang.String], void, null, var>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, checkArgsNumber[org.jext.dawn.Function, int], void, null, stack>
<java.util.Vector, isEmpty[], boolean, org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, checkLevel[org.jext.dawn.Function, int], void, null, stack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setProperty[java.lang.Object, java.lang.Object], void, null, properties>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getProperty[java.lang.Object], java.lang.Object, null, properties>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, unsetProperty[java.lang.Object], void, null, properties>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.DawnParser, exec[], void, null, st>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, stack>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, exec[], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, exec[], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, exec[], void, null, sval>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.DawnParser, exec[], void, null, st>
<org.jext.dawn.DawnParser, installPackage[java.lang.String], void, org.jext.dawn.DawnParser, exec[], void, null, nothing here>
<org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, org.jext.dawn.DawnParser, exec[], void, null, nothing here>
<java.io.StreamTokenizer, pushBack[], void, org.jext.dawn.DawnParser, exec[], void, null, st>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<SAD, invoke[], SADNESS, org.jext.dawn.DawnParser, exec[], void, null, func>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, runtimeFunctions>
<SAD, invoke[], SADNESS, org.jext.dawn.DawnParser, exec[], void, null, func>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, stack>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.DawnParser, exec[], void, null, st>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, runtimeFunctions>
<java.io.StreamTokenizer, pushBack[], void, org.jext.dawn.DawnParser, exec[], void, null, st>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.io.StreamTokenizer, pushBack[], void, org.jext.dawn.DawnParser, exec[], void, null, st>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<SAD, invoke[], SADNESS, org.jext.dawn.DawnParser, exec[], void, null, fc>
<org.jext.dawn.DawnParser, pushString[java.lang.String], void, org.jext.dawn.DawnParser, exec[], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getVariable[java.lang.String], java.lang.Object, null, variables>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getVariable[java.lang.String], java.lang.Object, null, runtimeVariables>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeVariables>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, functions>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeFunctions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeVariables>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, variables>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, functions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, variables>
<java.util.Hashtable, clear[], void, org.jext.dawn.DawnParser, clearGlobalVariables[], void, null, variables>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, size() - 1 - i)>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, size())>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, append("array[")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, append[int], buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, ((Vector)o)>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnParser, dump[], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.DawnParser, dump[], java.lang.String, null, buf>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, popNumber[], double, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popNumber[], double, null, stack>
<java.lang.Double, doubleValue[], double, org.jext.dawn.DawnParser, popNumber[], double, null, ((Double)obj)>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, peekNumber[], double, null, nothing here>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekNumber[], double, null, stack>
<java.lang.Double, doubleValue[], double, org.jext.dawn.DawnParser, peekNumber[], double, null, ((Double)obj)>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushNumber[double], void, null, stack>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, popString[], java.lang.String, null, nothing here>
<java.lang.Object, toString[], java.lang.String, org.jext.dawn.DawnParser, popString[], java.lang.String, null, pop()>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popString[], java.lang.String, toString[], stack>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, popString[], java.lang.String, null, str>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, popString[], java.lang.String, null, str>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, popString[], java.lang.String, null, str>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.DawnParser, popString[], java.lang.String, null, str>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, popString[], java.lang.String, null, str>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, nothing here>
<java.lang.Object, toString[], java.lang.String, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, peek()>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekString[], java.lang.String, toString[], stack>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, str>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, str>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, str>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, str>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, peekString[], java.lang.String, null, str>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, str>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, str>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, str>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, stack>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, popArray[], java.util.Vector, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popArray[], java.util.Vector, null, stack>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, peekArray[], java.util.Vector, null, nothing here>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekArray[], java.util.Vector, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushArray[java.util.Vector], void, null, stack>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, pop[], java.lang.Object, null, nothing here>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, pop[], java.lang.Object, null, stack>
<org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, org.jext.dawn.DawnParser, peek[], java.lang.Object, null, nothing here>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peek[], java.lang.Object, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, push[java.lang.Object], void, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopNumeric[], boolean, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopString[], boolean, null, stack>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, isTopString[], boolean, null, str>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.dawn.DawnParser, isTopString[], boolean, null, str>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopArray[], boolean, null, stack>
<org.jext.dawn.DawnParser, isTopString[], boolean, org.jext.dawn.DawnParser, isTopLiteral[], boolean, null, nothing here>
<org.jext.dawn.DawnParser, isTopNumeric[], boolean, org.jext.dawn.DawnParser, isTopLiteral[], boolean, null, nothing here>
<org.jext.dawn.DawnParser, isTopArray[], boolean, org.jext.dawn.DawnParser, isTopLiteral[], boolean, null, nothing here>
<org.jext.dawn.DawnParser, isTopNumeric[], boolean, org.jext.dawn.DawnParser, getTopType[], int, null, nothing here>
<org.jext.dawn.DawnParser, isTopString[], boolean, org.jext.dawn.DawnParser, getTopType[], int, null, nothing here>
<org.jext.dawn.DawnParser, isTopArray[], boolean, org.jext.dawn.DawnParser, getTopType[], int, null, nothing here>
<SAD, getName[], SADNESS, org.jext.dawn.DawnParser, addGlobalFunction[org.jext.dawn.Function], void, null, function>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, addGlobalFunction[org.jext.dawn.Function], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, addGlobalFunction[org.jext.dawn.Function], void, null, name>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, addGlobalFunction[org.jext.dawn.Function], void, null, functions>
<SAD, getName[], SADNESS, org.jext.dawn.DawnParser, addRuntimeFunction[org.jext.dawn.Function], void, null, function>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, addRuntimeFunction[org.jext.dawn.Function], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, addRuntimeFunction[org.jext.dawn.Function], void, null, name>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, addRuntimeFunction[org.jext.dawn.Function], void, null, runtimeFunctions>
<java.util.Hashtable, clone[], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, nothing here>
<org.jext.dawn.DawnParser, exec[], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, nothing here>
<java.util.Hashtable, keys[], java.util.Enumeration, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<java.util.Enumeration, hasMoreElements[], boolean, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, e>
<java.util.Enumeration, nextElement[], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, e>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<java.util.Hashtable, clone[], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, null, name>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, null, functions>
<org.jext.dawn.DawnParser, getStream[], java.io.StreamTokenizer, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<org.jext.dawn.DawnParser, setStream[java.io.StreamTokenizer], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<org.jext.dawn.DawnParser, exec[], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<org.jext.dawn.DawnParser, setStream[java.io.StreamTokenizer], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, null, name>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, null, runtimeFunctions>
<org.jext.dawn.DawnParser, createTokenizer[java.io.Reader], java.io.StreamTokenizer, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, nothing here>
<org.jext.dawn.DawnParser, exec[], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, nothing here>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.ElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.array.ElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.array.ElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, elementAt[], SADNESS, org.jext.dawn.array.ElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.ElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, elementAt[], parser>
<SAD, pushArray[], SADNESS, org.jext.dawn.array.ArrayFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.RemoveElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.array.RemoveElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, removeElementAt[], SADNESS, org.jext.dawn.array.RemoveElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.RemoveElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, removeElementAt[], parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.array.LengthFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.array.LengthFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, size[], SADNESS, org.jext.dawn.array.LengthFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.LengthFunction, invoke[org.jext.dawn.array.DawnParser], void, size[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.SetElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.array.SetElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.array.SetElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, setElementAt[], SADNESS, org.jext.dawn.array.SetElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.SetElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, setElementAt[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.AddElementFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.array.AddElementFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, addElement[], SADNESS, org.jext.dawn.array.AddElementFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.AddElementFunction, invoke[org.jext.dawn.array.DawnParser], void, addElement[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popArray[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, v>
<SAD, pop[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, pushArray[], SADNESS, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.array.InsertElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.array.InsertElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.array.InsertElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, insertElementAt[], SADNESS, org.jext.dawn.array.InsertElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.InsertElementAtFunction, invoke[org.jext.dawn.array.DawnParser], void, insertElementAt[], parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.array.ClearArrayFunction, invoke[org.jext.dawn.array.DawnParser], void, null, parser>
<SAD, removeAllElements[], SADNESS, org.jext.dawn.array.ClearArrayFunction, invoke[org.jext.dawn.array.DawnParser], void, null, peekArray()>
<SAD, peekArray[], SADNESS, org.jext.dawn.array.ClearArrayFunction, invoke[org.jext.dawn.array.DawnParser], void, removeAllElements[], parser>
<SAD, getStream[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, st>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, buf>
<SAD, invoke[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, function>
<SAD, setErr[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, ErrManager>
<SAD, invoke[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, errFunction>
<SAD, setStream[], SADNESS, org.jext.dawn.err.TryCatchFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<SAD, getErr[], SADNESS, org.jext.dawn.err.ErrorFunction, invoke[org.jext.dawn.err.DawnParser], void, null, ErrManager>
<SAD, getProperty[], SADNESS, org.jext.dawn.err.ErrManager, getErr[org.jext.dawn.err.DawnParser], org.jext.dawn.err.DawnRuntimeException, null, parser>
<SAD, setProperty[], SADNESS, org.jext.dawn.err.ErrManager, setErr[org.jext.dawn.err.DawnParser, org.jext.dawn.err.DawnRuntimeException], void, null, parser>
<SAD, getErr[], SADNESS, org.jext.dawn.err.ErrMsgFunction, invoke[org.jext.dawn.err.DawnParser], void, null, ErrManager>
<SAD, pushString[], SADNESS, org.jext.dawn.err.ErrMsgFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<SAD, getMessage[], SADNESS, org.jext.dawn.err.ErrMsgFunction, invoke[org.jext.dawn.err.DawnParser], void, null, dre>
<SAD, pushString[], SADNESS, org.jext.dawn.err.ErrMsgFunction, invoke[org.jext.dawn.err.DawnParser], void, null, parser>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.io.InputLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, in>
<SAD, pushString[], SADNESS, org.jext.dawn.io.InputLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.io.OpenOutputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, openFileForOutput[], SADNESS, org.jext.dawn.io.OpenOutputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.OpenOutputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.io.OpenOutputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.io.WriteLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, writeLine[], SADNESS, org.jext.dawn.io.WriteLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.WriteLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.io.WriteLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.io.OpenInputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, openFileForInput[], SADNESS, org.jext.dawn.io.OpenInputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.OpenInputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.io.OpenInputFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.PrintlnFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, println[], SADNESS, org.jext.dawn.io.PrintlnFunction, invoke[org.jext.dawn.io.DawnParser], void, null, out>
<SAD, popString[], SADNESS, org.jext.dawn.io.PrintlnFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.PrintFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, print[], SADNESS, org.jext.dawn.io.PrintFunction, invoke[org.jext.dawn.io.DawnParser], void, null, out>
<SAD, popString[], SADNESS, org.jext.dawn.io.PrintFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.CloseFileFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, closeFile[], SADNESS, org.jext.dawn.io.CloseFileFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.CloseFileFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.ExistFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.io.ExistFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<java.io.File, exists[], boolean, org.jext.dawn.io.ExistFunction, invoke[org.jext.dawn.io.DawnParser], void, null, popString()))>
<SAD, constructPath[], SADNESS, org.jext.dawn.io.ExistFunction, invoke[org.jext.dawn.io.DawnParser], void, null, DawnUtilities>
<SAD, popString[], SADNESS, org.jext.dawn.io.ExistFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.ReadLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, readLine[], SADNESS, org.jext.dawn.io.ReadLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.ReadLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.io.ReadLineFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.io.LineSeparatorFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.io.WriteFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, write[], SADNESS, org.jext.dawn.io.WriteFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.WriteFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.io.WriteFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.IsAvailableFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.io.IsAvailableFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, isFileAvailable[], SADNESS, org.jext.dawn.io.IsAvailableFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.IsAvailableFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.dawn.io.IsAvailableFunction, invoke[org.jext.dawn.io.DawnParser], void, null, System>
<org.jext.dawn.io.FileManager, isFileAvailable[java.lang.String, org.jext.dawn.io.DawnParser], boolean, org.jext.dawn.io.FileManager, openFileForInput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, nothing here>
<SAD, setProperty[], SADNESS, org.jext.dawn.io.FileManager, openFileForInput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, constructPath[], SADNESS, org.jext.dawn.io.FileManager, openFileForInput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, DawnUtilities>
<org.jext.dawn.io.FileManager, isFileAvailable[java.lang.String, org.jext.dawn.io.DawnParser], boolean, org.jext.dawn.io.FileManager, openFileForOutput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, nothing here>
<SAD, setProperty[], SADNESS, org.jext.dawn.io.FileManager, openFileForOutput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, constructPath[], SADNESS, org.jext.dawn.io.FileManager, openFileForOutput[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, DawnUtilities>
<org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, org.jext.dawn.io.FileManager, readLine[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, nothing here>
<org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, org.jext.dawn.io.FileManager, read[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, parser>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, in>
<org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, nothing here>
<java.io.BufferedReader, read[], int, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, in>
<org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, null, append(c)>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.io.FileManager, read[boolean, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], java.lang.String, toString[], new StringBuffer()>
<org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, org.jext.dawn.io.FileManager, writeLine[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, nothing here>
<org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, org.jext.dawn.io.FileManager, write[java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, parser>
<java.io.BufferedWriter, write[java.lang.String, int, int], void, org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, out>
<java.lang.String, length[], int, org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, line>
<java.io.Writer, write[java.lang.String], void, org.jext.dawn.io.FileManager, write[boolean, java.lang.String, java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, out>
<SAD, getProperty[], SADNESS, org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, parser>
<java.io.BufferedReader, close[], void, org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, ((BufferedReader)obj)>
<java.io.BufferedWriter, flush[], void, org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, out>
<java.io.BufferedWriter, close[], void, org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, out>
<SAD, unsetProperty[], SADNESS, org.jext.dawn.io.FileManager, closeFile[java.lang.String, org.jext.dawn.io.Function, org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, getProperty[], SADNESS, org.jext.dawn.io.FileManager, isFileAvailable[java.lang.String, org.jext.dawn.io.DawnParser], boolean, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.FileSizeFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.io.FileSizeFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<java.io.File, length[], long, org.jext.dawn.io.FileSizeFunction, invoke[org.jext.dawn.io.DawnParser], void, null, popString()))>
<SAD, constructPath[], SADNESS, org.jext.dawn.io.FileSizeFunction, invoke[org.jext.dawn.io.DawnParser], void, null, DawnUtilities>
<SAD, popString[], SADNESS, org.jext.dawn.io.FileSizeFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.io.ReadFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, read[], SADNESS, org.jext.dawn.io.ReadFunction, invoke[org.jext.dawn.io.DawnParser], void, null, FileManager>
<SAD, popString[], SADNESS, org.jext.dawn.io.ReadFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.io.ReadFunction, invoke[org.jext.dawn.io.DawnParser], void, null, parser>
<SAD, lineno[], SADNESS, org.jext.dawn.DawnRuntimeException, DawnRuntimeException[org.jext.dawn.DawnParser, java.lang.String], void, null, parser>
<SAD, lineno[], SADNESS, org.jext.dawn.DawnRuntimeException, DawnRuntimeException[org.jext.dawn.Function, org.jext.dawn.DawnParser, java.lang.String], void, null, parser>
<SAD, getName[], SADNESS, org.jext.dawn.DawnRuntimeException, DawnRuntimeException[org.jext.dawn.Function, org.jext.dawn.DawnParser, java.lang.String], void, null, function>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.ArcCosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, acos[double], double, org.jext.dawn.math.ArcCosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.ArcCosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.ModuloFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.ModuloFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.ModuloFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.ModuloFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.math.SqrtFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.SqrtFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, sqrt[double], double, org.jext.dawn.math.SqrtFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.SqrtFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.ArcTanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, atan[double], double, org.jext.dawn.math.ArcTanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.ArcTanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.TanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, tan[double], double, org.jext.dawn.math.TanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.TanFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.DivideFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.DivideFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.DivideFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.DivideFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.PowerFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.PowerFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.PowerFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.PowerFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, pow[double, double], double, org.jext.dawn.math.PowerFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.CosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, cos[double], double, org.jext.dawn.math.CosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.CosFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.PlusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.PlusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.PlusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.PlusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, isTopNumeric[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, getVariable[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Double, doubleValue[], double, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, ((Double)obj)>
<SAD, setVariable[], SADNESS, org.jext.dawn.math.DecreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, isTopNumeric[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, getVariable[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Double, doubleValue[], double, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, ((Double)obj)>
<SAD, setVariable[], SADNESS, org.jext.dawn.math.IncreaseFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.ArcSinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, asin[double], double, org.jext.dawn.math.ArcSinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.ArcSinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.FactFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.FactFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.RoundFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.RoundFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.EFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.MinusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.MinusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.MinusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.MinusFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.math.TimesFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.TimesFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.TimesFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.TimesFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.SinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.Math, sin[double], double, org.jext.dawn.math.SinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, Math>
<SAD, popNumber[], SADNESS, org.jext.dawn.math.SinFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.math.PiFunction, invoke[org.jext.dawn.math.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, in>
<java.lang.String, length[], int, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.DawnUtilities, unescape[java.lang.String], java.lang.String, null, buf>
<java.lang.String, length[], int, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, in>
<java.lang.String, length[], int, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, in>
<java.lang.String, length[], int, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, in>
<java.lang.String, charAt[int], char, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, append('\\')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, append[char], _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.DawnUtilities, escape[java.lang.String], java.lang.String, null, _out>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.naming.FromLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, isTopLiteral[], SADNESS, org.jext.dawn.naming.FromLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.naming.FromLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.naming.FromLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.naming.ToLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, isTopString[], SADNESS, org.jext.dawn.naming.ToLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.naming.ToLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.naming.ToLiteralFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, getStream[], SADNESS, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<SAD, createGlobalFunction[], SADNESS, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.naming.CreateGlobalFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<SAD, getStream[], SADNESS, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<SAD, createRuntimeFunction[], SADNESS, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.naming.CreateFunction, invoke[org.jext.dawn.naming.DawnParser], void, null, buf>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.TrimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.TrimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, trim[], SADNESS, org.jext.dawn.string.TrimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString()>
<SAD, popString[], SADNESS, org.jext.dawn.string.TrimFunction, invoke[org.jext.dawn.string.DawnParser], void, trim[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.LastPosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.LastPosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.LastPosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.LastPosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, lastIndexOf[java.lang.String], int, org.jext.dawn.string.LastPosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, string1>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, pushString[], SADNESS, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, charAt(index))>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, new StringBuffer()>
<java.lang.String, charAt[int], char, org.jext.dawn.string.CharAtFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.LowerCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.LowerCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, toLowerCase[], SADNESS, org.jext.dawn.string.LowerCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString()>
<SAD, popString[], SADNESS, org.jext.dawn.string.LowerCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, toLowerCase[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.StartsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.StartsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.StartsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.StartsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.string.StartsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, string1>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.UpperCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.UpperCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, toUpperCase[], SADNESS, org.jext.dawn.string.UpperCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString()>
<SAD, popString[], SADNESS, org.jext.dawn.string.UpperCaseFunction, invoke[org.jext.dawn.string.DawnParser], void, toUpperCase[], parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.util.StringTokenizer, countTokens[], int, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<SAD, pushString[], SADNESS, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.TokenizeDelimFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.ChrFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.ChrFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.string.ChrFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popNumber())>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.string.ChrFunction, invoke[org.jext.dawn.string.DawnParser], void, null, new StringBuffer()>
<SAD, popNumber[], SADNESS, org.jext.dawn.string.ChrFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.ConcatFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.ConcatFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.ConcatFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, concat[], SADNESS, org.jext.dawn.string.ConcatFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString()>
<SAD, popString[], SADNESS, org.jext.dawn.string.ConcatFunction, invoke[org.jext.dawn.string.DawnParser], void, concat[], parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.SizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.SizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, length[], SADNESS, org.jext.dawn.string.SizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString()>
<SAD, popString[], SADNESS, org.jext.dawn.string.SizeFunction, invoke[org.jext.dawn.string.DawnParser], void, length[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.EndsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.EndsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.EndsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.EndsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.dawn.string.EndsWithFunction, invoke[org.jext.dawn.string.DawnParser], void, null, string1>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.ToStringFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.string.ToStringFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.ToStringFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.FromStringFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.Double, doubleValue[], double, org.jext.dawn.string.FromStringFunction, invoke[org.jext.dawn.string.DawnParser], void, null, popString())>
<SAD, popString[], SADNESS, org.jext.dawn.string.FromStringFunction, invoke[org.jext.dawn.string.DawnParser], void, doubleValue[], parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.PosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.PosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.PosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.PosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, indexOf[java.lang.String], int, org.jext.dawn.string.PosFunction, invoke[org.jext.dawn.string.DawnParser], void, null, string1>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.NumFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.NumFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.string.NumFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.NumFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, charAt[int], char, org.jext.dawn.string.NumFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, pushString[], SADNESS, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<java.lang.String, length[], int, org.jext.dawn.string.TailFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.util.StringTokenizer, countTokens[], int, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<SAD, pushString[], SADNESS, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, token>
<SAD, pushNumber[], SADNESS, org.jext.dawn.string.TokenizeFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, pushString[], SADNESS, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, charAt(0))>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, new StringBuffer()>
<java.lang.String, charAt[int], char, org.jext.dawn.string.HeadFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, length[], int, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<java.lang.String, length[], int, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, pushString[], SADNESS, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, parser>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.string.SubFunction, invoke[org.jext.dawn.string.DawnParser], void, null, str>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.SwapFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.SwapFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.SwapFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.stack.SwapFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.stack.SwapFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.DupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.stack.DupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, peek[], SADNESS, org.jext.dawn.stack.DupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.NDupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.NDupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, push[], SADNESS, org.jext.dawn.stack.NDupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, peek[], SADNESS, org.jext.dawn.stack.NDupFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.DropnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.DropnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.DropnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.DropnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getVariable[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.lang.Double, doubleValue[], double, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, ((Double)obj)>
<SAD, pushArray[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.lang.Object, toString[], java.lang.String, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, obj>
<java.lang.String, length[], int, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, str>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, str>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, str>
<java.lang.String, substring[int, int], java.lang.String, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, str>
<java.lang.String, length[], int, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, str>
<SAD, pushString[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pushString[], SADNESS, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.lang.Object, toString[], java.lang.String, org.jext.dawn.stack.RclFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, obj>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkLevel[], SADNESS, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, setElementAt[java.lang.Object, int], void, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.StoFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.stack.StoFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.stack.StoFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, setGlobalVariable[], SADNESS, org.jext.dawn.stack.StoFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, DawnParser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.StoFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pushNumber[], SADNESS, org.jext.dawn.stack.DepthFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, size[], SADNESS, org.jext.dawn.stack.DepthFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, getStack()>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.DepthFunction, invoke[org.jext.dawn.stack.DawnParser], void, size[], parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.stack.SetFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.stack.SetFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkVarName[], SADNESS, org.jext.dawn.stack.SetFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, setVariable[], SADNESS, org.jext.dawn.stack.SetFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.SetFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.DropFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, pop[], SADNESS, org.jext.dawn.stack.DropFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, removeAllElements[], SADNESS, org.jext.dawn.stack.ClearFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, getStack()>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.ClearFunction, invoke[org.jext.dawn.stack.DawnParser], void, removeAllElements[], parser>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.util.Vector, size[], int, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, removeAllElements[], void, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<SAD, checkEmpty[], SADNESS, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, checkLevel[], SADNESS, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<SAD, getStack[], SADNESS, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, parser>
<java.util.Vector, lastElement[], java.lang.Object, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, setElementAt[java.lang.Object, int], void, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.io.PrintStream, println[char[]], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, out>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, args[0]>
<SAD, init[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, DawnParser>
<java.io.PrintStream, print[java.lang.String], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, out>
<SAD, addGlobalFunction[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, DawnParser>
<java.io.PrintStream, print[char[]], void, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, out>
<SAD, dump[], SADNESS, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, parser>
<org.jext.dawn.Dawn, console[], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, args[0]>
<SAD, init[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, DawnParser>
<java.io.PrintStream, print[java.lang.String], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, out>
<org.jext.dawn.Dawn, nativeConsole[], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, nothing here>
<SAD, constructPath[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, DawnUtilities>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, in>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, append(line)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.Dawn, main[java.lang.String[]], void, append[char], buf>
<java.io.BufferedReader, close[], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, in>
<SAD, init[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, DawnParser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, buf>
<SAD, exec[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, parser>
<java.io.PrintStream, print[char[]], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, out>
<SAD, dump[], SADNESS, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, parser>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, out>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.Dawn, main[java.lang.String[]], void, null, e>
<SAD, exec[], SADNESS, org.jext.dawn.Dawn, console[], void, null, parser>
<java.io.PrintStream, println[char[]], void, org.jext.dawn.Dawn, console[], void, null, out>
<SAD, getMessage[], SADNESS, org.jext.dawn.Dawn, console[], void, null, dre>
<java.io.PrintStream, print[java.lang.String], void, org.jext.dawn.Dawn, console[], void, null, out>
<org.jext.dawn.Dawn, console[], void, org.jext.dawn.Dawn, console[], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.Dawn, nativeConsole[], void, null, readLine())>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.dawn.Dawn, nativeConsole[], void, equals[java.lang.Object], in>
<SAD, exec[], SADNESS, org.jext.dawn.Dawn, nativeConsole[], void, null, parser>
<java.io.PrintStream, print[char[]], void, org.jext.dawn.Dawn, nativeConsole[], void, null, out>
<SAD, dump[], SADNESS, org.jext.dawn.Dawn, nativeConsole[], void, null, parser>
<java.io.PrintStream, print[java.lang.String], void, org.jext.dawn.Dawn, nativeConsole[], void, null, out>
<java.io.PrintStream, println[java.lang.String], void, org.jext.dawn.Dawn, nativeConsole[], void, null, out>
<java.lang.Throwable, getMessage[], java.lang.String, org.jext.dawn.Dawn, nativeConsole[], void, null, dre>
<java.io.PrintStream, print[java.lang.String], void, org.jext.dawn.Dawn, nativeConsole[], void, null, out>
<org.jext.dawn.Dawn, nativeConsole[], void, org.jext.dawn.Dawn, nativeConsole[], void, null, nothing here>
<SAD, getStream[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, function>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, untilFunction>
<SAD, popNumber[], SADNESS, org.jext.dawn.loop.DoLoopFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, checkArgsNumber[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, popString[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, var>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, var>
<java.lang.String, length[], int, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, var>
<java.lang.Character, isDigit[char], boolean, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, Character>
<java.lang.String, charAt[int], char, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, var>
<SAD, get[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, getVariables()>
<SAD, getVariables[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, get[], parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, popNumber[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, getStream[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, put[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, getVariables()>
<SAD, getVariables[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, put[], parser>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, function>
<SAD, remove[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, getVariables()>
<SAD, getVariables[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, remove[], parser>
<SAD, put[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, getVariables()>
<SAD, getVariables[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, put[], parser>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, function>
<SAD, remove[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, getVariables()>
<SAD, getVariables[], SADNESS, org.jext.dawn.loop.ForFunction, invoke[org.jext.dawn.loop.DawnParser], void, remove[], parser>
<SAD, getStream[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, function>
<SAD, popNumber[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.io.StreamTokenizer, nextToken[], int, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, st>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, sval>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, unescape[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, DawnUtilities>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, createOnFlyFunction[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, buf>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, whileFunction>
<SAD, invoke[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, function>
<SAD, popNumber[], SADNESS, org.jext.dawn.loop.WhileFunction, invoke[org.jext.dawn.loop.DawnParser], void, null, parser>
<SAD, getTextArea[], SADNESS, org.jext.event.JextEvent, JextEvent[org.jext.event.JextFrame, int], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.ModeFileFilter, ModeFileFilter[org.jext.Mode], void, null, Jext>
<SAD, getModeName[], SADNESS, org.jext.ModeFileFilter, ModeFileFilter[org.jext.Mode], void, null, mode>
<SAD, getUserModeName[], SADNESS, org.jext.ModeFileFilter, ModeFileFilter[org.jext.Mode], void, null, mode>
<java.lang.String, endsWith[java.lang.String], boolean, org.jext.ModeFileFilter, ModeFileFilter[org.jext.Mode], void, null, description>
<SAD, getProperty[], SADNESS, org.jext.ModeFileFilter, rebuildRegexp[], void, null, Jext>
<SAD, globToRE[], SADNESS, org.jext.ModeFileFilter, rebuildRegexp[], void, null, Utilities>
<java.lang.Throwable, printStackTrace[], void, org.jext.ModeFileFilter, rebuildRegexp[], void, null, e>
<org.jext.ModeFileFilter, rebuildRegexp[], void, org.jext.ModeFileFilter, accept[java.io.File], boolean, null, nothing here>
<java.io.File, isDirectory[], boolean, org.jext.ModeFileFilter, accept[java.io.File], boolean, null, file>
<java.lang.String, lastIndexOf[int], int, org.jext.ModeFileFilter, accept[java.io.File], boolean, null, getPath()>
<java.io.File, getPath[], java.lang.String, org.jext.ModeFileFilter, accept[java.io.File], boolean, lastIndexOf[int], file>
<java.lang.String, substring[int], java.lang.String, org.jext.ModeFileFilter, accept[java.io.File], boolean, null, getPath()>
<java.io.File, getPath[], java.lang.String, org.jext.ModeFileFilter, accept[java.io.File], boolean, substring[int], file>
<SAD, isMatch[], SADNESS, org.jext.ModeFileFilter, accept[java.io.File], boolean, null, regexp>
<SAD, getTextArea[], SADNESS, org.jext.oneclick.OneAutoIndent, oneClickActionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, indent[], SADNESS, org.jext.oneclick.OneAutoIndent, oneClickActionPerformed[java.awt.event.ActionEvent], void, null, Indent>
<SAD, getCaretLine[], SADNESS, org.jext.oneclick.OneAutoIndent, oneClickActionPerformed[java.awt.event.ActionEvent], void, null, area>
<org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, nothing here>
<SAD, getUserDirectory[], SADNESS, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, Utilities>
<org.jext.console.ConsoleListDir, run[int], void, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, nothing here>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, nothing here>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, getProperties()>
<java.lang.System, getProperties[], java.util.Properties, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, put[java.lang.Object, java.lang.Object], System>
<SAD, output[], SADNESS, org.jext.console.ConsoleListDir, print[java.lang.String], void, null, parent>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, tokens>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, tokens>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, argument>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, argument>
<org.jext.console.ConsoleListDir, help[], void, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, nothing here>
<java.lang.String, length[], int, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, argument>
<java.lang.String, charAt[int], char, org.jext.console.ConsoleListDir, buildFlags[java.lang.String], boolean, null, argument>
<java.io.File, getName[], java.lang.String, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<SAD, getShortStringOf[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<java.lang.String, length[], int, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, currentName>
<java.io.File, isDirectory[], boolean, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<SAD, append[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, createWhiteSpace(amountOfSpaces))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, append(currentName)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, append[java.lang.Object], display>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<SAD, append[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, createWhiteSpace(8))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, (new StringBuffer("   "))>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<java.io.File, isFile[], boolean, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<SAD, append[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, createWhiteSpace(amountOfSpaces))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, append(currentName)>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, append[java.lang.Object], display>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<java.io.File, length[], long, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, info>
<java.io.File, canWrite[], boolean, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, info>
<java.io.File, canRead[], boolean, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, info>
<java.io.File, isHidden[], boolean, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, info>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, info>
<java.util.Date, setTime[long], void, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, date>
<java.io.File, lastModified[], long, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, current>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, time>
<java.util.Date, toString[], java.lang.String, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, date>
<java.lang.StringBuffer, setLength[int], void, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, buffer>
<java.lang.StringBuffer, append[java.lang.StringBuffer], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, time>
<java.text.SimpleDateFormat, format[java.util.Date, java.lang.StringBuffer, java.text.FieldPosition], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, formatter>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, time>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, Utilities>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, time>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, null, display>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<SAD, constructPath[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<java.io.File, isDirectory[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, f>
<java.lang.String, lastIndexOf[int], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, substring[int], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<SAD, getUserDirectory[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<SAD, listFiles[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<SAD, getWildCardMatches[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<java.lang.String, indexOf[java.lang.String], int, org.jext.console.ConsoleListDir, run[int], void, null, pattern>
<SAD, error[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Jext>
<org.jext.console.ConsoleListDir, createIndent[int], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.io.File, isHidden[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, current>
<SAD, match[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<java.io.File, getName[], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, current>
<java.io.File, isFile[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, current>
<java.io.File, isDirectory[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, current>
<org.jext.console.ConsoleListDir, displayFile[java.io.File, java.lang.String], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.io.File, isDirectory[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, current>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.ConsoleListDir, run[int], void, null, getProperties()>
<java.lang.System, getProperties[], java.util.Properties, org.jext.console.ConsoleListDir, run[int], void, put[java.lang.Object, java.lang.Object], System>
<SAD, constructPath[], SADNESS, org.jext.console.ConsoleListDir, run[int], void, null, Utilities>
<java.io.File, getAbsolutePath[], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, current>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<org.jext.console.ConsoleListDir, run[int], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.io.File, isFile[], boolean, org.jext.console.ConsoleListDir, run[int], void, null, current>
<java.io.File, length[], long, org.jext.console.ConsoleListDir, run[int], void, null, current>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, run[int], void, null, toString(totalSize / 1024)))>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, run[int], void, null, size>
<org.jext.console.ConsoleListDir, formatNumber[java.lang.String], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.lang.Long, toString[long], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, Long>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, run[int], void, null, toString(totalSize)))>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleListDir, run[int], void, null, size>
<org.jext.console.ConsoleListDir, formatNumber[java.lang.String], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.lang.Long, toString[long], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, Long>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<org.jext.console.ConsoleListDir, print[java.lang.String], void, org.jext.console.ConsoleListDir, run[int], void, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleListDir, run[int], void, null, size>
<java.lang.String, length[], int, org.jext.console.ConsoleListDir, formatNumber[java.lang.String], java.lang.String, null, number>
<java.lang.StringBuffer, insert[int, char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, formatNumber[java.lang.String], java.lang.String, null, formatted>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleListDir, formatNumber[java.lang.String], java.lang.String, null, formatted>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, createIndent[int], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleListDir, createIndent[int], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleListDir, createIndent[int], java.lang.String, null, buf>
<SAD, help[], SADNESS, org.jext.console.ConsoleListDir, help[], void, null, parent>
<SAD, getProperty[], SADNESS, org.jext.console.ConsoleListDir, help[], void, null, Jext>
<java.lang.String, length[], int, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, text>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, removeElementAt[int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, insertElementAt[java.lang.Object, int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<org.jext.console.HistoryModel, getSize[], int, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, nothing here>
<java.util.Vector, removeElementAt[int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<org.jext.console.HistoryModel, getSize[], int, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, nothing here>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.console.HistoryModel, getItem[int], java.lang.String, null, data>
<java.util.Vector, size[], int, org.jext.console.HistoryModel, getSize[], int, null, data>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.console.HistoryModel, addItemToEnd[java.lang.String], void, null, data>
<java.awt.Component, addKeyListener[java.awt.event.KeyListener], void, org.jext.console.ConsoleTextPane, ConsoleTextPane[org.jext.console.Console], void, null, nothing here>
<java.awt.event.KeyEvent, getKeyCode[], int, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, stop[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.lang.Thread, sleep[long], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, Thread>
<SAD, displayPrompt[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isShiftDown[], boolean, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, doBackwardSearch[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, deleteChar[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, removeChar[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, getText[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, command>
<SAD, addHistory[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<SAD, execute[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, historyPrevious[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, historyNext[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.text.JTextComponent, getCaretPosition[], int, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getUserLimit[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<javax.swing.text.JTextComponent, setCaretPosition[int], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.text.JTextComponent, getCaretPosition[], int, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, doCompletion[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.text.JTextComponent, setCaretPosition[int], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getUserLimit[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.text.JTextComponent, setCaretPosition[int], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getTypingLocation[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, setText[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, getTypingLocation[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, parent>
<javax.swing.text.Document, getLength[], int, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, getDocument()>
<javax.swing.text.JTextComponent, getDocument[], javax.swing.text.Document, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, getLength[], nothing here>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.text.JTextComponent, getCaretPosition[], int, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getUserLimit[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, parent>
<javax.swing.text.JTextComponent, setCaretPosition[int], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<SAD, getUserLimit[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, parent>
<java.awt.event.KeyEvent, getKeyChar[], char, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isAltDown[], boolean, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, add[], SADNESS, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, parent>
<java.lang.String, valueOf[char], java.lang.String, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, String>
<java.awt.event.InputEvent, consume[], void, org.jext.console.ConsoleTextPane.ConsoleKeyAdapter, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getCurrentDataFlavors[], java.awt.datatransfer.DataFlavor[], org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.datatransfer.DataFlavor, isFlavorJavaFileListType[], boolean, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, flavors[i]>
<java.awt.dnd.DropTargetDropEvent, acceptDrop[int], void, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.awt.dnd.DropTargetDropEvent, getTransferable[], java.awt.datatransfer.Transferable, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<java.util.List, iterator[], java.util.Iterator, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, iterator[], transferable>
<java.util.Iterator, hasNext[], boolean, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, iterator>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, append(' ')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, append[java.lang.String], buf>
<java.io.File, getPath[], java.lang.String, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, next())>
<java.util.Iterator, next[], java.lang.Object, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, getPath[], iterator>
<SAD, add[], SADNESS, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, parent>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, buf>
<java.awt.dnd.DropTargetDropEvent, dropComplete[boolean], void, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, evt>
<org.jext.console.Console, load[], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<SAD, setFont[], SADNESS, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, textArea>
<SAD, getDocument[], SADNESS, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, textArea>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, Jext>
<org.jext.console.Console, displayPrompt[], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<javax.swing.JViewport, setView[java.awt.Component], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, getViewport()>
<javax.swing.JScrollPane, getViewport[], javax.swing.JViewport, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, setView[java.awt.Component], nothing here>
<javax.swing.JComponent, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<SAD, getFont[], SADNESS, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, textArea>
<javax.swing.JComponent, setPreferredSize[java.awt.Dimension], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<java.awt.FontMetrics, charWidth[char], int, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, fm>
<javax.swing.JComponent, setMinimumSize[java.awt.Dimension], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<javax.swing.JComponent, setMaximumSize[java.awt.Dimension], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<javax.swing.JComponent, getPreferredSize[], java.awt.Dimension, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<org.jext.console.Console, initCommands[], void, org.jext.console.Console, Console[org.jext.console.JextFrame, boolean], void, null, nothing here>
<SAD, handleCommand[], SADNESS, org.jext.console.Console, builtInCommand[java.lang.String], boolean, null, _currentCmd>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<org.jext.console.Console, addCommand[org.jext.console.Command], void, org.jext.console.Console, initCommands[], void, null, nothing here>
<SAD, setBackground[], SADNESS, org.jext.console.Console, setBgColor[java.awt.Color], void, null, textArea>
<SAD, setForeground[], SADNESS, org.jext.console.Console, setOutputColor[java.awt.Color], void, null, textArea>
<SAD, setCaretColor[], SADNESS, org.jext.console.Console, setOutputColor[java.awt.Color], void, null, textArea>
<SAD, setSelectionColor[], SADNESS, org.jext.console.Console, setSelectionColor[java.awt.Color], void, null, textArea>
<SAD, getSize[], SADNESS, org.jext.console.Console, save[], void, null, historyModel>
<SAD, setProperty[], SADNESS, org.jext.console.Console, save[], void, null, Jext>
<SAD, getItem[], SADNESS, org.jext.console.Console, save[], void, null, historyModel>
<SAD, getProperty[], SADNESS, org.jext.console.Console, load[], void, null, Jext>
<SAD, addItem[], SADNESS, org.jext.console.Console, load[], void, null, historyModel>
<org.jext.console.Console, buildPrompt[], void, org.jext.console.Console, setPromptPattern[java.lang.String], void, null, nothing here>
<org.jext.console.Console, buildPrompt[], void, org.jext.console.Console, displayPrompt[], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.console.Console, displayPrompt[], void, null, Jext>
<org.jext.console.Console, append[java.lang.String, java.awt.Color], void, org.jext.console.Console, displayPrompt[], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color], void, org.jext.console.Console, displayPrompt[], void, null, nothing here>
<javax.swing.text.Document, getLength[], int, org.jext.console.Console, displayPrompt[], void, null, outputDocument>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.Console, buildPrompt[], void, null, oldPath>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.console.Console, buildPrompt[], void, null, System>
<java.net.InetAddress, getHostName[], java.lang.String, org.jext.console.Console, buildPrompt[], void, null, getLocalHost()>
<java.net.InetAddress, getLocalHost[], java.net.InetAddress, org.jext.console.Console, buildPrompt[], void, getHostName[], InetAddress>
<java.lang.String, length[], int, org.jext.console.Console, buildPrompt[], void, null, promptPattern>
<java.lang.String, charAt[int], char, org.jext.console.Console, buildPrompt[], void, null, promptPattern>
<java.lang.String, length[], int, org.jext.console.Console, buildPrompt[], void, null, promptPattern>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.String, charAt[int], char, org.jext.console.Console, buildPrompt[], void, null, promptPattern>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.console.Console, buildPrompt[], void, null, System>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.console.Console, buildPrompt[], void, null, System>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, buildPrompt[], void, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.Console, buildPrompt[], void, null, buf>
<javax.swing.text.SimpleAttributeSet, addAttribute[java.lang.Object, java.lang.Object], void, org.jext.console.Console.Appender, run[], void, null, style>
<javax.swing.text.StyleConstants, setBold[javax.swing.text.MutableAttributeSet, boolean], void, org.jext.console.Console.Appender, run[], void, null, StyleConstants>
<javax.swing.text.StyleConstants, setItalic[javax.swing.text.MutableAttributeSet, boolean], void, org.jext.console.Console.Appender, run[], void, null, StyleConstants>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.console.Console.Appender, run[], void, null, outputDocument>
<javax.swing.text.Document, getLength[], int, org.jext.console.Console.Appender, run[], void, null, outputDocument>
<SAD, setCaretPosition[], SADNESS, org.jext.console.Console.Appender, run[], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.console.Console.Appender, run[], void, null, outputDocument>
<javax.swing.SwingUtilities, isEventDispatchThread[], boolean, org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, null, SwingUtilities>
<java.lang.Runnable, run[], void, org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, null, appender>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, null, SwingUtilities>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, append[java.lang.String, java.awt.Color], void, null, nothing here>
<SAD, addItem[], SADNESS, org.jext.console.Console, addHistory[java.lang.String], void, null, historyModel>
<SAD, getCaretPosition[], SADNESS, org.jext.console.Console, removeChar[], void, null, textArea>
<javax.swing.text.Document, remove[int, int], void, org.jext.console.Console, removeChar[], void, null, outputDocument>
<SAD, getCaretPosition[], SADNESS, org.jext.console.Console, deleteChar[], void, null, textArea>
<javax.swing.text.Document, getLength[], int, org.jext.console.Console, deleteChar[], void, null, outputDocument>
<javax.swing.text.Document, remove[int, int], void, org.jext.console.Console, deleteChar[], void, null, outputDocument>
<SAD, getCaretPosition[], SADNESS, org.jext.console.Console, add[java.lang.String], void, null, textArea>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.console.Console, add[java.lang.String], void, null, outputDocument>
<java.lang.String, length[], int, org.jext.console.Console, add[java.lang.String], void, null, add>
<SAD, getCaretPosition[], SADNESS, org.jext.console.Console, doCompletion[], void, null, textArea>
<org.jext.console.Console, getText[], java.lang.String, org.jext.console.Console, doCompletion[], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.console.Console, doCompletion[], void, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.Console, doCompletion[], void, null, wholeText>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, outputDocument>
<java.lang.String, length[], int, org.jext.console.Console, doCompletion[], void, null, text>
<java.lang.String, indexOf[int], int, org.jext.console.Console, doCompletion[], void, null, COMPLETION_SEPARATORS>
<java.lang.String, charAt[int], char, org.jext.console.Console, doCompletion[], void, null, text>
<java.lang.String, substring[int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, text>
<java.lang.String, lastIndexOf[int], int, org.jext.console.Console, doCompletion[], void, null, current>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, current>
<java.lang.String, substring[int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, current>
<SAD, getWildCardMatches[], SADNESS, org.jext.console.Console, doCompletion[], void, null, Utilities>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.Console, doCompletion[], void, null, current>
<java.lang.String, length[], int, org.jext.console.Console, doCompletion[], void, null, files[i]>
<java.lang.String, charAt[int], char, org.jext.console.Console, doCompletion[], void, null, source>
<java.lang.String, length[], int, org.jext.console.Console, doCompletion[], void, null, compare>
<java.lang.String, charAt[int], char, org.jext.console.Console, doCompletion[], void, null, compare>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, source>
<java.io.File, isAbsolute[], boolean, org.jext.console.Console, doCompletion[], void, null, f>
<SAD, getUserDirectory[], SADNESS, org.jext.console.Console, doCompletion[], void, null, Utilities>
<java.io.File, isDirectory[], boolean, org.jext.console.Console, doCompletion[], void, null, f>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, text>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, doCompletion[], void, null, nothing here>
<java.lang.String, substring[int], java.lang.String, org.jext.console.Console, doCompletion[], void, null, wholeText>
<SAD, setCaretPosition[], SADNESS, org.jext.console.Console, doCompletion[], void, null, textArea>
<java.lang.String, length[], int, org.jext.console.Console, doCompletion[], void, null, textToInsert>
<org.jext.console.Console, getText[], java.lang.String, org.jext.console.Console, doBackwardSearch[], void, null, nothing here>
<org.jext.console.Console, historyPrevious[], void, org.jext.console.Console, doBackwardSearch[], void, null, nothing here>
<SAD, getSize[], SADNESS, org.jext.console.Console, doBackwardSearch[], void, null, historyModel>
<SAD, getItem[], SADNESS, org.jext.console.Console, doBackwardSearch[], void, null, historyModel>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.Console, doBackwardSearch[], void, null, item>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, doBackwardSearch[], void, null, nothing here>
<SAD, getSize[], SADNESS, org.jext.console.Console, historyPrevious[], void, null, historyModel>
<java.awt.Toolkit, beep[], void, org.jext.console.Console, historyPrevious[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.jext.console.Console, historyPrevious[], void, beep[], nothing here>
<org.jext.console.Console, getText[], java.lang.String, org.jext.console.Console, historyPrevious[], void, null, nothing here>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, historyPrevious[], void, null, nothing here>
<SAD, getItem[], SADNESS, org.jext.console.Console, historyPrevious[], void, null, historyModel>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, historyPrevious[], void, null, nothing here>
<SAD, getItem[], SADNESS, org.jext.console.Console, historyPrevious[], void, null, historyModel>
<java.awt.Toolkit, beep[], void, org.jext.console.Console, historyNext[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.jext.console.Console, historyNext[], void, beep[], nothing here>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, historyNext[], void, null, nothing here>
<org.jext.console.Console, setText[java.lang.String], void, org.jext.console.Console, historyNext[], void, null, nothing here>
<SAD, getItem[], SADNESS, org.jext.console.Console, historyNext[], void, null, historyModel>
<javax.swing.text.Document, remove[int, int], void, org.jext.console.Console, setText[java.lang.String], void, null, outputDocument>
<javax.swing.text.Document, insertString[int, java.lang.String, javax.swing.text.AttributeSet], void, org.jext.console.Console, setText[java.lang.String], void, null, outputDocument>
<javax.swing.text.Document, getLength[], int, org.jext.console.Console, setText[java.lang.String], void, null, outputDocument>
<javax.swing.text.Document, getText[int, int], java.lang.String, org.jext.console.Console, getText[], java.lang.String, null, outputDocument>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, help[], void, null, append("   - ")>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, help[], void, append[java.lang.Object], buf>
<SAD, getCommandName[], SADNESS, org.jext.console.Console, help[], void, null, _current>
<SAD, append[], SADNESS, org.jext.console.Console, help[], void, null, length()))>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, help[], void, null, buf>
<SAD, createWhiteSpace[], SADNESS, org.jext.console.Console, help[], void, null, Utilities>
<SAD, length[], SADNESS, org.jext.console.Console, help[], void, null, getCommandName()>
<SAD, getCommandName[], SADNESS, org.jext.console.Console, help[], void, length[], _current>
<SAD, append[], SADNESS, org.jext.console.Console, help[], void, null, append(')')>
<SAD, append[], SADNESS, org.jext.console.Console, help[], void, append[], getCommandSummary())>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, help[], void, null, buf>
<SAD, getCommandSummary[], SADNESS, org.jext.console.Console, help[], void, null, _current>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, help[], void, null, buf>
<org.jext.console.Console, help[java.lang.String], void, org.jext.console.Console, help[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.console.Console, help[], void, null, Jext>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.Console, help[], void, null, buf>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, info[java.lang.String], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, help[java.lang.String], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, error[java.lang.String], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color, boolean, boolean], void, org.jext.console.Console, output[java.lang.String], void, null, nothing here>
<org.jext.console.Console$ConsoleProcess, stop[], void, org.jext.console.Console, stop[], void, null, cProcess>
<java.lang.String, length[], int, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, command>
<java.lang.String, charAt[int], char, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, command>
<java.lang.String, length[], int, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, command>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.String, charAt[int], char, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, command>
<SAD, getCurrentFile[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, getCurrentFile[], parent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getUserDirectory[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, Utilities>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getName[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, getName[], parent>
<SAD, getName[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, getName[], parent>
<java.lang.String, lastIndexOf[int], int, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, file>
<java.lang.String, length[], int, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, file>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, file>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getCurrentFile[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, getCurrentFile[], parent>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, file>
<java.lang.String, lastIndexOf[java.lang.String], int, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, file>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getHomeDirectory[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, Utilities>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getHomeDirectory[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, Jext>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<SAD, getSelectedText[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, getTextArea()>
<SAD, getTextArea[], SADNESS, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, getSelectedText[], parent>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, null, buf>
<org.jext.console.Console, stop[], void, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<org.jext.console.Console, info[java.lang.String], void, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<SAD, getBooleanProperty[], SADNESS, org.jext.console.Console, execute[java.lang.String], void, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.Console, execute[java.lang.String], void, null, command>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.Console, execute[java.lang.String], void, null, command>
<java.lang.String, substring[int], java.lang.String, org.jext.console.Console, execute[java.lang.String], void, null, command>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.Console, execute[java.lang.String], void, null, command>
<SAD, setProperty[], SADNESS, org.jext.console.Console, execute[java.lang.String], void, null, Jext>
<org.jext.console.Console, displayPrompt[], void, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<SAD, startupPythonInterpreter[], SADNESS, org.jext.console.Console, execute[java.lang.String], void, null, Run>
<SAD, setupPythonInterpreter[], SADNESS, org.jext.console.Console, execute[java.lang.String], void, null, Run>
<java.lang.StringBuffer, length[], int, org.jext.console.Console, execute[java.lang.String], void, null, pythonBuf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, execute[java.lang.String], void, null, pythonBuf>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.jext.console.Console, execute[java.lang.String], void, null, pythonBuf>
<SAD, runsource[], SADNESS, org.jext.console.Console, execute[java.lang.String], void, null, parser>
<java.lang.StringBuffer, toString[], java.lang.String, org.jext.console.Console, execute[java.lang.String], void, null, pythonBuf>
<java.lang.StringBuffer, setLength[int], void, org.jext.console.Console, execute[java.lang.String], void, null, pythonBuf>
<org.jext.console.Console, displayPrompt[], void, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<java.lang.String, substring[int], java.lang.String, org.jext.console.Console, execute[java.lang.String], void, null, command>
<java.lang.String, trim[], java.lang.String, org.jext.console.Console, execute[java.lang.String], void, null, command>
<org.jext.console.Console, parseCommand[java.lang.String], java.lang.String, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<java.lang.String, length[], int, org.jext.console.Console, execute[java.lang.String], void, null, command>
<org.jext.console.Console, builtInCommand[java.lang.String], boolean, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<org.jext.console.Console, displayPrompt[], void, org.jext.console.Console, execute[java.lang.String], void, null, nothing here>
<org.jext.console.Console$ConsoleProcess, execute[], void, org.jext.console.Console, execute[java.lang.String], void, null, cProcess>
<org.jext.console.Console$ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, org.jext.console.Console.ConsoleProcess, ConsoleProcess[java.lang.String], void, null, nothing here>
<java.lang.String, indexOf[int], int, org.jext.console.Console.ConsoleProcess, execute[], void, null, command>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console.ConsoleProcess, execute[], void, null, command>
<org.jext.console.Console, info[java.lang.String], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, nothing here>
<SAD, charAt[], SADNESS, org.jext.console.Console.ConsoleProcess, execute[], void, null, JDK_VERSION>
<java.lang.Runtime, exec[java.lang.String], java.lang.Process, org.jext.console.Console.ConsoleProcess, execute[], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, org.jext.console.Console.ConsoleProcess, execute[], void, exec[java.lang.String], Runtime>
<java.lang.Runtime, exec[java.lang.String, java.lang.String[], java.io.File], java.lang.Process, org.jext.console.Console.ConsoleProcess, execute[], void, null, getRuntime()>
<java.lang.Runtime, getRuntime[], java.lang.Runtime, org.jext.console.Console.ConsoleProcess, execute[], void, exec[java.lang.String, java.lang.String[], java.io.File], Runtime>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.jext.console.Console.ConsoleProcess, execute[], void, null, System>
<org.jext.console.Console, error[java.lang.String], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.console.Console.ConsoleProcess, execute[], void, null, Jext>
<org.jext.console.Console, displayPrompt[], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, nothing here>
<java.lang.Thread, start[], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, stdout>
<java.lang.Thread, start[], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, stderr>
<java.lang.Thread, start[], void, org.jext.console.Console.ConsoleProcess, execute[], void, null, stdin>
<java.lang.String, lastIndexOf[int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, charAt[int], char, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, indexOf[int, int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, length[], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, charAt[int], char, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, lastIndexOf[int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, charAt[int], char, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, indexOf[int, int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, length[], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, charAt[int], char, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, indexOf[int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, length[], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, indexOf[int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.String, length[], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.Math, min[int, int], int, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, Math>
<java.lang.String, substring[int, int], java.lang.String, org.jext.console.Console.ConsoleProcess, handleRedirs[java.lang.String], java.lang.String, null, toParse>
<java.lang.Thread, interrupt[], void, org.jext.console.Console.ConsoleProcess, stop[], void, null, stdout>
<java.lang.Thread, interrupt[], void, org.jext.console.Console.ConsoleProcess, stop[], void, null, stderr>
<java.lang.Thread, interrupt[], void, org.jext.console.Console.ConsoleProcess, stop[], void, null, stdin>
<java.lang.Process, destroy[], void, org.jext.console.Console.ConsoleProcess, stop[], void, null, process>
<org.jext.console.Console, error[java.lang.String], void, org.jext.console.Console.ConsoleProcess, stop[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.console.Console.ConsoleProcess, stop[], void, null, Jext>
<org.jext.console.Console$ConsoleProcess$StdinThread, print[java.lang.String], void, org.jext.console.Console.ConsoleProcess, sendToProcess[java.lang.String], void, null, stdin>
<java.lang.Object, notify[], void, org.jext.console.Console.ConsoleProcess.StdinThread, print[java.lang.String], void, null, this>
<java.lang.Process, getOutputStream[], java.io.OutputStream, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, process>
<java.io.PrintStream, println[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, out>
<java.lang.Thread, isInterrupted[], boolean, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, nothing here>
<java.lang.Object, wait[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, this>
<java.io.PrintWriter, print[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, out>
<java.io.PrintWriter, flush[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, out>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, npe>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, ie>
<java.io.File, exists[], boolean, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, f>
<java.io.Reader, read[char[]], int, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, in>
<java.io.PrintWriter, write[char[], int, int], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, out>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, ioe>
<java.io.InputStreamReader, close[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, in>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, ioe>
<org.jext.console.Console, error[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, nothing here>
<java.lang.Thread, sleep[long], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, nothing here>
<java.io.PrintWriter, close[], void, org.jext.console.Console.ConsoleProcess.StdinThread, run[], void, null, out>
<java.lang.Process, getInputStream[], java.io.InputStream, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, process>
<java.io.PrintStream, println[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, out>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, in>
<org.jext.console.Console, output[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, nothing here>
<java.io.Reader, read[char[]], int, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, in>
<java.io.BufferedWriter, write[char[], int, int], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, out>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, ioe>
<java.io.BufferedWriter, close[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, out>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, ioe>
<java.lang.Thread, isInterrupted[], boolean, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, nothing here>
<java.lang.Process, waitFor[], int, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, process>
<org.jext.console.Console, info[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, Jext>
<java.lang.Thread, sleep[long], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, nothing here>
<java.lang.Process, destroy[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, process>
<java.lang.Thread, interrupt[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, stdin>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, SwingUtilities>
<org.jext.console.Console, displayPrompt[], void, java.lang.Object, run[], void, null, nothing here>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, npe>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, ie>
<java.io.BufferedReader, close[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, in>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.Console.ConsoleProcess.StdoutThread, run[], void, null, ioe>
<java.lang.Process, getErrorStream[], java.io.InputStream, org.jext.console.Console.ConsoleProcess.StderrThread, run[], void, null, process>
<java.io.BufferedReader, readLine[], java.lang.String, org.jext.console.Console.ConsoleProcess.StderrThread, run[], void, null, in>
<org.jext.console.Console, error[java.lang.String], void, org.jext.console.Console.ConsoleProcess.StderrThread, run[], void, null, nothing here>
<java.io.BufferedReader, close[], void, org.jext.console.Console.ConsoleProcess.StderrThread, run[], void, null, in>
<java.awt.Component, repaint[], void, java.io.Writer, flush[], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color], void, java.io.Writer, write[char[], int, int], void, null, this>
<java.awt.Component, repaint[], void, java.io.Writer, flush[], void, null, nothing here>
<org.jext.console.Console, append[java.lang.String, java.awt.Color], void, java.io.Writer, write[char[], int, int], void, null, this>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ListCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, list[], SADNESS, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, ConsoleListDir>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, list[], SADNESS, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, ConsoleListDir>
<java.lang.String, substring[int], java.lang.String, org.jext.console.commands.ListCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, getProperty[], SADNESS, org.jext.console.commands.PwdCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.PwdCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, output[], SADNESS, org.jext.console.commands.PwdCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getUserDirectory[], SADNESS, org.jext.console.commands.PwdCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.console.commands.HomeCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.HomeCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.commands.HomeCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getProperties()>
<java.lang.System, getProperties[], java.util.Properties, org.jext.console.commands.HomeCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, put[java.lang.Object, java.lang.Object], System>
<SAD, getHomeDirectory[], SADNESS, org.jext.console.commands.HomeCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ClearCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ClearCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, remove[], SADNESS, org.jext.console.commands.ClearCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getOutputDocument()>
<SAD, getOutputDocument[], SADNESS, org.jext.console.commands.ClearCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, remove[], console>
<SAD, getLength[], SADNESS, org.jext.console.commands.ClearCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getOutputDocument()>
<SAD, getOutputDocument[], SADNESS, org.jext.console.commands.ClearCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, getLength[], console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.RunCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, substring[int], java.lang.String, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, length[], int, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, argument>
<SAD, runScript[], SADNESS, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Run>
<SAD, constructPath[], SADNESS, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Utilities>
<SAD, getParentFrame[], SADNESS, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, error[], SADNESS, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.RunCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.HttpCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, command>
<SAD, getParentFrame[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, console>
<SAD, createFile[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, parent>
<SAD, open[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, textArea>
<java.net.URL, openStream[], java.io.InputStream, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, url>
<SAD, showError[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, Utilities>
<SAD, getProperty[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, Jext>
<SAD, showError[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, Utilities>
<java.lang.Throwable, toString[], java.lang.String, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, ioe>
<SAD, close[], SADNESS, org.jext.console.commands.HttpCommand, handleCommand[java.io.Console, java.lang.String], boolean, null, parent>
<SAD, getProperty[], SADNESS, org.jext.console.commands.HelpCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.HelpCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, help[], SADNESS, org.jext.console.commands.HelpCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.FileCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, substring[int], java.lang.String, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, length[], int, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, argument>
<SAD, open[], SADNESS, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getParentFrame()>
<SAD, getParentFrame[], SADNESS, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, open[], console>
<SAD, constructPath[], SADNESS, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Utilities>
<SAD, error[], SADNESS, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.FileCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ChangeDirCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, help[], SADNESS, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, constructPath[], SADNESS, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Utilities>
<java.lang.String, substring[int], java.lang.String, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.io.File, exists[], boolean, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, (new File(newPath))>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getProperties()>
<java.lang.System, getProperties[], java.util.Properties, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, put[java.lang.Object, java.lang.Object], System>
<SAD, error[], SADNESS, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.ExitCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.ExitCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, exit[], SADNESS, org.jext.console.commands.ExitCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.JythonCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, equals[java.lang.Object], boolean, org.jext.console.commands.JythonCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<SAD, getBooleanProperty[], SADNESS, org.jext.console.commands.JythonCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.console.commands.JythonCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, setProperty[], SADNESS, org.jext.console.commands.JythonCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<SAD, getProperty[], SADNESS, org.jext.console.commands.EvalCommand, getCommandSummary[], java.lang.String, null, Jext>
<java.lang.String, startsWith[java.lang.String], boolean, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, substring[int], java.lang.String, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, command>
<java.lang.String, length[], int, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, argument>
<SAD, getPythonInterpreter[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Run>
<SAD, getParentFrame[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, set[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, parser>
<SAD, getTextArea[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getParentFrame()>
<SAD, getParentFrame[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, getTextArea[], console>
<SAD, exec[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, parser>
<java.lang.Throwable, printStackTrace[], void, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, pe>
<SAD, error[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, console>
<SAD, getProperty[], SADNESS, org.jext.console.commands.EvalCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, Jext>
<org.gjt.sp.jedit.OperatingSystem, isWindows[], boolean, org.gjt.sp.jedit.OperatingSystem, isDOSDerived[], boolean, null, nothing here>
<org.gjt.sp.jedit.OperatingSystem, isOS2[], boolean, org.gjt.sp.jedit.OperatingSystem, isDOSDerived[], boolean, null, nothing here>
<org.gjt.sp.jedit.OperatingSystem, isMacOS[], boolean, org.gjt.sp.jedit.OperatingSystem, isMacOSLF[], boolean, null, nothing here>
<javax.swing.LookAndFeel, isNativeLookAndFeel[], boolean, org.gjt.sp.jedit.OperatingSystem, isMacOSLF[], boolean, null, getLookAndFeel()>
<javax.swing.UIManager, getLookAndFeel[], javax.swing.LookAndFeel, org.gjt.sp.jedit.OperatingSystem, isMacOSLF[], boolean, isNativeLookAndFeel[], UIManager>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, System>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, System>
<java.lang.String, indexOf[java.lang.String], int, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, osName>
<java.lang.String, indexOf[java.lang.String], int, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, osName>
<java.lang.String, indexOf[java.lang.String], int, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, osName>
<java.lang.String, indexOf[java.lang.String], int, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, osName>
<java.lang.String, compareTo[java.lang.String], int, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, version")>
<java.lang.System, getProperty[java.lang.String], java.lang.String, org.gjt.sp.jedit.OperatingSystem, hasJava14[], boolean, null, System>
<java.awt.RenderingHints, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.TextAreaPainter, initRenderingings[], void, null, ANTI_ALIASED_RENDERING>
<java.awt.RenderingHints, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.TextAreaPainter, initRenderingings[], void, null, ANTI_ALIASED_RENDERING>
<java.awt.RenderingHints, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.TextAreaPainter, initRenderingings[], void, null, ANTI_ALIASED_RENDERING>
<org.gjt.sp.jedit.textarea.TextAreaPainter, initRenderingings[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setAutoscrolls[boolean], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setDoubleBuffered[boolean], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setOpaque[boolean], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.ToolTipManager, registerComponent[javax.swing.JComponent], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, sharedInstance()>
<javax.swing.ToolTipManager, sharedInstance[], javax.swing.ToolTipManager, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, registerComponent[javax.swing.JComponent], ToolTipManager>
<java.awt.Component, setCursor[java.awt.Cursor], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, Cursor>
<org.gjt.sp.jedit.textarea.TextAreaPainter, setFont[java.awt.Font], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, TextAreaPainter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Graphics2D, setRenderingHints[java.util.Map<?,?>], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setAntiAliasing[java.awt.Graphics], void, null, ((Graphics2D)g)>
<java.awt.Graphics2D, setRenderingHints[java.util.Map<?,?>], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setAntiAliasing[java.awt.Graphics], void, null, ((Graphics2D)g)>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setStyles[org.gjt.sp.jedit.textarea.SyntaxStyle[]], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setCaretColor[java.awt.Color], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setSelectionColor[java.awt.Color], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setHighlightColor[java.awt.Color], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setLineHighlightColor[java.awt.Color], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setLineHighlightEnabled[boolean], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setBracketHighlightColor[java.awt.Color], void, null, nothing here>
<SAD, getBracketLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, setBracketHighlightColor[java.awt.Color], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setBracketHighlightEnabled[boolean], void, null, nothing here>
<SAD, getBracketLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, setBracketHighlightEnabled[boolean], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setBlockCaretEnabled[boolean], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setEOLMarkerColor[java.awt.Color], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, setEOLMarkersPainted[boolean], void, null, nothing here>
<SAD, init[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, addCustomHighlight[org.gjt.sp.jedit.textarea.TextAreaHighlight], void, null, highlight>
<SAD, init[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, addCustomFirstPriorityHighlight[org.gjt.sp.jedit.textarea.TextAreaHighlight], void, null, highlight>
<SAD, getToolTipText[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, getToolTipText[java.awt.event.MouseEvent], java.lang.String, null, highlights>
<java.awt.Toolkit, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.gjt.sp.jedit.textarea.TextAreaPainter, setFont[java.awt.Font], void, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.TextAreaPainter, setFont[java.awt.Font], void, getFontMetrics[java.awt.Font], Toolkit>
<SAD, recalculateVisibleLines[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, setFont[java.awt.Font], void, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, fm>
<java.lang.Integer, intValue[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, tabSizeAttribute))>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, getProperty[], textArea>
<java.awt.Graphics, getClipBounds[], java.awt.Rectangle, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getBackground[], java.awt.Color, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, gfx>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, fm>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, textArea>
<SAD, getHorizontalOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, textArea>
<SAD, getTokenMarker[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, getTokenMarker[], textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, nothing here>
<SAD, setLineWidth[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, tokenMarker>
<SAD, isNextLineRequested[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, tokenMarker>
<java.awt.Component, repaint[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getWidth[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, nothing here>
<SAD, updateMaxHorizontalScrollWidth[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, textArea>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, err>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paint[java.awt.Graphics], void, null, e>
<java.awt.Component, repaint[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, nothing here>
<SAD, lineToY[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, textArea>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, fm>
<javax.swing.JComponent, getWidth[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, nothing here>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLine[int], void, null, fm>
<java.awt.Component, repaint[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, nothing here>
<SAD, lineToY[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, textArea>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, fm>
<javax.swing.JComponent, getWidth[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, nothing here>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, null, fm>
<org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateLineRange[int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, null, nothing here>
<SAD, getSelectionStartLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, null, textArea>
<SAD, getSelectionEndLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, invalidateSelectedLines[], void, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, nextTabStop[float, int], float, null, fm>
<java.lang.Integer, intValue[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, nextTabStop[float, int], float, null, tabSizeAttribute))>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, nextTabStop[float, int], float, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, nextTabStop[float, int], float, getProperty[], textArea>
<SAD, getHorizontalOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, nextTabStop[float, int], float, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, getPreferredSize[], java.awt.Dimension, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, getPreferredSize[], java.awt.Dimension, null, fm>
<org.gjt.sp.jedit.textarea.TextAreaPainter, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.TextAreaPainter, getMinimumSize[], java.awt.Dimension, null, nothing here>
<java.awt.Component, getFont[], java.awt.Font, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, nothing here>
<java.awt.Component, getForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, nothing here>
<SAD, lineToY[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, nothing here>
<SAD, setGraphicsFlags[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, INVALID]>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, gfx>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, fm>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, boolean, int, int], int, null, nothing here>
<SAD, paintHighlight[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, firstPriorityHighlights>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, textArea>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, tokenMarker>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, fm>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, fm>
<SAD, toString[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, lineSegment>
<SAD, getRealLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, Utilities>
<java.lang.String, substring[int, int], java.lang.String, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, textLine>
<SAD, getTabSize[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, jextArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, nothing here>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, textArea>
<java.awt.Graphics, setFont[java.awt.Font], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, fm>
<SAD, paintSyntaxLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, SyntaxUtilities>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintSyntaxLine[java.awt.Graphics, org.gjt.sp.jedit.textarea.TokenMarker, int, java.awt.Font, java.awt.Color, int, int], int, null, gfx>
<SAD, getSelectionStartLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getSelectionEndLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<SAD, paintHighlight[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, highlights>
<SAD, getBracketLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<SAD, getShadowCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, textArea>
<org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, fm>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, fm>
<SAD, getHeight[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, fm>
<SAD, getHorizontalOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getWidth[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintWrapGuide[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, fm>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, gfx>
<javax.swing.JComponent, getWidth[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, nothing here>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getSelectionStartLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getSelectionEndLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, isSelectionRectangular[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, Math>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, Math>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLinesInterval[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, fm>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, gfx>
<javax.swing.JComponent, getWidth[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, nothing here>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getSelectionStartLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getSelectionEndLine[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, isSelectionRectangular[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, Math>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, Math>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineLength[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintLineHighlight[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getBracketPosition[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, fm>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintBracketHighlight[java.awt.Graphics, int, int], void, null, fm>
<SAD, isCaretVisible[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, isOverwriteEnabled[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, gfx>
<SAD, isOverwriteEnabled[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, drawRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintCaret[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getShadowCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, textArea>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, fm>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, gfx>
<java.awt.Color, darker[], java.awt.Color, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, caretColor>
<java.awt.Graphics, drawLine[int, int, int, int], void, org.gjt.sp.jedit.textarea.TextAreaPainter, paintShadowCaret[java.awt.Graphics, int, int], void, null, gfx>
<SAD, getDefaults[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame], void, null, TextAreaDefaults>
<java.awt.Component, enableEvents[long], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Container, setLayout[java.awt.LayoutManager], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JScrollBar, addAdjustmentListener[java.awt.event.AdjustmentListener], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, vertical>
<javax.swing.JScrollBar, addAdjustmentListener[java.awt.event.AdjustmentListener], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, horizontal>
<SAD, addComponentListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, painter>
<SAD, addMouseListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, painter>
<SAD, addMouseMotionListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, painter>
<java.awt.Component, addFocusListener[java.awt.event.FocusListener], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, org.gjt.sp.jedit.textarea.JEditTextArea, JEditTextArea[org.gjt.sp.jedit.textarea.JextFrame, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<SAD, getInputHandler[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getInputHandler[], org.gjt.sp.jedit.textarea.InputHandler, null, view>
<SAD, invalidateSelectedLines[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setCaretBlinkEnabled[boolean], void, null, painter>
<SAD, invalidateSelectedLines[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setCaretVisible[boolean], void, null, painter>
<SAD, invalidateSelectedLines[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, blinkCaret[], void, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, nothing here>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, nothing here>
<javax.swing.JScrollBar, setValues[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, vertical>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, nothing here>
<javax.swing.JScrollBar, setUnitIncrement[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, vertical>
<javax.swing.JScrollBar, setBlockIncrement[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, vertical>
<SAD, getWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, painter>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, painter>
<javax.swing.JScrollBar, setUnitIncrement[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, horizontal>
<SAD, charWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, getFontMetrics()>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, charWidth[], painter>
<javax.swing.JScrollBar, setBlockIncrement[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, null, horizontal>
<javax.swing.JScrollBar, getValue[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, null, vertical>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, null, nothing here>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, null, painter>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, null, gutter>
<SAD, getHeight[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, recalculateVisibleLines[], void, null, painter>
<SAD, getHeight[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, recalculateVisibleLines[], void, null, getFontMetrics()>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, recalculateVisibleLines[], void, getHeight[], painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, recalculateVisibleLines[], void, null, nothing here>
<SAD, getMaxLineWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, null, getTokenMarker()>
<org.gjt.sp.jedit.textarea.JEditTextArea, getTokenMarker[], org.gjt.sp.jedit.textarea.TokenMarker, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, getMaxLineWidth[], nothing here>
<javax.swing.JScrollBar, setValues[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, null, horizontal>
<SAD, getWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, null, painter>
<SAD, charWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, null, getFontMetrics()>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateMaxHorizontalScrollWidth[], void, charWidth[], painter>
<javax.swing.JScrollBar, getValue[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setHorizontalOffset[int], void, null, horizontal>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setHorizontalOffset[int], void, null, nothing here>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setHorizontalOffset[int], void, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setOrigin[int, int], boolean, null, nothing here>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setOrigin[int, int], boolean, null, painter>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setOrigin[int, int], boolean, null, gutter>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, nothing here>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, Math>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, nothing here>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, Math>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, nothing here>
<SAD, charWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, getFontMetrics()>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, charWidth[], painter>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, Math>
<SAD, getWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, painter>
<SAD, getWidth[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, setOrigin[int, int], boolean, org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, lineToY[int], int, null, painter>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.JEditTextArea, lineToY[int], int, null, fm>
<java.awt.FontMetrics, getLeading[], int, org.gjt.sp.jedit.textarea.JEditTextArea, lineToY[int], int, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.JEditTextArea, lineToY[int], int, null, fm>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, null, painter>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, null, fm>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, null, Math>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getTokenMarker[], org.gjt.sp.jedit.textarea.TokenMarker, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int, javax.swing.text.Segment], void, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, nothing here>
<javax.swing.text.Utilities, getTabbedTextWidth[javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, Utilities>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, tokenMarker>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, painter>
<SAD, getFont[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, painter>
<SAD, getStyles[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, painter>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, painter>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, styles[id]>
<javax.swing.text.Utilities, getTabbedTextWidth[javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, Utilities>
<javax.swing.text.Utilities, getTabbedTextWidth[javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, offsetToX[int, int], int, null, Utilities>
<org.gjt.sp.jedit.textarea.JEditTextArea, getTokenMarker[], org.gjt.sp.jedit.textarea.TokenMarker, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int, javax.swing.text.Segment], void, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, nothing here>
<SAD, nextTabStop[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, fm>
<SAD, isBlockCaretEnabled[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, tokenMarker>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<SAD, getFont[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<SAD, getStyles[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, styles[id]>
<SAD, nextTabStop[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<java.awt.FontMetrics, charWidth[char], int, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, fm>
<SAD, isBlockCaretEnabled[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, xyToOffset[int, int], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, xyToOffset[int, int], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, xyToOffset[int, int], int, null, nothing here>
<SAD, removeDocumentListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, document>
<SAD, addDocumentListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, nothing here>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, painter>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setDocument[org.gjt.sp.jedit.textarea.SyntaxDocument], void, null, gutter>
<SAD, getTokenMarker[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getTokenMarker[], org.gjt.sp.jedit.textarea.TokenMarker, null, document>
<SAD, setTokenMarker[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setTokenMarker[org.gjt.sp.jedit.textarea.TokenMarker], void, null, document>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getDocumentLength[], int, null, document>
<SAD, getElementCount[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineCount[], int, getElementCount[], document>
<SAD, getElementIndex[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, getElementIndex[], document>
<SAD, getElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, getElement[], document>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, null, lineElement>
<SAD, getElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, getElement[], document>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, null, lineElement>
<SAD, getElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, null, getDefaultRootElement()>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, getElement[], document>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, null, lineElement>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, null, lineElement>
<SAD, getText[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getText[], java.lang.String, null, document>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getText[], java.lang.String, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, getText[], java.lang.String, null, bl>
<SAD, beginCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, document>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, document>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, document>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, bl>
<SAD, endCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setText[java.lang.String], void, null, document>
<SAD, getText[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, null, bl>
<SAD, getText[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int, javax.swing.text.Segment], void, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int, javax.swing.text.Segment], void, null, bl>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int, javax.swing.text.Segment], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int, javax.swing.text.Segment], void, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int, javax.swing.text.Segment], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int, javax.swing.text.Segment], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, document>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, getElement(selectionStartLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, lineElement>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[int], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionStart[int], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, document>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, getElement(selectionEndLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, lineElement>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[int], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionEnd[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, setCaretPosition[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, selectAll[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getDocumentLength[], int, org.gjt.sp.jedit.textarea.JEditTextArea, selectAll[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea, selectNone[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea, selectNone[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea, selectNone[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getDocumentLength[], int, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<SAD, invalidateLineRange[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, painter>
<SAD, invalidateLineRange[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, painter>
<SAD, addUndoableEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, document>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, gutter>
<org.gjt.sp.jedit.textarea.JEditTextArea, fireCaretEvent[], void, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<javax.swing.Timer, restart[], void, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, caretTimer>
<org.gjt.sp.jedit.textarea.JEditTextArea, scrollToCaret[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, null, nothing here>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, document>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, getElement(selectionStartLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, getStartOffset[], map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, getElement(selectionEndLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, lineElement>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, Math>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int, javax.swing.text.Segment], void, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char[], int, int], java.lang.StringBuffer, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, buf>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, buf>
<java.lang.StringBuffer, toString[], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, buf>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, getElement(selectionStartLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, getStartOffset[], map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, getElement(selectionEndLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, getStartOffset[], map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, lineElement>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, Math>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, Math>
<java.lang.String, indexOf[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<java.lang.String, substring[int, int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, Math>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, getElement(selectionEndLine)>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, getEndOffset[], map>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<java.lang.String, substring[int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, selectedText>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, bl>
<SAD, endCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, setCaretPosition[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, nothing here>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, str>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, nothing here>
<SAD, beginCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, document>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, document>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, str>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, document>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, bl>
<SAD, endCompoundEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, overwriteSetSelectedText[java.lang.String], void, null, document>
<SAD, invalidateSelectedLines[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setOverwriteEnabled[boolean], void, null, painter>
<SAD, invalidateSelectedLines[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionRectangular[boolean], void, null, painter>
<javax.swing.event.EventListenerList, add[java.lang.Class<javax.swing.event.CaretListener>, javax.swing.event.CaretListener], void, org.gjt.sp.jedit.textarea.JEditTextArea, addCaretListener[javax.swing.event.CaretListener], void, null, listenerList>
<javax.swing.event.EventListenerList, remove[java.lang.Class<javax.swing.event.CaretListener>, javax.swing.event.CaretListener], void, org.gjt.sp.jedit.textarea.JEditTextArea, removeCaretListener[javax.swing.event.CaretListener], void, null, listenerList>
<org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, nothing here>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, document>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, nothing here>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, document>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea, cut[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionStart[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionEnd[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, nothing here>
<java.awt.Toolkit, getSystemClipboard[], java.awt.datatransfer.Clipboard, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, getSystemClipboard[], nothing here>
<java.lang.String, replace[char, char], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, stringFlavor))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, getContents(this)>
<java.awt.datatransfer.Clipboard, getContents[java.lang.Object], java.awt.datatransfer.Transferable, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, getTransferData[java.awt.datatransfer.DataFlavor], clipboard>
<java.awt.datatransfer.Clipboard, setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, clipboard>
<java.awt.datatransfer.Clipboard, setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner], void, org.gjt.sp.jedit.textarea.JEditTextArea, appendCopy[], void, null, clipboard>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getText[int, int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionStart[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionEnd[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, nothing here>
<java.awt.Toolkit, getSystemClipboard[], java.awt.datatransfer.Clipboard, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, getSystemClipboard[], nothing here>
<java.awt.datatransfer.Clipboard, setContents[java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner], void, org.gjt.sp.jedit.textarea.JEditTextArea, copy[], void, null, clipboard>
<java.awt.Toolkit, getSystemClipboard[], java.awt.datatransfer.Clipboard, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, getSystemClipboard[], nothing here>
<java.lang.String, replace[char, char], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, null, stringFlavor))>
<java.awt.datatransfer.Transferable, getTransferData[java.awt.datatransfer.DataFlavor], java.lang.Object, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, null, getContents(this)>
<java.awt.datatransfer.Clipboard, getContents[java.lang.Object], java.awt.datatransfer.Transferable, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, getTransferData[java.awt.datatransfer.DataFlavor], clipboard>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, null, nothing here>
<java.awt.Toolkit, beep[], void, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, null, getToolkit()>
<java.awt.Component, getToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.JEditTextArea, paste[], void, beep[], nothing here>
<java.awt.Container, getLayout[], java.awt.LayoutManager, org.gjt.sp.jedit.textarea.JEditTextArea, getStatus[], java.awt.Component, null, nothing here>
<SAD, addDocumentListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, addNotify[], void, null, document>
<SAD, removeDocumentListener[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, removeNotify[], void, null, document>
<SAD, processKeyEvent[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, KeyEventWorkaround>
<SAD, getInputHandler[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, view>
<SAD, getKeyEventInterceptor[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, view>
<java.awt.AWTEvent, getID[], int, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyListener, keyTyped[java.awt.event.KeyEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, keyTyped[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.KeyListener, keyPressed[java.awt.event.KeyEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, keyPressed[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.KeyListener, keyReleased[java.awt.event.KeyEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, keyEventInterceptor>
<SAD, keyReleased[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, inputHandler>
<java.awt.event.InputEvent, isConsumed[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea, processKeyEvent[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.event.EventListenerList, getListenerList[], java.lang.Object[], org.gjt.sp.jedit.textarea.JEditTextArea, fireCaretEvent[], void, null, listenerList>
<javax.swing.event.CaretListener, caretUpdate[javax.swing.event.CaretEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea, fireCaretEvent[], void, null, ((CaretListener)listeners[i + 1])>
<SAD, isBracketHighlightEnabled[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, painter>
<SAD, invalidateLine[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, painter>
<SAD, findMatchingBracket[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, TextUtilities>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, nothing here>
<SAD, invalidateLine[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, painter>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, null, bl>
<javax.swing.event.DocumentEvent, getChange[javax.swing.text.Element], javax.swing.event.DocumentEvent.ElementChange, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, evt>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, document>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenAdded[], javax.swing.text.Element[], org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenRemoved[], javax.swing.text.Element[], org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, ch>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, evt>
<SAD, invalidateLine[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, invalidateLineRange[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, painter>
<SAD, repaint[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, gutter>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateScrollBars[], void, org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, addLayoutComponent[java.lang.String, java.awt.Component], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, addLayoutComponent[java.lang.String, java.awt.Component], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, addLayoutComponent[java.lang.String, java.awt.Component], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, addLayoutComponent[java.lang.String, java.awt.Component], void, null, name>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, addLayoutComponent[java.lang.String, java.awt.Component], void, null, name>
<javax.swing.JComponent, getInsets[], java.awt.Insets, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, preferredLayoutSize[java.awt.Container], java.awt.Dimension, null, nothing here>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, preferredLayoutSize[java.awt.Container], java.awt.Dimension, null, left>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, preferredLayoutSize[java.awt.Container], java.awt.Dimension, null, center>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, preferredLayoutSize[java.awt.Container], java.awt.Dimension, null, right>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, preferredLayoutSize[java.awt.Container], java.awt.Dimension, null, bottom>
<javax.swing.JComponent, getInsets[], java.awt.Insets, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, minimumLayoutSize[java.awt.Container], java.awt.Dimension, null, nothing here>
<java.awt.Component, getMinimumSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, minimumLayoutSize[java.awt.Container], java.awt.Dimension, null, left>
<java.awt.Component, getMinimumSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, minimumLayoutSize[java.awt.Container], java.awt.Dimension, null, center>
<java.awt.Component, getMinimumSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, minimumLayoutSize[java.awt.Container], java.awt.Dimension, null, right>
<java.awt.Component, getMinimumSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, minimumLayoutSize[java.awt.Container], java.awt.Dimension, null, bottom>
<java.awt.Component, getSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, parent>
<java.awt.Container, getInsets[], java.awt.Insets, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, parent>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, right>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, left>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, bottom>
<java.awt.Component, setBounds[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, left>
<java.awt.Component, setBounds[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, center>
<java.awt.Component, setBounds[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, right>
<java.awt.Component, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, leftOfScrollBar>
<java.awt.Component, setBounds[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, leftOfScrollBar>
<java.awt.Component, setBounds[int, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.ScrollLayout, layoutContainer[java.awt.Container], void, null, bottom>
<java.awt.Component, hasFocus[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.CaretBlinker, actionPerformed[java.awt.event.ActionEvent], void, null, focusedComponent>
<org.gjt.sp.jedit.textarea.JEditTextArea, blinkCaret[], void, org.gjt.sp.jedit.textarea.JEditTextArea.CaretBlinker, actionPerformed[java.awt.event.ActionEvent], void, null, focusedComponent>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MutableCaretEvent, getDot[], int, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MutableCaretEvent, getMark[], int, null, nothing here>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.gjt.sp.jedit.textarea.JEditTextArea.AdjustHandler, adjustmentValueChanged[java.awt.event.AdjustmentEvent], void, null, SwingUtilities>
<java.awt.event.AdjustmentEvent, getAdjustable[], java.awt.Adjustable, java.lang.Object, run[], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, setFirstLine[int], void, java.lang.Object, run[], void, null, nothing here>
<javax.swing.JScrollBar, getValue[], int, java.lang.Object, run[], void, null, vertical>
<org.gjt.sp.jedit.textarea.JEditTextArea, setHorizontalOffset[int], void, java.lang.Object, run[], void, null, nothing here>
<javax.swing.JScrollBar, getValue[], int, java.lang.Object, run[], void, null, horizontal>
<org.gjt.sp.jedit.textarea.JEditTextArea, recalculateVisibleLines[], void, org.gjt.sp.jedit.textarea.JEditTextArea.ComponentHandler, componentResized[java.awt.event.ComponentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<javax.swing.event.DocumentEvent, getLength[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, insertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, documentChanged[javax.swing.event.DocumentEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.event.DocumentEvent, getOffset[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<javax.swing.event.DocumentEvent, getLength[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, updateBracketHighlight[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getCaretPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DocumentHandler, removeUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<javax.swing.JPopupMenu, isVisible[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, popup>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, evt>
<SAD, setCursor[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, painter>
<SAD, setCursor[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, painter>
<org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, xyToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, evt>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectionRectangular[boolean], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea$DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea$DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea$DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, xyToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, null, evt>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doSingleDrag[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, document>
<SAD, findWordStart[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, TextUtilities>
<SAD, findWordEnd[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, TextUtilities>
<SAD, findWordEnd[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, TextUtilities>
<SAD, findWordStart[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, TextUtilities>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doDoubleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkLine[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.DragHandler, doTripleDrag[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setCaretVisible[boolean], void, org.gjt.sp.jedit.textarea.JEditTextArea.FocusHandler, focusGained[java.awt.event.FocusEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setCaretVisible[boolean], void, org.gjt.sp.jedit.textarea.JEditTextArea.FocusHandler, focusLost[java.awt.event.FocusEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setOneClick[org.jext.OneClickAction, java.awt.event.ActionEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea, setOneClick[org.jext.OneClickAction], void, null, nothing here>
<SAD, setStatus[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setOneClick[org.jext.OneClickAction, java.awt.event.ActionEvent], void, null, getJextParent()>
<SAD, getJextParent[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea, setOneClick[org.jext.OneClickAction, java.awt.event.ActionEvent], void, setStatus[], area>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineOfOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, scrollTo[int, int], boolean, org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea$MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectedText[], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, text>
<org.gjt.sp.jedit.textarea.JEditTextArea, setSelectedText[java.lang.String], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, insertString[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, text>
<org.gjt.sp.jedit.textarea.JEditTextArea, setShadowCaretPosition[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, nothing here>
<SAD, setCursor[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, painter>
<java.awt.Cursor, getPredefinedCursor[int], java.awt.Cursor, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mouseReleased[java.awt.event.MouseEvent], void, null, Cursor>
<javax.swing.JComponent, requestFocus[], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setCaretVisible[boolean], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.InputEvent, getModifiers[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea$MouseHandler, doRightClick[java.awt.event.MouseEvent], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, yToLine[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, xToOffset[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getClickCount[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionStart[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getSelectionEnd[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea$MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea$MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, bl>
<org.gjt.sp.jedit.textarea.JEditTextArea$MouseHandler, doTripleClick[java.awt.event.MouseEvent, int, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, mousePressed[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.InputEvent, isShiftDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, evt>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, setCaretPosition[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<SAD, oneClickActionPerformed[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, oneClick>
<SAD, endCurrentEdit[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doSingleClick[java.awt.event.MouseEvent, int, int, int], void, null, this)>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<SAD, findMatchingBracket[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, TextUtilities>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, Math>
<org.gjt.sp.jedit.textarea.JEditTextArea, getMarkPosition[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, bl>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineText[int], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, document>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineLength[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<SAD, findWordStart[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, TextUtilities>
<SAD, findWordEnd[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, TextUtilities>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doDoubleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doTripleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineStartOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doTripleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<org.gjt.sp.jedit.textarea.JEditTextArea, getLineEndOffset[int], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doTripleClick[java.awt.event.MouseEvent, int, int, int], void, null, nothing here>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, evt>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, evt>
<SAD, getJextParent[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, this)>
<SAD, getSize[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, view>
<SAD, getLocationOnScreen[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, view>
<SAD, getInsets[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, view>
<SAD, getLocationOnScreen[], SADNESS, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, painter>
<java.awt.Component, getSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, popup>
<javax.swing.JPopupMenu, show[java.awt.Component, int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.MouseHandler, doRightClick[java.awt.event.MouseEvent], void, null, popup>
<org.gjt.sp.jedit.textarea.JEditTextArea, select[int, int], void, org.gjt.sp.jedit.textarea.JEditTextArea.CaretUndo, undo[], void, null, nothing here>
<javax.swing.undo.AbstractUndoableEdit, die[], void, org.gjt.sp.jedit.textarea.JEditTextArea.CaretUndo, addEdit[javax.swing.undo.UndoableEdit], boolean, null, cedit>
<org.gjt.sp.jedit.textarea.JEditTextArea$CaretUndo, getPresentationName[], java.lang.String, org.gjt.sp.jedit.textarea.JEditTextArea.CaretUndo, toString[], java.lang.String, null, nothing here>
<javax.swing.Timer, setInitialDelay[int], void, org.gjt.sp.jedit.textarea.JEditTextArea.CaretUndo, toString[], java.lang.String, null, caretTimer>
<javax.swing.Timer, start[], void, org.gjt.sp.jedit.textarea.JEditTextArea.CaretUndo, toString[], java.lang.String, null, caretTimer>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, addDefaultKeyBindings[], void, null, nothing here>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, st>
<org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, nothing here>
<java.util.StringTokenizer, nextToken[], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, st>
<java.util.StringTokenizer, hasMoreTokens[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, st>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, clear[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, removeAllKeyBindings[], void, null, bindings>
<java.awt.event.KeyEvent, getKeyCode[], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, getModifiers[], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isShiftDown[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, handleGrabAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.KeyStroke, getKeyStroke[int, int], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, KeyStroke>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, currentBindings>
<java.awt.Toolkit, beep[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, beep[], Toolkit>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, endCurrentEdit[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, ((JextTextArea)getTextArea(evt))>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, endCurrentEdit[], nothing here>
<SAD, executeAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isShiftDown[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, isActionKey[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, handleGrabAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<javax.swing.KeyStroke, getKeyStroke[int, int], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, KeyStroke>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, currentBindings>
<java.awt.Toolkit, beep[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, beep[], Toolkit>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<SAD, endCurrentEdit[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, ((JextTextArea)getTextArea(evt))>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, endCurrentEdit[], nothing here>
<SAD, executeAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, getKeyChar[], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.InputEvent, isAltDown[], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<javax.swing.KeyStroke, getKeyStroke[char], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, KeyStroke>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, Character>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, currentBindings>
<SAD, endCurrentEdit[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, ((JextTextArea)getTextArea(evt))>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, endCurrentEdit[], nothing here>
<SAD, executeOneClickAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.lang.String, valueOf[char], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<SAD, endCurrentEdit[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, ((JextTextArea)getTextArea(evt))>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, endCurrentEdit[], nothing here>
<SAD, executeAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.lang.String, valueOf[char], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<SAD, handleGrabAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<java.lang.Character, isDigit[char], boolean, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, Character>
<SAD, setRepeatCount[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<java.awt.event.InputEvent, consume[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, executeAction[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<java.lang.String, valueOf[char], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, String>
<java.awt.event.KeyEvent, getKeyChar[], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, evt>
<SAD, userInput[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, ((JextTextArea)getTextArea(evt))>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, userInput[], nothing here>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, keyStroke>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, keyStroke>
<java.awt.Toolkit, getMenuShortcutKeyMask[], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, getMenuShortcutKeyMask[], Toolkit>
<java.lang.String, substring[int], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, keyStroke>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, key>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, key>
<javax.swing.KeyStroke, getKeyStroke[char], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, KeyStroke>
<javax.swing.KeyStroke, getKeyStroke[int, int], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, KeyStroke>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, key>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, err>
<java.lang.reflect.Field, getInt[java.lang.Object], int, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, concat(key))>
<java.lang.Class, getField[java.lang.String], java.lang.reflect.Field, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, class>
<java.lang.String, concat[java.lang.String], java.lang.String, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, "VK_">
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, err>
<javax.swing.KeyStroke, getKeyStroke[int, int], javax.swing.KeyStroke, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, KeyStroke>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.InputHandler, getAction[java.lang.String], java.awt.event.ActionListener, null, actions>
<java.util.Hashtable, keys[], java.util.Enumeration, org.gjt.sp.jedit.textarea.InputHandler, getActions[], java.util.Enumeration, null, actions>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.InputHandler, getRepeatCount[], int, null, Math>
<SAD, oneClickActionPerformed[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler, executeOneClickAction[org.jext.OneClickAction, java.lang.Object, java.lang.String], void, null, listener>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, getTextArea(evt)>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, isEditable[], nothing here>
<SAD, setOneClick[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, getTextArea(evt)>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, setOneClick[], nothing here>
<java.awt.event.ActionListener, actionPerformed[java.awt.event.ActionEvent], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, listener>
<org.gjt.sp.jedit.textarea.InputHandler, getRepeatCount[], int, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, nothing here>
<java.awt.event.ActionListener, actionPerformed[java.awt.event.ActionEvent], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, listener>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, Math>
<java.awt.event.ActionListener, actionPerformed[java.awt.event.ActionEvent], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, listener>
<org.gjt.sp.jedit.textarea.InputHandler$MacroRecorder, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, recorder>
<java.lang.String, valueOf[int], java.lang.String, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, String>
<org.gjt.sp.jedit.textarea.InputHandler$MacroRecorder, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, recorder>
<org.gjt.sp.jedit.textarea.InputHandler, setRepeatEnabled[boolean], void, org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, evt>
<javax.swing.JPopupMenu, getInvoker[], java.awt.Component, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, ((JPopupMenu)c)>
<SAD, getTextArea[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, ((JextFrame)c)>
<java.awt.Component, getParent[], java.awt.Container, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, c>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, err>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, null, err>
<java.awt.event.KeyEvent, getKeyChar[], char, org.gjt.sp.jedit.textarea.InputHandler, handleGrabAction[java.awt.event.KeyEvent], void, null, evt>
<java.awt.event.KeyEvent, getKeyCode[], int, org.gjt.sp.jedit.textarea.InputHandler, handleGrabAction[java.awt.event.KeyEvent], void, null, evt>
<java.lang.String, valueOf[char], java.lang.String, org.gjt.sp.jedit.textarea.InputHandler, handleGrabAction[java.awt.event.KeyEvent], void, null, String>
<org.gjt.sp.jedit.textarea.InputHandler, executeAction[java.awt.event.ActionListener, java.lang.Object, java.lang.String], void, org.gjt.sp.jedit.textarea.InputHandler, handleGrabAction[java.awt.event.KeyEvent], void, null, nothing here>
<java.util.EventObject, getSource[], java.lang.Object, org.gjt.sp.jedit.textarea.InputHandler, handleGrabAction[java.awt.event.KeyEvent], void, null, evt>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.InputHandler.backspace, actionPerformed[java.awt.event.ActionEvent], void, null, bl>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, ((JextTextArea)textArea)>
<SAD, findWordStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.InputHandler.backspace_word, actionPerformed[java.awt.event.ActionEvent], void, null, bl>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.InputHandler.delete, actionPerformed[java.awt.event.ActionEvent], void, null, bl>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, ((JextTextArea)textArea)>
<SAD, findWordEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<SAD, remove[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, getDocument()>
<SAD, getDocument[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, remove[], textArea>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.textarea.InputHandler.delete_word, actionPerformed[java.awt.event.ActionEvent], void, null, bl>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineEndOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getElectricScroll[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineEndOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<java.lang.Boolean, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, TRUE>
<SAD, getClientProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_end, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getElectricScroll[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<java.lang.Boolean, equals[java.lang.Object], boolean, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, TRUE>
<SAD, getClientProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLeadingWhiteSpace[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLeadingWhiteSpace[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, Utilities>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.document_home, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.document_home, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.insert_break, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_break, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_break, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_break, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, setSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_break, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.insert_tab, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_tab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_tab, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_tab, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, overwriteSetSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_tab, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getMagicCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, xToOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setMagicCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, getBooleanProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, getDocumentLength[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, ((JextTextArea)textArea)>
<SAD, findWordEnd[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.next_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.overwrite, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, setOverwriteEnabled[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.overwrite, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, isOverwriteEnabled[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.overwrite, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getMagicCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, offsetToX[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, xToOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setMagicCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_line, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getVisibleLines[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, Math>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_page, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, getCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineStartOffset[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getLineText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getBooleanProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, Jext>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, lineText>
<SAD, getProperty[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, ((JextTextArea)textArea)>
<SAD, findWordStart[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, TextUtilities>
<SAD, select[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, getMarkPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<SAD, setCaretPosition[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.prev_word, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<SAD, setRepeatEnabled[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, setRepeatEnabled[], textArea>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, setRepeatCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, setRepeatCount[], textArea>
<java.lang.Integer, parseInt[java.lang.String], int, org.gjt.sp.jedit.textarea.InputHandler.repeat, actionPerformed[java.awt.event.ActionEvent], void, null, Integer>
<org.gjt.sp.jedit.textarea.InputHandler, getTextArea[java.util.EventObject], org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, nothing here>
<java.awt.event.ActionEvent, getActionCommand[], java.lang.String, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, evt>
<SAD, getRepeatCount[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, getInputHandler()>
<SAD, getInputHandler[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, getRepeatCount[], textArea>
<SAD, isEditable[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, overwriteSetSelectedText[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, textArea>
<java.lang.StringBuffer, toString[], java.lang.String, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, buf>
<SAD, beep[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, null, getToolkit()>
<SAD, getToolkit[], SADNESS, org.gjt.sp.jedit.textarea.InputHandler.insert_char, actionPerformed[java.awt.event.ActionEvent], void, beep[], textArea>
<SAD, getDefaultSyntaxStyles[], SADNESS, org.gjt.sp.jedit.textarea.TextAreaDefaults, getDefaults[], org.gjt.sp.jedit.textarea.TextAreaDefaults, null, SyntaxUtilities>
<java.util.ArrayList, add[int, java.lang.Object], void, org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, null, tokenList>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, null, Math>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, null, tokenList>
<SAD, getLength[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<SAD, getDefaultRootElement[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<SAD, getParagraphElement[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, lineElement>
<javax.swing.text.Element, getElementIndex[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, map>
<SAD, getText[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, BRACKETS>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, BRACKETS>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, BRACKETS>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, BRACKETS>
<SAD, getTokenMarker[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, nothing here>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenMarker>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.ArrayList, get[int], java.lang.Object, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<javax.swing.text.Element, getElementCount[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, map>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, lineElement>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, lineElement>
<SAD, getText[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, doc>
<org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, nothing here>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenMarker>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.ArrayList, get[int], java.lang.Object, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, Character>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, noWordSep>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, Character>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordStart[java.lang.String, int, java.lang.String], int, null, noWordSep>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, Character>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, noWordSep>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.String, length[], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, line>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, Character>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.textarea.TextUtilities, findWordEnd[java.lang.String, int, java.lang.String], int, null, noWordSep>
<java.lang.Character, getType[char], int, org.gjt.sp.jedit.textarea.TextUtilities, findTypeChange[java.lang.String, int, int], int, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findTypeChange[java.lang.String, int, int], int, null, line>
<java.lang.Character, getType[char], int, org.gjt.sp.jedit.textarea.TextUtilities, findTypeChange[java.lang.String, int, int], int, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.textarea.TextUtilities, findTypeChange[java.lang.String, int, int], int, null, line>
<javax.swing.JComponent, setBackground[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<javax.swing.JComponent, setForeground[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setHighlightedForeground[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setCaretMark[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setAnchorMark[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setSelectionMark[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setFont[java.awt.Font], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setBorder[int, java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setLineNumberAlignment[int], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setGutterWidth[int], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Component, addMouseListener[java.awt.event.MouseListener], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Component, addMouseMotionListener[java.awt.event.MouseMotionListener], void, org.gjt.sp.jedit.textarea.Gutter, Gutter[org.gjt.sp.jedit.textarea.JEditTextArea, org.gjt.sp.jedit.textarea.TextAreaDefaults], void, null, nothing here>
<java.awt.Graphics2D, setRenderingHints[java.util.Map<?,?>], void, org.gjt.sp.jedit.textarea.Gutter, setAntiAliasing[java.awt.Graphics], void, null, ((Graphics2D)g)>
<java.awt.Graphics2D, setRenderingHints[java.util.Map<?,?>], void, org.gjt.sp.jedit.textarea.Gutter, setAntiAliasing[java.awt.Graphics], void, null, ((Graphics2D)g)>
<org.gjt.sp.jedit.textarea.Gutter, setAntiAliasing[java.awt.Graphics], void, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, getClipBounds[], java.awt.Rectangle, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getBackground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, gfx>
<org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, org.gjt.sp.jedit.textarea.Gutter, paintComponent[java.awt.Graphics], void, null, nothing here>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, getPainter()>
<SAD, getPainter[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, getFontMetrics[], textArea>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, pfm>
<java.lang.Math, round[double], long, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, Math>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, pfm>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<javax.swing.JComponent, getHeight[], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, Math>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, Math>
<SAD, getLineCount[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<java.awt.Graphics, setFont[java.awt.Font], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getFont[], java.awt.Font, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<java.lang.Integer, toString[int], java.lang.String, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, Integer>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, fm>
<java.awt.FontMetrics, stringWidth[java.lang.String], int, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, fm>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<org.gjt.sp.jedit.textarea.Gutter, getHighlightedForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, drawString[java.lang.String, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<SAD, getCaretLine[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, drawRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<SAD, getAnchorOffset[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, ((JextTextArea)textArea)>
<SAD, getLineOfOffset[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, drawRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<SAD, getSelectionStart[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<SAD, getSelectionEnd[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<SAD, getSelectionStartLine[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<SAD, getSelectionEndLine[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, textArea>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, fillRect[int, int, int, int], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, gfx>
<java.awt.Component, getForeground[], java.awt.Color, org.gjt.sp.jedit.textarea.Gutter, paintLineNumbers[java.awt.Graphics], void, null, nothing here>
<SAD, getHeight[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, null, getFontMetrics()>
<SAD, getFontMetrics[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, getHeight[], getPainter()>
<SAD, getPainter[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, getFontMetrics[], textArea>
<SAD, getFirstLine[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, null, textArea>
<javax.swing.JComponent, getHeight[], int, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, null, nothing here>
<SAD, paintHighlight[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, paintCustomHighlights[java.awt.Graphics], void, null, highlights>
<SAD, init[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, addCustomHighlight[org.gjt.sp.jedit.textarea.TextAreaHighlight], void, null, highlight>
<org.gjt.sp.jedit.textarea.Gutter, setBorder[javax.swing.border.Border], void, org.gjt.sp.jedit.textarea.Gutter, setBorder[int, java.awt.Color], void, null, nothing here>
<javax.swing.BorderFactory, createMatteBorder[int, int, int, int, java.awt.Color], javax.swing.border.MatteBorder, org.gjt.sp.jedit.textarea.Gutter, setBorder[int, java.awt.Color], void, null, BorderFactory>
<javax.swing.border.Border, getBorderInsets[java.awt.Component], java.awt.Insets, org.gjt.sp.jedit.textarea.Gutter, setBorder[javax.swing.border.Border], void, null, border>
<javax.swing.JComponent, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.gjt.sp.jedit.textarea.Gutter, setFont[java.awt.Font], void, null, nothing here>
<java.awt.FontMetrics, getHeight[], int, org.gjt.sp.jedit.textarea.Gutter, setFont[java.awt.Font], void, null, fm>
<java.awt.FontMetrics, getMaxDescent[], int, org.gjt.sp.jedit.textarea.Gutter, setFont[java.awt.Font], void, null, fm>
<SAD, revalidate[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, setGutterWidth[int], void, null, textArea>
<org.gjt.sp.jedit.textarea.Gutter, getPreferredSize[], java.awt.Dimension, org.gjt.sp.jedit.textarea.Gutter, getMinimumSize[], java.awt.Dimension, null, nothing here>
<SAD, getToolTipText[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, getToolTipText[java.awt.event.MouseEvent], java.lang.String, null, highlights>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.Gutter, setLineNumberingEnabled[boolean], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.Gutter, setLineNumberAlignment[int], void, null, nothing here>
<SAD, revalidate[], SADNESS, org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, null, textArea>
<org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, org.gjt.sp.jedit.textarea.Gutter, toggleCollapsed[], void, null, nothing here>
<java.awt.Component, repaint[], void, org.gjt.sp.jedit.textarea.Gutter, setHighlightInterval[int], void, null, nothing here>
<java.awt.event.MouseEvent, getClickCount[], int, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<javax.swing.JPopupMenu, isVisible[], boolean, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, context>
<java.awt.event.InputEvent, getModifiers[], int, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<SAD, requestFocus[], SADNESS, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, textArea>
<javax.swing.JPopupMenu, show[java.awt.Component, int, int], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, context>
<java.awt.event.MouseEvent, getX[], int, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<java.awt.event.MouseEvent, getY[], int, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, e>
<org.gjt.sp.jedit.textarea.Gutter, toggleCollapsed[], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseClicked[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getPoint[], java.awt.Point, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mousePressed[java.awt.event.MouseEvent], void, null, e>
<org.gjt.sp.jedit.textarea.Gutter, isCollapsed[], boolean, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<java.awt.event.MouseEvent, getPoint[], java.awt.Point, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseDragged[java.awt.event.MouseEvent], void, null, e>
<org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseDragged[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseDragged[java.awt.event.MouseEvent], void, null, SwingUtilities>
<SAD, revalidate[], SADNESS, java.lang.Object, run[], void, null, textArea>
<java.awt.event.MouseEvent, getPoint[], java.awt.Point, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseExited[java.awt.event.MouseEvent], void, null, e>
<org.gjt.sp.jedit.textarea.Gutter, setCollapsed[boolean], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseExited[java.awt.event.MouseEvent], void, null, nothing here>
<javax.swing.SwingUtilities, invokeLater[java.lang.Runnable], void, org.gjt.sp.jedit.textarea.Gutter.GutterMouseListener, mouseExited[java.awt.event.MouseEvent], void, null, SwingUtilities>
<SAD, revalidate[], SADNESS, java.lang.Object, run[], void, null, textArea>
<java.awt.event.KeyEvent, getKeyCode[], int, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.event.KeyEvent, getKeyChar[], char, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.AWTEvent, getID[], int, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<SAD, isMacOS[], SADNESS, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, OperatingSystem>
<org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, nothing here>
<SAD, isMacOS[], SADNESS, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, OperatingSystem>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.event.InputEvent, isMetaDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.event.InputEvent, isAltDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.awt.event.InputEvent, isMetaDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, evt>
<java.lang.System, currentTimeMillis[], long, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, System>
<java.lang.Character, isLetter[char], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, Character>
<java.lang.System, currentTimeMillis[], long, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, System>
<SAD, isWindows[], SADNESS, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, OperatingSystem>
<SAD, hasJava14[], SADNESS, org.gjt.sp.jedit.gui.KeyEventWorkaround, processKeyEvent[java.awt.event.KeyEvent], java.awt.event.KeyEvent, null, OperatingSystem>
<java.awt.event.InputEvent, isAltDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isMetaDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isAltDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isControlDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isMetaDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.awt.event.InputEvent, isAltDown[], boolean, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, evt>
<java.lang.System, currentTimeMillis[], long, org.gjt.sp.jedit.gui.KeyEventWorkaround, handleBrokenKeys[java.awt.event.KeyEvent, int], void, null, System>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.RubyTokenMarker, RubyTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, rubyKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.RubyTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, getKeywords[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, HTMLTokenMarker[boolean], void, null, JavaScriptTokenMarker>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.HTMLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, ASPVBScriptTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, ASPVBScriptTokenMarker[boolean], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, this>
<SAD, hasMoreChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], byte, null, tokenContext>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPVBScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vbScriptKeywords>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.BatchFileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.PascalTokenMarker, PascalTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pascalKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PascalTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, ASPPerlscriptTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, ASPPerlscriptTokenMarker[boolean], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, this>
<java.lang.String, length[], int, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, str>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, debug>
<SAD, hasMoreChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, isOK[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, debug>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, atFirst[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, lastChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, createReadinString[char[], int, int], java.lang.String, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, nothing here>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, atFirst[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, atFirst[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToEnd[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToEnd[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeywordToPos[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, char], boolean, null, nothing here>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, tokenContext>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, keywords>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, tokenContext>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, Character>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, doKeyword[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext, int, char], boolean, null, tokenContext>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, createReadinString[char[], int, int], java.lang.String, null, Character>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, createReadinString[char[], int, int], java.lang.String, null, Character>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPPerlscriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, perlKeywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PlainTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, org.gjt.sp.jedit.syntax.TokenMarker, markTokens[javax.swing.text.Segment, int], org.gjt.sp.jedit.syntax.Token, null, nothing here>
<org.gjt.sp.jedit.syntax.TokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarker, markTokens[javax.swing.text.Segment, int], org.gjt.sp.jedit.syntax.Token, null, nothing here>
<org.gjt.sp.jedit.syntax.TokenMarker, ensureCapacity[int], void, org.gjt.sp.jedit.syntax.TokenMarker, insertLines[int, int], void, null, nothing here>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, org.gjt.sp.jedit.syntax.TokenMarker, insertLines[int, int], void, null, System>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, org.gjt.sp.jedit.syntax.TokenMarker, deleteLines[int, int], void, null, System>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, org.gjt.sp.jedit.syntax.TokenMarker, ensureCapacity[int], void, null, System>
<java.lang.Math, max[int, int], int, org.gjt.sp.jedit.syntax.TokenMarker, getMaxLineWidth[int, int], int, null, Math>
<org.gjt.sp.jedit.syntax.TokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.TokenMarker, addToken[int, byte], void, null, nothing here>
<org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, BeanShellTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.BeanShellTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, bshKeywords>
<SAD, insertLines[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxDocument, setTokenMarker[org.gjt.sp.jedit.syntax.TokenMarker], void, null, tokenMarker>
<javax.swing.text.Element, getElementCount[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, setTokenMarker[org.gjt.sp.jedit.syntax.TokenMarker], void, null, getDefaultRootElement()>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, setTokenMarker[org.gjt.sp.jedit.syntax.TokenMarker], void, getElementCount[], nothing here>
<org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[], void, org.gjt.sp.jedit.syntax.SyntaxDocument, setTokenMarker[org.gjt.sp.jedit.syntax.TokenMarker], void, null, nothing here>
<org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[], void, null, nothing here>
<javax.swing.text.Element, getElementCount[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[], void, null, getDefaultRootElement()>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[], void, getElementCount[], nothing here>
<SAD, supportsMultilineTokens[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, tokenMarker>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, nothing here>
<javax.swing.text.Element, getElement[int], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, map>
<javax.swing.text.Element, getStartOffset[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, lineElement>
<javax.swing.text.AbstractDocument, getText[int, int, javax.swing.text.Segment], void, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, nothing here>
<javax.swing.text.Element, getEndOffset[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, lineElement>
<SAD, markTokens[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, tokenMarker>
<java.lang.Throwable, printStackTrace[], void, org.gjt.sp.jedit.syntax.SyntaxDocument, tokenizeLines[int, int], void, null, bl>
<javax.swing.event.DocumentEvent, getChange[javax.swing.text.Element], javax.swing.event.DocumentEvent.ElementChange, org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, insertLines[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, tokenMarker>
<javax.swing.event.DocumentEvent$ElementChange, getIndex[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenAdded[], javax.swing.text.Element[], org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenRemoved[], javax.swing.text.Element[], org.gjt.sp.jedit.syntax.SyntaxDocument, fireInsertUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent, getChange[javax.swing.text.Element], javax.swing.event.DocumentEvent.ElementChange, org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, evt>
<javax.swing.text.PlainDocument, getDefaultRootElement[], javax.swing.text.Element, org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, nothing here>
<SAD, deleteLines[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, tokenMarker>
<javax.swing.event.DocumentEvent$ElementChange, getIndex[], int, org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenRemoved[], javax.swing.text.Element[], org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<javax.swing.event.DocumentEvent$ElementChange, getChildrenAdded[], javax.swing.text.Element[], org.gjt.sp.jedit.syntax.SyntaxDocument, fireRemoveUpdate[javax.swing.event.DocumentEvent], void, null, ch>
<org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, ASPJavascriptTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, ASPJavascriptTokenMarker[boolean], void, null, nothing here>
<org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, this>
<SAD, hasMoreChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, remainingChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, Character>
<SAD, doKeywordToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, doKeywordToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASPJavascriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.IDLTokenMarker, IDLTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.IDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, idlKeywords>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.CobolTokenMarker, CobolTokenMarker[], void, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cobolKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CobolTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TokenMarkerContext, addToken[int, byte], void, null, marker>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addToken[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[byte], void, null, this>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addToken[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[int, byte], void, null, this>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addToken[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToEnd[byte], void, null, this>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[int, org.gjt.sp.jedit.syntax.KeywordMap], byte, null, keywords>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[int, org.gjt.sp.jedit.syntax.KeywordMap], byte, null, this>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[int, org.gjt.sp.jedit.syntax.KeywordMap], byte, null, this>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[org.gjt.sp.jedit.syntax.KeywordMap], byte, null, keywords>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[org.gjt.sp.jedit.syntax.KeywordMap], byte, null, this>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, addTokenToPos[int, byte], void, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[org.gjt.sp.jedit.syntax.KeywordMap], byte, null, this>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToPos[int, org.gjt.sp.jedit.syntax.KeywordMap], byte, org.gjt.sp.jedit.syntax.TokenMarkerContext, doKeywordToEnd[org.gjt.sp.jedit.syntax.KeywordMap], byte, null, this>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.TokenMarkerContext, regionMatches[boolean, java.lang.String], boolean, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.TokenMarkerContext, RERegionMatches[javax.swing.text.Segment, int, org.gjt.sp.jedit.syntax.RE], org.gjt.sp.jedit.syntax.REMatch, org.gjt.sp.jedit.syntax.TokenMarkerContext, RERegionMatches[org.gjt.sp.jedit.syntax.RE], org.gjt.sp.jedit.syntax.REMatch, null, nothing here>
<java.lang.String, copyValueOf[char[], int, int], java.lang.String, org.gjt.sp.jedit.syntax.TokenMarkerContext, RERegionMatches[javax.swing.text.Segment, int, org.gjt.sp.jedit.syntax.RE], org.gjt.sp.jedit.syntax.REMatch, null, String>
<SAD, getMatch[], SADNESS, org.gjt.sp.jedit.syntax.TokenMarkerContext, RERegionMatches[javax.swing.text.Segment, int, org.gjt.sp.jedit.syntax.RE], org.gjt.sp.jedit.syntax.REMatch, null, match>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.gjt.sp.jedit.syntax.TokenMarkerContext, toString[], java.lang.String, null, spacer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.gjt.sp.jedit.syntax.TokenMarkerContext, toString[], java.lang.String, null, spacer>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, org.gjt.sp.jedit.syntax.TokenMarkerContext, toString[], java.lang.String, null, spacer>
<java.lang.StringBuffer, toString[], java.lang.String, org.gjt.sp.jedit.syntax.TokenMarkerContext, toString[], java.lang.String, null, spacer>
<org.gjt.sp.jedit.syntax.KeywordMap, getSegmentMapKey[javax.swing.text.Segment, int, int], int, org.gjt.sp.jedit.syntax.KeywordMap, lookup[javax.swing.text.Segment, int, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.KeywordMap, lookup[javax.swing.text.Segment, int, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, org.gjt.sp.jedit.syntax.KeywordMap, add[java.lang.String, byte], void, null, nothing here>
<java.lang.String, toCharArray[], char[], org.gjt.sp.jedit.syntax.KeywordMap, add[java.lang.String, byte], void, null, keyword>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, null, s>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, null, Character>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, null, s>
<java.lang.String, length[], int, org.gjt.sp.jedit.syntax.KeywordMap, getStringMapKey[java.lang.String], int, null, s>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.KeywordMap, getSegmentMapKey[javax.swing.text.Segment, int, int], int, null, Character>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.KeywordMap, getSegmentMapKey[javax.swing.text.Segment, int, int], int, null, Character>
<org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.ASMTokenMarker, ASMTokenMarker[], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, asmKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ASMTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.PikeTokenMarker, PikeTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PikeTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pikeKeywords>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.VHDLTokenMarker, VHDLTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vhdlKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<java.lang.Character, toLowerCase[char], char, org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, Character>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.VHDLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, Character>
<java.lang.Character, isLetter[char], boolean, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TeXTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.ASPStateInfo, equals[java.lang.Object], boolean, null, language>
<org.gjt.sp.jedit.syntax.ASPStateInfo, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.ASPStateInfo, toASPMode[], byte, null, this>
<java.lang.Byte, byteValue[], byte, org.gjt.sp.jedit.syntax.ASPStateInfo, toASPMode[], byte, null, ((Byte)modes[i][1])>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.syntax.ASPStateInfo, display[java.io.PrintStream], void, null, o>
<java.io.PrintStream, println[java.lang.String], void, org.gjt.sp.jedit.syntax.ASPStateInfo, display[java.io.PrintStream], void, null, o>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, this>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, debug>
<SAD, hasMoreChars[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, getChar[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, isOK[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, debug>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPStateInfo, toASPMode[], byte, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, stateInfo>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, res>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, RERegionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, toLowerCase[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, toString(1)>
<SAD, toString[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, toLowerCase[], matchInfo>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, peek[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<org.gjt.sp.jedit.syntax.ASPStateInfo, toASPMode[], byte, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, stateInfo>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, RERegionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, toLowerCase[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, toString(1)>
<SAD, toString[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, toLowerCase[], matchInfo>
<SAD, RERegionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, res>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, res>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, js>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, ps>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, vbs>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, res>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, js>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, vbs>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, markTokensImpl[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, ps>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, this>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, addTokenToEnd[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPStateInfo, init[boolean, java.lang.String], void, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, stateInfo>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<org.gjt.sp.jedit.syntax.ASPStateInfo, init[boolean, java.lang.String], void, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, stateInfo>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<SAD, reset[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, mmt>
<SAD, assign[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, mmt>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<SAD, addTokenToPos[], SADNESS, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, tokenContext>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetter[char], boolean, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<java.lang.Character, isUpperCase[char], boolean, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isDigit[char], boolean, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isWhitespace[char], boolean, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TextTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.FortranTokenMarker, FortranTokenMarker[], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Math>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Math>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, checkStartEditPage[javax.swing.text.Segment], boolean, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, doKeyword[javax.swing.text.Segment, int], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, doKeyword[javax.swing.text.Segment, int], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, org.gjt.sp.jedit.syntax.FortranTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Math, min[int, int], int, org.gjt.sp.jedit.syntax.FortranTokenMarker, checkStartEditPage[javax.swing.text.Segment], boolean, null, Math>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, checkStartEditPage[javax.swing.text.Segment], boolean, null, SyntaxUtilities>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, doKeyword[javax.swing.text.Segment, int], void, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, doKeyword[javax.swing.text.Segment, int], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, guardedAddToken[int, byte], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.FortranTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, fortranKeywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PropsTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PropsTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PropsTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PropsTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PropsTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.LATTokenMarker, LATTokenMarker[], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, latKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.LATTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<java.awt.Font, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.SyntaxStyle, getStyledFont[java.awt.Font], java.awt.Font, null, font>
<java.awt.Font, getFamily[], java.lang.String, org.gjt.sp.jedit.syntax.SyntaxStyle, getStyledFont[java.awt.Font], java.awt.Font, null, font>
<java.awt.Font, getSize[], int, org.gjt.sp.jedit.syntax.SyntaxStyle, getStyledFont[java.awt.Font], java.awt.Font, null, font>
<java.awt.Font, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.SyntaxStyle, getFontMetrics[java.awt.Font], java.awt.FontMetrics, null, font>
<java.awt.Font, getFamily[], java.lang.String, org.gjt.sp.jedit.syntax.SyntaxStyle, getFontMetrics[java.awt.Font], java.awt.FontMetrics, null, font>
<java.awt.Font, getSize[], int, org.gjt.sp.jedit.syntax.SyntaxStyle, getFontMetrics[java.awt.Font], java.awt.FontMetrics, null, font>
<java.awt.Toolkit, getFontMetrics[java.awt.Font], java.awt.FontMetrics, org.gjt.sp.jedit.syntax.SyntaxStyle, getFontMetrics[java.awt.Font], java.awt.FontMetrics, null, getDefaultToolkit()>
<java.awt.Toolkit, getDefaultToolkit[], java.awt.Toolkit, org.gjt.sp.jedit.syntax.SyntaxStyle, getFontMetrics[java.awt.Font], java.awt.FontMetrics, getFontMetrics[java.awt.Font], Toolkit>
<org.gjt.sp.jedit.syntax.SyntaxStyle, getStyledFont[java.awt.Font], java.awt.Font, org.gjt.sp.jedit.syntax.SyntaxStyle, setGraphicsFlags[java.awt.Graphics, java.awt.Font], void, null, nothing here>
<java.awt.Graphics, setFont[java.awt.Font], void, org.gjt.sp.jedit.syntax.SyntaxStyle, setGraphicsFlags[java.awt.Graphics, java.awt.Font], void, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.syntax.SyntaxStyle, setGraphicsFlags[java.awt.Graphics, java.awt.Font], void, null, gfx>
<java.lang.Class, getName[], java.lang.String, org.gjt.sp.jedit.syntax.SyntaxStyle, toString[], java.lang.String, null, getClass()>
<java.lang.Object, getClass[], java.lang.Class<? extends org.gjt.sp.jedit.syntax.SyntaxStyle>, org.gjt.sp.jedit.syntax.SyntaxStyle, toString[], java.lang.String, getName[], nothing here>
<org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.JavaTokenMarker, JavaTokenMarker[], void, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, doKeyword[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaKeywords>
<org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, SAP2000TokenMarker[], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sapKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SAP2000TokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.CSharpTokenMarker, CSharpTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CSharpTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<java.lang.String, length[], int, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, str>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetter[char], boolean, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.ShellScriptTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.PovrayTokenMarker, PovrayTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PovrayTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, povrayKeywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PatchTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PatchTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PatchTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PatchTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.VerilogTokenMarker, VerilogTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, vKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.VerilogTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<java.lang.String, length[], int, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, java.lang.String], boolean, null, match>
<java.lang.String, charAt[int], char, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, java.lang.String], boolean, null, match>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, java.lang.String], boolean, null, Character>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, java.lang.String], boolean, null, Character>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, char[]], boolean, null, Character>
<java.lang.Character, toUpperCase[char], char, org.gjt.sp.jedit.syntax.SyntaxUtilities, regionMatches[boolean, javax.swing.text.Segment, int, char[]], boolean, null, Character>
<java.awt.Graphics, getFont[], java.awt.Font, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<java.awt.Graphics, getColor[], java.awt.Color, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<java.awt.Color, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, defaultColor>
<java.awt.Graphics, getColor[], java.awt.Color, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<java.awt.Graphics, setColor[java.awt.Color], void, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<java.awt.Font, equals[java.lang.Object], boolean, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, defaultFont>
<java.awt.Graphics, getFont[], java.awt.Font, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<java.awt.Graphics, setFont[java.awt.Font], void, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, gfx>
<SAD, setGraphicsFlags[], SADNESS, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, styles[id]>
<javax.swing.text.Utilities, drawTabbedText[javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int], int, org.gjt.sp.jedit.syntax.SyntaxUtilities, paintSyntaxLine[javax.swing.text.Segment, org.gjt.sp.jedit.syntax.Token, org.gjt.sp.jedit.syntax.SyntaxStyle[], javax.swing.text.TabExpander, java.awt.Graphics, int, int], int, null, Utilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, keywords>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte], void, null, nothing here>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.PHPTokenMarker, addToken[int, byte, boolean], void, org.gjt.sp.jedit.syntax.PHPTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, JavaScriptTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.JavaScriptTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, javaScriptKeywords>
<org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, PLSQLTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PLSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.EiffelTokenMarker, EiffelTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, eiffelKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<java.lang.Character, isUpperCase[char], boolean, org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, Character>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.EiffelTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, getKeywords[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, JSPTokenMarker[], void, null, JavaScriptTokenMarker>
<SAD, getKeywords[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, JSPTokenMarker[], void, null, JavaTokenMarker>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doKeyword[javax.swing.text.Segment, int, char, boolean], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, doJSKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.JSPTokenMarker, doKeyword[javax.swing.text.Segment, int, char, boolean], boolean, org.gjt.sp.jedit.syntax.JSPTokenMarker, doJavaKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, doKeyword[javax.swing.text.Segment, int, char, boolean], boolean, null, (javaScript ? keywords : javaKeywords)>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, doKeyword[javax.swing.text.Segment, int, char, boolean], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.JSPTokenMarker, doKeyword[javax.swing.text.Segment, int, char, boolean], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.PythonTokenMarker, PythonTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, indexOf[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, regionMatches[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, SyntaxUtilities>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, pyKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.PythonTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.SQRTokenMarker, SQRTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqrKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.SQRTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.CTokenMarker, CTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.String, indexOf[int], int, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, METHOD_DELIMITERS>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, cKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.CTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.MakefileTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.TSQLTokenMarker, TSQLTokenMarker[], void, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<java.lang.Character, isLetterOrDigit[char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, Character>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, sqlKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.TSQLTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.CCTokenMarker, CCTokenMarker[], void, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.CCTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, ccKeywords>
<org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, org.gjt.sp.jedit.syntax.DawnTokenMarker, DawnTokenMarker[], void, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, markTokensImpl[byte, javax.swing.text.Segment, int], byte, null, nothing here>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, add[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, getKeywords[], org.gjt.sp.jedit.syntax.KeywordMap, null, dawnKeywords>
<SAD, lookup[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, keywords>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<SAD, addToken[], SADNESS, org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, nothing here>
<java.util.ResourceBundle, getBundle[java.lang.String, java.util.Locale], java.util.ResourceBundle, org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, PropertyResourceBundle>
<java.util.Locale, getDefault[], java.util.Locale, org.gjt.sp.jedit.syntax.DawnTokenMarker, doKeyword[javax.swing.text.Segment, int, char], boolean, null, Locale>
<java.util.ResourceBundle, getString[java.lang.String], java.lang.String, gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, null, messages>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, RE[gnu.regexp.REToken, gnu.regexp.REToken, int, int, int], void, null, nothing here>
<gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, gnu.regexp.RE, RE[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.lang.String, toCharArray[], char[], gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((String)patternObj)>
<java.lang.StringBuffer, length[], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((StringBuffer)patternObj)>
<java.lang.StringBuffer, getChars[int, int, char[], int], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((StringBuffer)patternObj)>
<java.lang.String, toCharArray[], char[], gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, toString()>
<java.lang.Object, toString[], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, toCharArray[], patternObj>
<gnu.regexp.RE, getCharUnit[char[], int, gnu.regexp.CharUnit], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, currentToken>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, setRepeated[gnu.regexp.REToken, int, int, int], gnu.regexp.REToken, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.lang.String, indexOf[int], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, "dswDSW">
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<java.lang.String, indexOf[int], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, "nrt">
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getPosixSet[char[], int, java.lang.StringBuffer], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, intValue[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, RETokenPOSIX>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, posixSet>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.util.Vector, trimToSize[], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getCharUnit[char[], int, gnu.regexp.CharUnit], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.lang.String, toCharArray[], char[], gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, valueOf(pattern,index,endIndex - index)>
<java.lang.String, valueOf[char[], int, int], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, toCharArray[], String>
<gnu.regexp.RE, getNumSubs[], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((RE)currentToken)>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, getLineSeparator[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, getLineSeparator[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, currentToken>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, setRepeated[gnu.regexp.REToken, int, int, int], gnu.regexp.REToken, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, currentToken>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, setRepeated[gnu.regexp.REToken, int, int, int], gnu.regexp.REToken, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<SAD, isStingy[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((RETokenRepeated)currentToken)>
<SAD, makeStingy[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, ((RETokenRepeated)currentToken)>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, setRepeated[gnu.regexp.REToken, int, int, int], gnu.regexp.REToken, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, Character>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.lang.Character, digit[char, int], int, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, Character>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<SAD, get[], SADNESS, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, syntax>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<java.util.Vector, trimToSize[], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, addToken[gnu.regexp.REToken], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, nothing here>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getCharUnit[char[], int, gnu.regexp.CharUnit], int, null, nothing here>
<gnu.regexp.RE, isMatch[java.lang.Object, int, int], boolean, gnu.regexp.RE, isMatch[java.lang.Object], boolean, null, nothing here>
<gnu.regexp.RE, isMatch[java.lang.Object, int, int], boolean, gnu.regexp.RE, isMatch[java.lang.Object, int], boolean, null, nothing here>
<gnu.regexp.RE, isMatchImpl[gnu.regexp.CharIndexed, int, int], boolean, gnu.regexp.RE, isMatch[java.lang.Object, int, int], boolean, null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, isMatch[java.lang.Object, int, int], boolean, null, nothing here>
<SAD, charAt[], SADNESS, gnu.regexp.RE, isMatchImpl[gnu.regexp.CharIndexed, int, int], boolean, null, input>
<SAD, match[], SADNESS, gnu.regexp.RE, isMatchImpl[gnu.regexp.CharIndexed, int, int], boolean, null, firstToken>
<SAD, charAt[], SADNESS, gnu.regexp.RE, isMatchImpl[gnu.regexp.CharIndexed, int, int], boolean, null, input>
<SAD, setUncle[], SADNESS, gnu.regexp.RE, setUncle[gnu.regexp.REToken], void, null, lastToken>
<gnu.regexp.RE, setUncle[gnu.regexp.REToken], void, gnu.regexp.RE, chain[gnu.regexp.REToken], boolean, null, nothing here>
<gnu.regexp.RE, getAllMatches[java.lang.Object, int, int], gnu.regexp.REMatch[], gnu.regexp.RE, getAllMatches[java.lang.Object], gnu.regexp.REMatch[], null, nothing here>
<gnu.regexp.RE, getAllMatches[java.lang.Object, int, int], gnu.regexp.REMatch[], gnu.regexp.RE, getAllMatches[java.lang.Object, int], gnu.regexp.REMatch[], null, nothing here>
<gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], gnu.regexp.RE, getAllMatches[java.lang.Object, int, int], gnu.regexp.REMatch[], null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, getAllMatches[java.lang.Object, int, int], gnu.regexp.REMatch[], null, nothing here>
<gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, nothing here>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<SAD, getEndIndex[], SADNESS, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, m>
<SAD, move[], SADNESS, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, input>
<SAD, move[], SADNESS, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, input>
<SAD, isValid[], SADNESS, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, input>
<java.util.Vector, size[], int, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<java.util.Vector, copyInto[java.lang.Object[]], void, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<SAD, next[], SADNESS, gnu.regexp.RE, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, match[], SADNESS, gnu.regexp.RE, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, firstToken>
<gnu.regexp.RE, getMatch[java.lang.Object, int, int], gnu.regexp.REMatch, gnu.regexp.RE, getMatch[java.lang.Object], gnu.regexp.REMatch, null, nothing here>
<gnu.regexp.RE, getMatch[java.lang.Object, int, int], gnu.regexp.REMatch, gnu.regexp.RE, getMatch[java.lang.Object, int], gnu.regexp.REMatch, null, nothing here>
<gnu.regexp.RE, getMatch[java.lang.Object, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, gnu.regexp.RE, getMatch[java.lang.Object, int, int], gnu.regexp.REMatch, null, nothing here>
<gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, gnu.regexp.RE, getMatch[java.lang.Object, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, getMatch[java.lang.Object, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, nothing here>
<SAD, charAt[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, input>
<gnu.regexp.RE, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, nothing here>
<SAD, finish[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, longest>
<SAD, clear[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, mymatch>
<SAD, charAt[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, input>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, buffer>
<SAD, charAt[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, input>
<SAD, move[], SADNESS, gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, null, input>
<gnu.regexp.RE, getMatchEnumeration[java.lang.Object, int, int], gnu.regexp.REMatchEnumeration, gnu.regexp.RE, getMatchEnumeration[java.lang.Object], gnu.regexp.REMatchEnumeration, null, nothing here>
<gnu.regexp.RE, getMatchEnumeration[java.lang.Object, int, int], gnu.regexp.REMatchEnumeration, gnu.regexp.RE, getMatchEnumeration[java.lang.Object, int], gnu.regexp.REMatchEnumeration, null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, getMatchEnumeration[java.lang.Object, int, int], gnu.regexp.REMatchEnumeration, null, nothing here>
<gnu.regexp.RE, substitute[java.lang.Object, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substitute[java.lang.Object, java.lang.String], java.lang.String, null, nothing here>
<gnu.regexp.RE, substitute[java.lang.Object, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substitute[java.lang.Object, java.lang.String, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substitute[java.lang.Object, java.lang.String, int, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, substitute[java.lang.Object, java.lang.String, int, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<SAD, substituteInto[], SADNESS, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, m>
<SAD, move[], SADNESS, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<SAD, charAt[], SADNESS, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<SAD, move[], SADNESS, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, substituteImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String], java.lang.String, null, nothing here>
<gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String, int, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, gnu.regexp.RE, substituteAll[java.lang.Object, java.lang.String, int, int], java.lang.String, null, nothing here>
<gnu.regexp.RE, getMatchImpl[gnu.regexp.CharIndexed, int, int, java.lang.StringBuffer], gnu.regexp.REMatch, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<SAD, substituteInto[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, m>
<SAD, getEndIndex[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, m>
<SAD, charAt[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<SAD, move[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<SAD, move[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<SAD, isValid[], SADNESS, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, input>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, substituteAllImpl[gnu.regexp.CharIndexed, java.lang.String, int, int], java.lang.String, null, buffer>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RE, addToken[gnu.regexp.REToken], void, null, next>
<SAD, chain[], SADNESS, gnu.regexp.RE, addToken[gnu.regexp.REToken], void, null, lastToken>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, setRepeated[gnu.regexp.REToken, int, int, int], gnu.regexp.REToken, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, getPosixSet[char[], int, java.lang.StringBuffer], int, null, buf>
<SAD, get[], SADNESS, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<gnu.regexp.RE, getCharUnit[char[], int, gnu.regexp.CharUnit], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, Character>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, Character>
<java.lang.StringBuffer, length[], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, Integer>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<SAD, get[], SADNESS, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<gnu.regexp.RE, getCharUnit[char[], int, gnu.regexp.CharUnit], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, Character>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<SAD, get[], SADNESS, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, syntax>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<java.lang.StringBuffer, length[], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<java.lang.Integer, parseInt[java.lang.String], int, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, Integer>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, buf>
<gnu.regexp.RE, getLocalizedMessage[java.lang.String], java.lang.String, gnu.regexp.RE, getMinMax[char[], int, gnu.regexp.IntPair, gnu.regexp.RESyntax], int, null, nothing here>
<gnu.regexp.RE, dump[java.lang.StringBuffer], void, gnu.regexp.RE, toString[], java.lang.String, null, nothing here>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.RE, toString[], java.lang.String, null, sb>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RE, dump[java.lang.StringBuffer], void, null, os>
<SAD, dumpAll[], SADNESS, gnu.regexp.RE, dump[java.lang.StringBuffer], void, null, firstToken>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RE, dump[java.lang.StringBuffer], void, null, os>
<java.lang.Object, toString[], java.lang.String, gnu.regexp.RE, makeCharIndexed[java.lang.Object, int], gnu.regexp.CharIndexed, null, input>
<SAD, initialize[], SADNESS, gnu.regexp.UncheckedRE, UncheckedRE[java.lang.Object, int, gnu.regexp.RESyntax], void, null, nothing here>
<SAD, getMessage[], SADNESS, gnu.regexp.UncheckedRE, UncheckedRE[java.lang.Object, int, gnu.regexp.RESyntax], void, null, e>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenBackRef, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenBackRef, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<SAD, next[], SADNESS, gnu.regexp.RETokenBackRef, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, gnu.regexp.RETokenBackRef, dump[java.lang.StringBuffer], void, null, append('\\')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenBackRef, dump[java.lang.StringBuffer], void, append[int], os>
<gnu.regexp.CharIndexedReader, next[], boolean, gnu.regexp.CharIndexedReader, CharIndexedReader[java.io.Reader, int], void, null, nothing here>
<gnu.regexp.CharIndexedReader, move[int], boolean, gnu.regexp.CharIndexedReader, CharIndexedReader[java.io.Reader, int], void, null, nothing here>
<java.io.BufferedReader, reset[], void, gnu.regexp.CharIndexedReader, next[], boolean, null, br>
<java.io.BufferedReader, read[], int, gnu.regexp.CharIndexedReader, next[], boolean, null, br>
<java.io.BufferedReader, mark[int], void, gnu.regexp.CharIndexedReader, next[], boolean, null, br>
<java.lang.Throwable, printStackTrace[], void, gnu.regexp.CharIndexedReader, next[], boolean, null, e>
<java.io.BufferedReader, reset[], void, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<java.io.BufferedReader, mark[int], void, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<java.io.BufferedReader, skip[long], long, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<java.io.BufferedReader, reset[], void, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<java.io.BufferedReader, skip[long], long, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<java.io.BufferedReader, read[], int, gnu.regexp.CharIndexedReader, charAt[int], char, null, br>
<gnu.regexp.CharIndexedReader, next[], boolean, gnu.regexp.CharIndexedReader, move[int], boolean, null, nothing here>
<java.lang.String, length[], int, gnu.regexp.CharIndexedString, CharIndexedString[java.lang.String, int], void, null, s>
<java.lang.String, charAt[int], char, gnu.regexp.CharIndexedString, charAt[int], char, null, s>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<SAD, next[], SADNESS, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.String, charAt[int], char, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, newline>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.String, length[], int, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, newline>
<SAD, next[], SADNESS, gnu.regexp.RETokenEnd, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenEnd, dump[java.lang.StringBuffer], void, null, os>
<java.lang.Character, toLowerCase[char], char, gnu.regexp.RETokenRange, RETokenRange[int, char, char, boolean], void, null, Character>
<java.lang.Character, toLowerCase[char], char, gnu.regexp.RETokenRange, RETokenRange[int, char, char, boolean], void, null, Character>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenRange, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.Character, toLowerCase[char], char, gnu.regexp.RETokenRange, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<SAD, next[], SADNESS, gnu.regexp.RETokenRange, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRange, dump[java.lang.StringBuffer], void, null, append('-')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRange, dump[java.lang.StringBuffer], void, append[char], append(lo)>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRange, dump[java.lang.StringBuffer], void, append[char], os>
<java.lang.Character, toLowerCase[char], char, gnu.regexp.RETokenChar, RETokenChar[int, char, boolean], void, null, Character>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenChar, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.Character, toLowerCase[char], char, gnu.regexp.RETokenChar, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<SAD, next[], SADNESS, gnu.regexp.RETokenChar, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, gnu.regexp.RETokenChar, chain[gnu.regexp.REToken], boolean, null, System>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, gnu.regexp.RETokenChar, chain[gnu.regexp.REToken], boolean, null, System>
<java.lang.StringBuffer, append[char[]], java.lang.StringBuffer, gnu.regexp.RETokenChar, dump[java.lang.StringBuffer], void, null, os>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RETokenRepeated, getMinimumLength[], int, null, token>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<gnu.regexp.RETokenRepeated, matchRest[gnu.regexp.CharIndexed, gnu.regexp.REMatch], gnu.regexp.REMatch, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, assignFrom[], SADNESS, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, clone[], SADNESS, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, current>
<SAD, match[], SADNESS, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, token>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, size[], int, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<gnu.regexp.RETokenRepeated, matchRest[gnu.regexp.CharIndexed, gnu.regexp.REMatch], gnu.regexp.REMatch, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, assignFrom[], SADNESS, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, clone[], SADNESS, gnu.regexp.RETokenRepeated, matchRest[gnu.regexp.CharIndexed, gnu.regexp.REMatch], gnu.regexp.REMatch, null, current>
<SAD, next[], SADNESS, gnu.regexp.RETokenRepeated, matchRest[gnu.regexp.CharIndexed, gnu.regexp.REMatch], gnu.regexp.REMatch, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<SAD, dumpAll[], SADNESS, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, token>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, append('{')>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, append[int], os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[int], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenRepeated, dump[java.lang.StringBuffer], void, null, os>
<java.lang.String, length[], int, gnu.regexp.REFilterInputStream, read[], int, null, buffer>
<java.lang.String, charAt[int], char, gnu.regexp.REFilterInputStream, read[], int, null, buffer>
<SAD, isValid[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, stream>
<SAD, getNumSubs[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, expr>
<SAD, match[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, expr>
<SAD, finish[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, mymatch>
<SAD, move[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, stream>
<SAD, length[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, toString()>
<SAD, toString[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, length[], mymatch>
<SAD, length[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, toString()>
<SAD, toString[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, length[], mymatch>
<SAD, substituteInto[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, mymatch>
<java.lang.String, length[], int, gnu.regexp.REFilterInputStream, read[], int, null, buffer>
<java.lang.String, charAt[int], char, gnu.regexp.REFilterInputStream, read[], int, null, buffer>
<SAD, charAt[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, stream>
<SAD, move[], SADNESS, gnu.regexp.REFilterInputStream, read[], int, null, stream>
<gnu.regexp.REFilterInputStream, read[], int, gnu.regexp.REFilterInputStream, read[byte[], int, int], int, null, nothing here>
<gnu.regexp.REFilterInputStream, read[byte[], int, int], int, gnu.regexp.REFilterInputStream, read[byte[]], int, null, nothing here>
<java.lang.String, length[], int, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, newline>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.String, charAt[int], char, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, newline>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<SAD, next[], SADNESS, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, next[], SADNESS, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, next[], SADNESS, gnu.regexp.RETokenStart, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenStart, dump[java.lang.StringBuffer], void, null, os>
<SAD, next[], SADNESS, gnu.regexp.RETokenEndSub, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.Object, clone[], java.lang.Object, gnu.regexp.REMatch, clone[], java.lang.Object, null, start>
<java.lang.Object, clone[], java.lang.Object, gnu.regexp.REMatch, clone[], java.lang.Object, null, end>
<gnu.regexp.REMatch, clear[int], void, gnu.regexp.REMatch, REMatch[int, int, int], void, null, nothing here>
<java.lang.StringBuffer, append[java.lang.Object], java.lang.StringBuffer, gnu.regexp.REMatch, finish[gnu.regexp.CharIndexed], void, null, sb>
<SAD, charAt[], SADNESS, gnu.regexp.REMatch, finish[gnu.regexp.CharIndexed], void, null, text>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.REMatch, finish[gnu.regexp.CharIndexed], void, null, sb>
<java.lang.String, substring[int, int], java.lang.String, gnu.regexp.REMatch, toString[int], java.lang.String, null, matchedText>
<java.lang.String, length[], int, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.String, charAt[int], char, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, Character>
<java.lang.String, charAt[int], char, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.Character, digit[char, int], int, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, Character>
<java.lang.String, charAt[int], char, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, output>
<gnu.regexp.REMatch, toString[int], java.lang.String, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, output>
<java.lang.String, charAt[int], char, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.String, length[], int, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, output>
<java.lang.String, charAt[int], char, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, input>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, output>
<java.lang.System, getProperty[java.lang.String], java.lang.String, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, System>
<SAD, getLocalizedMessage[], SADNESS, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, RE>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_NO_EMPTY_RANGES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_INTERVALS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_DOT_NOT_NULL)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_DOT_NEWLINE)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CHAR_CLASSES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_BK_PLUS_QM)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], new RESyntax(RE_SYNTAX_POSIX_COMMON)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_UNMATCHED_RIGHT_PAREN_ORD)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_NO_BK_VBAR)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_PARENS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_BRACES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_ANCHORS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax(RE_SYNTAX_POSIX_COMMON)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_UNMATCHED_RIGHT_PAREN_ORD)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_NO_EMPTY_RANGES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_VBAR)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_REFS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_PARENS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_DOT_NOT_NULL)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_BACKSLASH_ESCAPE_IN_LISTS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_BACKSLASH_ESCAPE_IN_LISTS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], new RESyntax(RE_SYNTAX_POSIX_EXTENDED)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_NEWLINE_ALT)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_INTERVALS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_HAT_LISTS_NOT_NEWLINE)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CHAR_CLASSES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_BK_PLUS_QM)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_NO_BK_VBAR)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_NO_BK_PARENS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NEWLINE_ALT)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_HAT_LISTS_NOT_NEWLINE)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_ANCHORS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CHAR_CLASSES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_NO_BK_BRACES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_INTERVALS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax(RE_SYNTAX_EGREP)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, new RESyntax(RE_SYNTAX_POSIX_BASIC)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, new RESyntax(RE_SYNTAX_POSIX_BASIC)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_LIMITED_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], new RESyntax(RE_SYNTAX_POSIX_COMMON)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_UNMATCHED_RIGHT_PAREN_ORD)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_NO_BK_VBAR)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_REFS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_PARENS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_BRACES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INVALID_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_ANCHORS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax(RE_SYNTAX_POSIX_COMMON)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_CHAR_CLASS_ESCAPES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_NO_EMPTY_RANGES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_VBAR)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_PARENS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_NO_BK_BRACES)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_INTERVALS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_CONTEXT_INDEP_ANCHORS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_BACKSLASH_ESCAPE_IN_LISTS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax()>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_DOT_NEWLINE)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], new RESyntax(RE_SYNTAX_PERL4)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_COMMENTS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], set(RE_CHAR_CLASS_ESC_IN_LISTS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_STRING_ANCHORS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_LOOKAHEAD)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_STINGY_OPS)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], set(RE_PURE_GROUPING)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, set[int], new RESyntax(RE_SYNTAX_PERL4)>
<gnu.regexp.RESyntax, makeFinal[], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, null, set(RE_DOT_NEWLINE)>
<gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, gnu.regexp.REMatch, substituteInto[java.lang.String], java.lang.String, makeFinal[], new RESyntax(RE_SYNTAX_PERL5)>
<java.util.BitSet, clone[], java.lang.Object, gnu.regexp.RESyntax, RESyntax[gnu.regexp.RESyntax], void, null, bits>
<java.util.BitSet, get[int], boolean, gnu.regexp.RESyntax, get[int], boolean, null, bits>
<java.util.BitSet, set[int], void, gnu.regexp.RESyntax, set[int], gnu.regexp.RESyntax, null, bits>
<java.util.BitSet, clear[int], void, gnu.regexp.RESyntax, clear[int], gnu.regexp.RESyntax, null, bits>
<java.lang.String, length[], int, gnu.regexp.REFilterReader, read[], int, null, buffer>
<java.lang.String, charAt[int], char, gnu.regexp.REFilterReader, read[], int, null, buffer>
<SAD, isValid[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, stream>
<SAD, getNumSubs[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, expr>
<SAD, match[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, expr>
<SAD, finish[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, mymatch>
<SAD, move[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, stream>
<SAD, length[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, toString()>
<SAD, toString[], SADNESS, gnu.regexp.REFilterReader, read[], int, length[], mymatch>
<SAD, length[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, toString()>
<SAD, toString[], SADNESS, gnu.regexp.REFilterReader, read[], int, length[], mymatch>
<SAD, substituteInto[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, mymatch>
<java.lang.String, length[], int, gnu.regexp.REFilterReader, read[], int, null, buffer>
<java.lang.String, charAt[int], char, gnu.regexp.REFilterReader, read[], int, null, buffer>
<SAD, charAt[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, stream>
<SAD, move[], SADNESS, gnu.regexp.REFilterReader, read[], int, null, stream>
<gnu.regexp.REFilterReader, read[], int, gnu.regexp.REFilterReader, read[char[], int, int], int, null, nothing here>
<gnu.regexp.REFilterReader, read[char[], int, int], int, gnu.regexp.REFilterReader, read[char[]], int, null, nothing here>
<SAD, clone[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, clone[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, match[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, clone[], re>
<SAD, next[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, assignFrom[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, next[], SADNESS, gnu.regexp.RETokenLookAhead, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenLookAhead, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenLookAhead, dump[java.lang.StringBuffer], void, null, os>
<SAD, dumpAll[], SADNESS, gnu.regexp.RETokenLookAhead, dump[java.lang.StringBuffer], void, null, re>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenLookAhead, dump[java.lang.StringBuffer], void, null, os>
<java.lang.String, length[], int, gnu.regexp.RETokenOneOf, RETokenOneOf[int, java.lang.String, boolean, boolean], void, null, optionsStr>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenOneOf, RETokenOneOf[int, java.lang.String, boolean, boolean], void, null, options>
<java.lang.String, charAt[int], char, gnu.regexp.RETokenOneOf, RETokenOneOf[int, java.lang.String, boolean, boolean], void, null, optionsStr>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, getMinimumLength[], int, null, options>
<SAD, getMinimumLength[], SADNESS, gnu.regexp.RETokenOneOf, getMinimumLength[], int, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, getMinimumLength[], int, getMinimumLength[], options>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, options>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, options>
<SAD, clone[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, match[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, clone[], tk>
<SAD, next[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<SAD, assignFrom[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, mymatch>
<SAD, next[], SADNESS, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, os>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, options>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, os>
<SAD, dumpAll[], SADNESS, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, elementAt(i))>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, dumpAll[], options>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, length[], int, gnu.regexp.CharIndexedStringBuffer, charAt[int], char, null, s>
<java.lang.StringBuffer, charAt[int], char, gnu.regexp.CharIndexedStringBuffer, charAt[int], char, null, s>
<java.lang.StringBuffer, length[], int, gnu.regexp.CharIndexedStringBuffer, isValid[], boolean, null, s>
<java.lang.StringBuffer, length[], int, gnu.regexp.CharIndexedStringBuffer, move[int], boolean, null, s>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenAny, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<SAD, next[], SADNESS, gnu.regexp.RETokenAny, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenAny, dump[java.lang.StringBuffer], void, null, os>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenWordBoundary, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.Character, isLetterOrDigit[char], boolean, gnu.regexp.RETokenWordBoundary, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenWordBoundary, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.Character, isLetterOrDigit[char], boolean, gnu.regexp.RETokenWordBoundary, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<SAD, next[], SADNESS, gnu.regexp.RETokenWordBoundary, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenWordBoundary, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenWordBoundary, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenWordBoundary, dump[java.lang.StringBuffer], void, null, os>
<SAD, getLocalizedMessage[], SADNESS, gnu.regexp.REException, getMessage[], java.lang.String, null, RE>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.REException, getMessage[], java.lang.String, null, sb>
<java.text.MessageFormat, format[java.lang.String, java.lang.Object[]], java.lang.String, gnu.regexp.REException, getMessage[], java.lang.String, null, MessageFormat>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.REException, getMessage[], java.lang.String, null, sb>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.REException, getMessage[], java.lang.String, null, sb>
<java.lang.StringBuffer, toString[], java.lang.String, gnu.regexp.REException, getMessage[], java.lang.String, null, sb>
<gnu.regexp.REToken, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, gnu.regexp.REToken, next[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, uncle>
<gnu.regexp.REToken, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, gnu.regexp.REToken, next[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, next>
<gnu.regexp.REToken, dump[java.lang.StringBuffer], void, gnu.regexp.REToken, dumpAll[java.lang.StringBuffer], void, null, nothing here>
<gnu.regexp.REToken, dumpAll[java.lang.StringBuffer], void, gnu.regexp.REToken, dumpAll[java.lang.StringBuffer], void, null, next>
<gnu.regexp.CharIndexedInputStream, next[], boolean, gnu.regexp.CharIndexedInputStream, CharIndexedInputStream[java.io.InputStream, int], void, dumpAll[java.lang.StringBuffer], nothing here>
<gnu.regexp.CharIndexedInputStream, move[int], boolean, gnu.regexp.CharIndexedInputStream, CharIndexedInputStream[java.io.InputStream, int], void, null, nothing here>
<java.io.BufferedInputStream, reset[], void, gnu.regexp.CharIndexedInputStream, next[], boolean, null, br>
<java.io.BufferedInputStream, read[], int, gnu.regexp.CharIndexedInputStream, next[], boolean, null, br>
<java.io.BufferedInputStream, mark[int], void, gnu.regexp.CharIndexedInputStream, next[], boolean, null, br>
<java.lang.Throwable, printStackTrace[], void, gnu.regexp.CharIndexedInputStream, next[], boolean, null, e>
<java.io.BufferedInputStream, reset[], void, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<java.io.BufferedInputStream, mark[int], void, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<java.io.BufferedInputStream, skip[long], long, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<java.io.BufferedInputStream, reset[], void, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<java.io.BufferedInputStream, skip[long], long, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<java.io.BufferedInputStream, read[], int, gnu.regexp.CharIndexedInputStream, charAt[int], char, null, br>
<gnu.regexp.CharIndexedInputStream, next[], boolean, gnu.regexp.CharIndexedInputStream, move[int], boolean, null, nothing here>
<gnu.regexp.REMatchEnumeration, hasMoreMatches[java.lang.StringBuffer], boolean, gnu.regexp.REMatchEnumeration, hasMoreElements[], boolean, null, nothing here>
<gnu.regexp.REMatchEnumeration, hasMoreMatches[java.lang.StringBuffer], boolean, gnu.regexp.REMatchEnumeration, hasMoreMatches[], boolean, null, nothing here>
<SAD, getMatchImpl[], SADNESS, gnu.regexp.REMatchEnumeration, hasMoreMatches[java.lang.StringBuffer], boolean, null, expr>
<SAD, move[], SADNESS, gnu.regexp.REMatchEnumeration, hasMoreMatches[java.lang.StringBuffer], boolean, null, input>
<gnu.regexp.REMatchEnumeration, nextMatch[], gnu.regexp.REMatch, gnu.regexp.REMatchEnumeration, nextElement[], java.lang.Object, null, nothing here>
<gnu.regexp.REMatchEnumeration, hasMoreElements[], boolean, gnu.regexp.REMatchEnumeration, nextMatch[], gnu.regexp.REMatch, null, nothing here>
<SAD, isValid[], SADNESS, gnu.regexp.REMatchEnumeration, nextMatch[], gnu.regexp.REMatch, null, input>
<java.lang.String, equals[java.lang.Object], boolean, gnu.regexp.RETokenPOSIX, intValue[java.lang.String], int, null, s_nameTable[i]>
<SAD, charAt[], SADNESS, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, input>
<java.lang.Character, isLetterOrDigit[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isLetter[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isISOControl[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isWhitespace[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isISOControl[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isLetter[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isLowerCase[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isWhitespace[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isISOControl[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.String, indexOf[int], int, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, <>">
<java.lang.Character, isWhitespace[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isLetter[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isUpperCase[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.Character, isDigit[char], boolean, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, Character>
<java.lang.String, indexOf[int], int, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, "abcdefABCDEF">
<SAD, next[], SADNESS, gnu.regexp.RETokenPOSIX, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, nothing here>
<java.lang.StringBuffer, append[char], java.lang.StringBuffer, gnu.regexp.RETokenPOSIX, dump[java.lang.StringBuffer], void, null, os>
<java.lang.StringBuffer, append[java.lang.String], java.lang.StringBuffer, gnu.regexp.RETokenPOSIX, dump[java.lang.StringBuffer], void, null, os>
<com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parse[java.lang.String, java.lang.String, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parse[java.lang.String, java.lang.String, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parse[java.lang.String, java.lang.String, java.io.Reader], void, null, nothing here>
<com.microstar.xml.XmlParser, initializeVariables[], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<SAD, startDocument[], SADNESS, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, handler>
<com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, parseDocument[], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<SAD, endDocument[], SADNESS, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, handler>
<com.microstar.xml.XmlParser, cleanupVariables[], void, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.net.URL, toString[], java.lang.String, com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, null, getURL()>
<java.net.URLConnection, getURL[], java.net.URL, com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, toString[], externalEntity>
<SAD, error[], SADNESS, com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, null, handler>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, null, nothing here>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, null, new Character(textFound)>
<com.microstar.xml.XmlParser, parseProlog[], void, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseElement[], void, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMisc[], void, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseDocument[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipUntil[java.lang.String], void, com.microstar.xml.XmlParser, parseComment[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parsePI[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parsePI[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parsePI[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, com.microstar.xml.XmlParser, parsePI[], void, null, nothing here>
<SAD, processingInstruction[], SADNESS, com.microstar.xml.XmlParser, parsePI[], void, null, handler>
<com.microstar.xml.XmlParser, dataBufferToString[], java.lang.String, com.microstar.xml.XmlParser, parsePI[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, com.microstar.xml.XmlParser, parseCDSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMisc[], void, com.microstar.xml.XmlParser, parseProlog[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseProlog[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseDoctypedecl[], void, com.microstar.xml.XmlParser, parseProlog[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMisc[], void, com.microstar.xml.XmlParser, parseProlog[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[java.lang.String], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, version>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, require[java.lang.String], void, com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, version>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, require[java.lang.String], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, require[java.lang.String], void, com.microstar.xml.XmlParser, parseTextDecl[boolean], void, null, nothing here>
<java.lang.String, toUpperCase[], java.lang.String, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, encodingName>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseMisc[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMisc[], void, null, nothing here>
<com.microstar.xml.XmlParser, parsePI[], void, com.microstar.xml.XmlParser, parseMisc[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMisc[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseComment[], void, com.microstar.xml.XmlParser, parseMisc[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMarkupdecl[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMarkupdecl[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, nothing here>
<SAD, doctypeDecl[], SADNESS, com.microstar.xml.XmlParser, parseDoctypedecl[], void, null, handler>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseElementdecl[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseAttlistDecl[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEntityDecl[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseNotationDecl[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parsePI[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseComment[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseConditionalSect[], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseMarkupdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, getElementContentType[java.lang.String], int, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, declaredAttributes[java.lang.String], java.util.Enumeration, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<java.util.Enumeration, hasMoreElements[], boolean, com.microstar.xml.XmlParser, parseElement[], void, null, atts>
<java.util.Enumeration, nextElement[], java.lang.Object, com.microstar.xml.XmlParser, parseElement[], void, null, atts>
<SAD, attribute[], SADNESS, com.microstar.xml.XmlParser, parseElement[], void, null, handler>
<com.microstar.xml.XmlParser, getAttributeExpandedValue[java.lang.String, java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<SAD, startElement[], SADNESS, com.microstar.xml.XmlParser, parseElement[], void, null, handler>
<com.microstar.xml.XmlParser, parseContent[], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseElement[], void, null, nothing here>
<SAD, startElement[], SADNESS, com.microstar.xml.XmlParser, parseElement[], void, null, handler>
<SAD, endElement[], SADNESS, com.microstar.xml.XmlParser, parseElement[], void, null, handler>
<java.lang.String, intern[], java.lang.String, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, readNmtoken(true)>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, intern[], nothing here>
<com.microstar.xml.XmlParser, getAttributeDefaultValueType[java.lang.String, java.lang.String], int, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEq[], void, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, nothing here>
<SAD, attribute[], SADNESS, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, handler>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, com.microstar.xml.XmlParser, parseAttribute[java.lang.String], void, null, System>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEq[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseEq[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEq[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseETag[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseETag[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseETag[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseETag[], void, null, nothing here>
<SAD, endElement[], SADNESS, com.microstar.xml.XmlParser, parseETag[], void, null, handler>
<com.microstar.xml.XmlParser, parsePCData[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseWhitespace[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseCharRef[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEntityRef[boolean], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseComment[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[java.lang.String], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseCDSect[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parsePI[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseETag[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseElement[], void, com.microstar.xml.XmlParser, parseContent[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseElementdecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMixed[], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferToString[], java.lang.String, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, parseElements[], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferToString[], java.lang.String, com.microstar.xml.XmlParser, parseContentspec[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseCp[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseCp[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseElements[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseElements[], void, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseCp[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseMixed[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseAttDef[java.lang.String], void, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseAttlistDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, readAttType[], int, null, nothing here>
<com.microstar.xml.XmlParser, parseEnumeration[], void, com.microstar.xml.XmlParser, readAttType[], int, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, readAttType[], int, null, nothing here>
<java.lang.String, equals[java.lang.Object], boolean, com.microstar.xml.XmlParser, readAttType[], int, null, typeString>
<com.microstar.xml.XmlParser, parseNotationType[], void, com.microstar.xml.XmlParser, readAttType[], int, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, readAttType[], int, null, attributeTypeHash>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, readAttType[], int, null, nothing here>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, readAttType[], int, null, type>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseEnumeration[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseNotationType[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseNotationType[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseEnumeration[], void, com.microstar.xml.XmlParser, parseNotationType[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, parseMarkupdecl[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseConditionalSect[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String, int], int, com.microstar.xml.XmlParser, parseCharRef[], void, null, Integer>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, parseCharRef[], void, null, new Character(c)>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<java.lang.Integer, parseInt[java.lang.String, int], int, com.microstar.xml.XmlParser, parseCharRef[], void, null, Integer>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, parseCharRef[], void, null, new Character(c)>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseCharRef[], void, null, nothing here>
<java.lang.Integer, toString[], java.lang.String, com.microstar.xml.XmlParser, parseCharRef[], void, null, new Integer(value)>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityType[java.lang.String], int, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityValue[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityPublicId[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntitySystemId[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityRef[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityType[java.lang.String], int, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityValue[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityValue[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntityPublicId[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, getEntitySystemId[java.lang.String], java.lang.String, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parsePEReference[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, setExternalDataEntity[java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, setExternalTextEntity[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseEntityDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, parseNotationDecl[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char[], int, int], void, com.microstar.xml.XmlParser, parsePCData[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parsePCData[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parsePCData[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parsePCData[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, requireWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, requireWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, requireWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, requireWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, parseWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, parseWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, skipWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, skipWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, skipWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, skipWhitespace[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, intern[char[], int, int], java.lang.String, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, intern[char[], int, int], java.lang.String, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, extendArray[java.lang.Object, int, int], java.lang.Object, com.microstar.xml.XmlParser, readNmtoken[boolean], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, parseCharRef[], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, parseEntityRef[boolean], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, new Character(delim)>
<com.microstar.xml.XmlParser, dataBufferNormalize[], void, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferToString[], java.lang.String, com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, tryRead[char], boolean, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, requireWhitespace[], void, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, readExternalIds[boolean], java.lang.String[], null, nothing here>
<com.microstar.xml.XmlParser, extendArray[java.lang.Object, int, int], java.lang.Object, com.microstar.xml.XmlParser, dataBufferAppend[char], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char[], int, int], void, com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, null, nothing here>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, null, s>
<java.lang.String, length[], int, com.microstar.xml.XmlParser, dataBufferAppend[java.lang.String], void, null, s>
<com.microstar.xml.XmlParser, extendArray[java.lang.Object, int, int], java.lang.Object, com.microstar.xml.XmlParser, dataBufferAppend[char[], int, int], void, null, nothing here>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, com.microstar.xml.XmlParser, dataBufferAppend[char[], int, int], void, null, System>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, dataBufferNormalize[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, dataBufferNormalize[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, dataBufferNormalize[], void, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, dataBufferNormalize[], void, null, nothing here>
<SAD, charData[], SADNESS, com.microstar.xml.XmlParser, dataBufferFlush[], void, null, handler>
<SAD, ignorableWhitespace[], SADNESS, com.microstar.xml.XmlParser, dataBufferFlush[], void, null, handler>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, require[java.lang.String], void, null, delim>
<com.microstar.xml.XmlParser, require[char], void, com.microstar.xml.XmlParser, require[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, require[char], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, char, java.lang.String], void, com.microstar.xml.XmlParser, require[char], void, null, nothing here>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, require[char], void, null, new Character(delim)>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, null, s>
<com.microstar.xml.XmlParser, intern[char[], int, int], java.lang.String, com.microstar.xml.XmlParser, intern[java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, extendArray[java.lang.Object, int, int], java.lang.Object, com.microstar.xml.XmlParser, intern[char[], int, int], java.lang.String, null, nothing here>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, intern[char[], int, int], java.lang.String, null, s>
<java.lang.System, arraycopy[java.lang.Object, int, java.lang.Object, int, int], void, com.microstar.xml.XmlParser, extendArray[java.lang.Object, int, int], java.lang.Object, null, System>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredElements[], java.util.Enumeration, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementContentType[java.lang.String], int, null, elementInfo>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, getElementContentType[java.lang.String], int, null, ((Integer)element[0])>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementContentModel[java.lang.String], java.lang.String, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, elementInfo>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, ((Integer)element[0])>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, nothing here>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementAttributes[java.lang.String], java.util.Hashtable, null, elementInfo>
<com.microstar.xml.XmlParser, getElementAttributes[java.lang.String], java.util.Hashtable, com.microstar.xml.XmlParser, declaredAttributes[java.lang.String], java.util.Enumeration, null, nothing here>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredAttributes[java.lang.String], java.util.Enumeration, null, attlist>
<com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], com.microstar.xml.XmlParser, getAttributeType[java.lang.String, java.lang.String], int, null, nothing here>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, getAttributeType[java.lang.String, java.lang.String], int, null, ((Integer)attribute[0])>
<com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], com.microstar.xml.XmlParser, getAttributeEnumeration[java.lang.String, java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], com.microstar.xml.XmlParser, getAttributeDefaultValue[java.lang.String, java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], com.microstar.xml.XmlParser, getAttributeExpandedValue[java.lang.String, java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, getAttributeExpandedValue[java.lang.String, java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, readLiteral[int], java.lang.String, com.microstar.xml.XmlParser, getAttributeExpandedValue[java.lang.String, java.lang.String], java.lang.String, null, nothing here>
<com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], com.microstar.xml.XmlParser, getAttributeDefaultValueType[java.lang.String, java.lang.String], int, null, nothing here>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, getAttributeDefaultValueType[java.lang.String, java.lang.String], int, null, ((Integer)attribute[2])>
<com.microstar.xml.XmlParser, getElementAttributes[java.lang.String], java.util.Hashtable, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, attlist>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, attlist>
<java.lang.String, intern[], java.lang.String, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, name>
<com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, nothing here>
<com.microstar.xml.XmlParser, getElementAttributes[java.lang.String], java.util.Hashtable, com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], null, attlist>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredEntities[], java.util.Enumeration, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityType[java.lang.String], int, null, entityInfo>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, getEntityType[java.lang.String], int, null, ((Integer)entity[0])>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityPublicId[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntitySystemId[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityValue[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityNotationName[java.lang.String], java.lang.String, null, entityInfo>
<com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, setInternalEntity[java.lang.String, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, setExternalDataEntity[java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, setExternalTextEntity[java.lang.String, java.lang.String, java.lang.String], void, null, nothing here>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, null, entityInfo>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, null, entityInfo>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredNotations[], java.util.Enumeration, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getNotationPublicId[java.lang.String], java.lang.String, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getNotationSystemId[java.lang.String], java.lang.String, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, null, notationInfo>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, null, notationInfo>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readDataChunk[], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, popInput[], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, readDataChunk[], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, popInput[], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, parsePEReference[boolean], void, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, readCh[], char, null, nothing here>
<com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, unread[char], void, null, nothing here>
<java.lang.Character, toString[], java.lang.String, com.microstar.xml.XmlParser, unread[char], void, null, new Character(c)>
<com.microstar.xml.XmlParser, pushCharArray[java.lang.String, char[], int, int], void, com.microstar.xml.XmlParser, unread[char[], int], void, null, nothing here>
<com.microstar.xml.XmlParser, pushInput[java.lang.String], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<java.net.URL, toString[], java.lang.String, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, getURL(),systemId)>
<java.net.URLConnection, getURL[], java.net.URL, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, toString[], externalEntity>
<java.net.URL, toString[], java.lang.String, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, new URL(new URL(baseURI),systemId)>
<SAD, resolveEntity[], SADNESS, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, handler>
<SAD, startExternalEntity[], SADNESS, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, handler>
<SAD, startExternalEntity[], SADNESS, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, handler>
<com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<java.net.URL, openConnection[], java.net.URLConnection, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, url>
<java.net.URLConnection, connect[], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, externalEntity>
<java.net.URLConnection, getInputStream[], java.io.InputStream, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, externalEntity>
<java.io.InputStream, markSupported[], boolean, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, is>
<java.net.URLConnection, getContentEncoding[], java.lang.String, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, externalEntity>
<com.microstar.xml.XmlParser, checkEncoding[java.lang.String, boolean], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, detectEncoding[], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, com.microstar.xml.XmlParser, pushURL[java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, tryWhitespace[], boolean, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<java.util.Vector, size[], int, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, inputStack>
<com.microstar.xml.XmlParser, parseTextDecl[boolean], void, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, parseXMLDecl[boolean], void, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<com.microstar.xml.XmlParser, unread[char[], int], void, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, "xml">
<com.microstar.xml.XmlParser, parsePI[], void, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, nothing here>
<java.io.InputStream, mark[int], void, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<java.io.InputStream, read[byte[]], int, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<java.io.InputStream, reset[], void, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, detectEncoding[], void, null, is>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, tryEncoding[byte[], byte, byte, byte, byte], boolean, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<com.microstar.xml.XmlParser, read8bitEncodingDeclaration[], void, com.microstar.xml.XmlParser, detectEncoding[], void, null, nothing here>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, null, s>
<com.microstar.xml.XmlParser, pushCharArray[java.lang.String, char[], int, int], void, com.microstar.xml.XmlParser, pushString[java.lang.String, java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, pushInput[java.lang.String], void, com.microstar.xml.XmlParser, pushCharArray[java.lang.String, char[], int, int], void, null, nothing here>
<java.util.Vector, elements[], java.util.Enumeration, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entityStack>
<java.util.Enumeration, hasMoreElements[], boolean, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entities>
<java.util.Enumeration, nextElement[], java.lang.Object, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entities>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, nothing here>
<java.util.Stack, push[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entityStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, inputStack>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, popInput[], void, null, nothing here>
<SAD, endExternalEntity[], SADNESS, com.microstar.xml.XmlParser, popInput[], void, null, handler>
<java.net.URL, toString[], java.lang.String, com.microstar.xml.XmlParser, popInput[], void, null, getURL()>
<java.net.URLConnection, getURL[], java.net.URL, com.microstar.xml.XmlParser, popInput[], void, toString[], externalEntity>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, popInput[], void, null, nothing here>
<SAD, endExternalEntity[], SADNESS, com.microstar.xml.XmlParser, popInput[], void, null, handler>
<com.microstar.xml.XmlParser, dataBufferFlush[], void, com.microstar.xml.XmlParser, popInput[], void, null, nothing here>
<SAD, endExternalEntity[], SADNESS, com.microstar.xml.XmlParser, popInput[], void, null, handler>
<java.util.Vector, isEmpty[], boolean, com.microstar.xml.XmlParser, popInput[], void, null, inputStack>
<java.util.Stack, pop[], java.lang.Object, com.microstar.xml.XmlParser, popInput[], void, null, inputStack>
<java.util.Stack, pop[], java.lang.Object, com.microstar.xml.XmlParser, popInput[], void, null, entityStack>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[0])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[3])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[4])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[5])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[6])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[7])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[9])>
<java.lang.Integer, intValue[], int, com.microstar.xml.XmlParser, popInput[], void, null, ((Integer)input[10])>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, tryRead[char], boolean, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, tryRead[char], boolean, null, nothing here>
<java.lang.String, toCharArray[], char[], com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, null, delim>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, null, nothing here>
<com.microstar.xml.XmlParser, unread[char[], int], void, com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, tryWhitespace[], boolean, null, nothing here>
<com.microstar.xml.XmlParser, isWhitespace[char], boolean, com.microstar.xml.XmlParser, tryWhitespace[], boolean, null, nothing here>
<com.microstar.xml.XmlParser, skipWhitespace[], void, com.microstar.xml.XmlParser, tryWhitespace[], boolean, null, nothing here>
<com.microstar.xml.XmlParser, unread[char], void, com.microstar.xml.XmlParser, tryWhitespace[], boolean, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, dataBufferAppend[char], void, com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, parseUntil[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, tryRead[java.lang.String], boolean, com.microstar.xml.XmlParser, skipUntil[java.lang.String], void, null, nothing here>
<com.microstar.xml.XmlParser, readCh[], char, com.microstar.xml.XmlParser, skipUntil[java.lang.String], void, null, nothing here>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, read8bitEncodingDeclaration[], void, null, is>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, read8bitEncodingDeclaration[], void, null, nothing here>
<com.microstar.xml.XmlParser, error[java.lang.String, java.lang.String, java.lang.String], void, com.microstar.xml.XmlParser, read8bitEncodingDeclaration[], void, null, nothing here>
<java.io.Reader, read[char[], int, int], int, com.microstar.xml.XmlParser, readDataChunk[], void, null, reader>
<com.microstar.xml.XmlParser, filterCR[], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<java.io.InputStream, read[byte[], int, int], int, com.microstar.xml.XmlParser, readDataChunk[], void, null, is>
<com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyIso8859_1ReadBuffer[int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs2ReadBuffer[int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs2ReadBuffer[int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, filterCR[], void, com.microstar.xml.XmlParser, readDataChunk[], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, copyUtf8ReadBuffer[int], void, null, nothing here>
<java.io.InputStream, read[], int, com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, null, is>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, null, nothing here>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, getNextUtf8Byte[int, int], int, null, nothing here>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, copyUcs2ReadBuffer[int, int, int], void, null, nothing here>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, null, nothing here>
<com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, com.microstar.xml.XmlParser, copyUcs4ReadBuffer[int, int, int, int, int], void, null, nothing here>
<java.lang.Integer, toHexString[int], java.lang.String, com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, null, Integer>
<java.net.URL, toString[], java.lang.String, com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, null, getURL()>
<java.net.URLConnection, getURL[], java.net.URL, com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, toString[], externalEntity>
<SAD, error[], SADNESS, com.microstar.xml.XmlParser, encodingError[java.lang.String, int, int], void, null, handler>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<java.awt.Container, add[java.lang.String, java.awt.Component], java.awt.Component, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, setSelected[boolean], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, SimpleInternalFrame[javax.swing.Icon, java.lang.String, javax.swing.JToolBar, javax.swing.JComponent], void, null, nothing here>
<javax.swing.JLabel, getIcon[], javax.swing.Icon, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getFrameIcon[], javax.swing.Icon, null, titleLabel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getFrameIcon[], javax.swing.Icon, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setFrameIcon[javax.swing.Icon], void, null, nothing here>
<javax.swing.JLabel, setIcon[javax.swing.Icon], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setFrameIcon[javax.swing.Icon], void, null, titleLabel>
<java.awt.Component, firePropertyChange[java.lang.String, java.lang.Object, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setFrameIcon[javax.swing.Icon], void, null, nothing here>
<javax.swing.JLabel, getText[], java.lang.String, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getTitle[], java.lang.String, null, titleLabel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getTitle[], java.lang.String, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setTitle[java.lang.String], void, null, nothing here>
<javax.swing.JLabel, setText[java.lang.String], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setTitle[java.lang.String], void, null, titleLabel>
<java.awt.Component, firePropertyChange[java.lang.String, java.lang.Object, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setTitle[java.lang.String], void, null, nothing here>
<java.awt.Container, getComponentCount[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getToolBar[], javax.swing.JToolBar, null, headerPanel>
<java.awt.Container, getComponent[int], java.awt.Component, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getToolBar[], javax.swing.JToolBar, null, headerPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getToolBar[], javax.swing.JToolBar, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, nothing here>
<java.awt.Container, remove[java.awt.Component], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, headerPanel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, newToolBar>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, BorderFactory>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, headerPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, nothing here>
<java.awt.Component, firePropertyChange[java.lang.String, java.lang.Object, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, hasContent[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getContent[], java.awt.Component, null, nothing here>
<java.awt.Container, getComponent[int], java.awt.Component, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getContent[], java.awt.Component, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getContent[], java.awt.Component, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, hasContent[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, null, nothing here>
<java.awt.Container, remove[java.awt.Component], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, null, nothing here>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, null, nothing here>
<java.awt.Component, firePropertyChange[java.lang.String, java.lang.Object, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setContent[java.awt.Component], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, isSelected[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setSelected[boolean], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setSelected[boolean], void, null, nothing here>
<javax.swing.JComponent, firePropertyChange[java.lang.String, boolean, boolean], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, setSelected[boolean], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getHeaderBackground[], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, nothing here>
<javax.swing.JComponent, setOpaque[boolean], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, label>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, gradientPanel>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, gradientPanel>
<javax.swing.BorderFactory, createEmptyBorder[int, int, int, int], javax.swing.border.Border, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, BorderFactory>
<java.awt.Container, add[java.awt.Component, java.lang.Object], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, headerPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, setToolBar[javax.swing.JToolBar], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, nothing here>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, headerPanel>
<javax.swing.JComponent, setOpaque[boolean], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, buildHeader[javax.swing.JLabel, javax.swing.JToolBar], javax.swing.JPanel, null, headerPanel>
<javax.swing.JComponent, setBackground[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, gradientPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getHeaderBackground[], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, nothing here>
<javax.swing.JComponent, setOpaque[boolean], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, gradientPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, isSelected[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, nothing here>
<javax.swing.JComponent, setForeground[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, titleLabel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, getTextForeground[boolean], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, nothing here>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, isSelected[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, nothing here>
<java.awt.Component, repaint[], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, null, headerPanel>
<com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateHeader[], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame, updateUI[], void, null, nothing here>
<java.awt.Container, getComponentCount[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame, hasContent[], boolean, null, nothing here>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getTextForeground[boolean], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getTextForeground[boolean], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getHeaderBackground[], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getHeaderBackground[], java.awt.Color, null, UIManager>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame, getHeaderBackground[], java.awt.Color, null, UIManager>
<java.awt.Graphics, translate[int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, UIManager>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, UIManager>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, translate[int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.RaisedHeaderBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, UIManager>
<java.awt.Color, getRed[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Color, getGreen[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Color, getBlue[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Color, getRed[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Color, getGreen[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Color, getBlue[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, shadow>
<java.awt.Graphics, translate[int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, setColor[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<java.awt.Graphics, translate[int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.ShadowBorder, paintBorder[java.awt.Component, java.awt.Graphics, int, int, int, int], void, null, g>
<javax.swing.JComponent, setBackground[java.awt.Color], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, GradientPanel[java.awt.LayoutManager, java.awt.Color], void, null, nothing here>
<javax.swing.JComponent, isOpaque[], boolean, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.UIManager, getColor[java.lang.Object], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, UIManager>
<javax.swing.JComponent, getWidth[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, nothing here>
<javax.swing.JComponent, getHeight[], int, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics2D, getPaint[], java.awt.Paint, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, g2>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, g2>
<java.awt.Component, getBackground[], java.awt.Color, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, nothing here>
<java.awt.Graphics, fillRect[int, int, int, int], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, g2>
<java.awt.Graphics2D, setPaint[java.awt.Paint], void, com.jgoodies.uif_lite.panel.SimpleInternalFrame.GradientPanel, paintComponent[java.awt.Graphics], void, null, g2>
<javax.swing.UIManager, getString[java.lang.Object], java.lang.String, com.jgoodies.uif_lite.component.UIFSplitPane, UIFSplitPane[], void, null, UIManager>
<javax.swing.UIManager, getString[java.lang.Object], java.lang.String, com.jgoodies.uif_lite.component.UIFSplitPane, UIFSplitPane[], void, null, UIManager>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.component.UIFSplitPane, createStrippedSplitPane[int, java.awt.Component, java.awt.Component], com.jgoodies.uif_lite.component.UIFSplitPane, null, split>
<javax.swing.JSplitPane, setOneTouchExpandable[boolean], void, com.jgoodies.uif_lite.component.UIFSplitPane, createStrippedSplitPane[int, java.awt.Component, java.awt.Component], com.jgoodies.uif_lite.component.UIFSplitPane, null, split>
<com.jgoodies.uif_lite.component.UIFSplitPane, isDividerBorderVisible[], boolean, com.jgoodies.uif_lite.component.UIFSplitPane, setDividerBorderVisible[boolean], void, null, nothing here>
<javax.swing.JComponent, firePropertyChange[java.lang.String, boolean, boolean], void, com.jgoodies.uif_lite.component.UIFSplitPane, setDividerBorderVisible[boolean], void, null, nothing here>
<com.jgoodies.uif_lite.component.UIFSplitPane, isDividerBorderVisible[], boolean, com.jgoodies.uif_lite.component.UIFSplitPane, updateUI[], void, null, nothing here>
<com.jgoodies.uif_lite.component.UIFSplitPane, setEmptyDividerBorder[], void, com.jgoodies.uif_lite.component.UIFSplitPane, updateUI[], void, null, nothing here>
<javax.swing.JSplitPane, getUI[], javax.swing.plaf.SplitPaneUI, com.jgoodies.uif_lite.component.UIFSplitPane, setEmptyDividerBorder[], void, null, nothing here>
<javax.swing.plaf.basic.BasicSplitPaneDivider, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.component.UIFSplitPane, setEmptyDividerBorder[], void, null, getDivider()>
<javax.swing.plaf.basic.BasicSplitPaneUI, getDivider[], javax.swing.plaf.basic.BasicSplitPaneDivider, com.jgoodies.uif_lite.component.UIFSplitPane, setEmptyDividerBorder[], void, setBorder[javax.swing.border.Border], basicUI>
<javax.swing.JComponent, setBorder[javax.swing.border.Border], void, com.jgoodies.uif_lite.component.Factory, createStrippedScrollPane[java.awt.Component], javax.swing.JScrollPane, null, scrollPane>
<javax.swing.BorderFactory, createEmptyBorder[], javax.swing.border.Border, com.jgoodies.uif_lite.component.Factory, createStrippedScrollPane[java.awt.Component], javax.swing.JScrollPane, null, BorderFactory>
<SAD, createStrippedSplitPane[], SADNESS, com.jgoodies.uif_lite.component.Factory, createStrippedSplitPane[int, java.awt.Component, java.awt.Component, double], javax.swing.JSplitPane, null, UIFSplitPane>
<javax.swing.JSplitPane, setResizeWeight[double], void, com.jgoodies.uif_lite.component.Factory, createStrippedSplitPane[int, java.awt.Component, java.awt.Component, double], javax.swing.JSplitPane, null, split>
<javax.swing.AbstractButton, setFocusPainted[boolean], void, com.jgoodies.uif_lite.component.Factory, createToolBarButton[javax.swing.Action], javax.swing.AbstractButton, null, button>
<javax.swing.AbstractButton, setMargin[java.awt.Insets], void, com.jgoodies.uif_lite.component.Factory, createToolBarButton[javax.swing.Action], javax.swing.AbstractButton, null, button>
<javax.swing.AbstractButton, setText[java.lang.String], void, com.jgoodies.uif_lite.component.Factory, createToolBarButton[javax.swing.Action], javax.swing.AbstractButton, null, button>


Calls pertencentes ao JCF (920)

<java.util.List, iterator[], java.util.Iterator, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, listList>
<java.util.Vector, size[], int, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, files>
<java.util.Vector, copyInto[java.lang.Object[]], void, FindInFilesHelper, getFileNames[java.io.File, java.lang.String, boolean], java.lang.String[], null, files>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, addFile2Vector[java.io.File, java.lang.String[], java.util.Vector], void, null, vect>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, addFile2Vector[java.lang.String[], java.util.Vector], void, null, vect>
<java.util.Vector, size[], int, FindInFilesHelper, vector2StringArray[java.util.Vector], java.lang.String[], null, vect>
<java.util.Vector, copyInto[java.lang.Object[]], void, FindInFilesHelper, vector2StringArray[java.util.Vector], java.lang.String[], null, vect>
<java.util.Vector, addAll[java.util.Collection], boolean, FindInFilesHelper, search[java.lang.String[], java.lang.String, boolean, boolean], java.util.Vector, null, allHits>
<java.util.Vector, addElement[java.lang.Object], void, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, size[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, insertElementAt[java.lang.Object, int], void, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, size[], int, FindInFilesHelper, searchInFile[java.lang.String, SearchMatcher], java.util.Vector, null, hits>
<java.util.Vector, add[java.lang.Object], boolean, FindInFilesPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<java.util.Vector, size[], int, java.lang.Object, actionPerformed[java.awt.event.ActionEvent], void, null, data>
<java.util.Vector, addElement[java.lang.Object], void, Track, actionPerformed[java.awt.event.ActionListener, java.lang.String], void, null, keyStrokes>
<java.util.Vector, clear[], void, Track, erase[], void, null, keyStrokes>
<java.util.Vector, addElement[java.lang.Object], void, KeystrokeRecorderPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenus>
<java.util.ArrayList, size[], int, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, v>
<java.util.ArrayList, get[int], java.lang.Object, HyperTyperAction, getInputHandlers[], java.util.Iterator, getTextAreas[], v>
<java.util.ArrayList, add[java.lang.Object], boolean, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, areaV>
<java.util.ArrayList, listIterator[], java.util.ListIterator, HyperTyperAction, getInputHandlers[], java.util.Iterator, null, areaV>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, menus>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, HyperTyperMapping, getExpandedText[java.lang.String], java.lang.String, null, translateMap>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, HyperTyperMapping, sequenceAdded[SequenceChangedEvent], void, null, translateMap>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, HyperTyperMapping, sequenceRemoved[SequenceChangedEvent], void, null, translateMap>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, addSequenceChangedListener[SequenceChangedListener], void, null, list>
<java.util.Vector, removeElement[java.lang.Object], boolean, HyperTyperSequenceList, removeSequenceChangedListener[SequenceChangedListener], void, null, listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, getSequenceCount[], int, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, getSequenceAt[int], Sequence, null, list>
<java.util.Vector, size[], int, HyperTyperSequenceList, save[], void, null, list>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, save[], void, null, list>
<java.util.Vector, size[], int, HyperTyperSequenceList, addMapping[Sequence], void, null, list>
<java.util.Vector, addElement[java.lang.Object], void, HyperTyperSequenceList, addMapping[Sequence], void, null, list>
<java.util.Vector, indexOf[java.lang.Object], int, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, list>
<java.util.Vector, removeElementAt[int], void, HyperTyperSequenceList, removeMapping[java.lang.String], void, null, list>
<java.util.Vector, size[], int, HyperTyperSequenceList, removeAllMappings[], void, null, list>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, removeAllMappings[], void, null, list>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, shutdown[], void, null, list>
<java.util.Vector, removeAllElements[], void, HyperTyperSequenceList, shutdown[], void, null, listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, null, listeners>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, fireSequenceAdded[Sequence, int], void, sequenceAdded[], listeners>
<java.util.Vector, size[], int, HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, null, listeners>
<java.util.Vector, elementAt[int], java.lang.Object, HyperTyperSequenceList, fireSequenceRemoved[Sequence, int], void, sequenceRemoved[], listeners>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, childRasterCache>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext.Gradient, getRaster[int, int, int], java.awt.image.Raster, null, childRasterCache>
<java.util.LinkedList, remove[java.lang.Object], boolean, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, add[int, java.lang.Object], void, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, size[], int, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.LinkedList, removeLast[], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, recentInfos>
<java.util.WeakHashMap, get[java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, gradientCache>
<java.util.WeakHashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, com.incors.plaf.FastGradientPaintContext, FastGradientPaintContext[java.awt.image.ColorModel, java.awt.Rectangle, int, int, boolean], void, null, gradientCache>
<java.util.Vector, addElement[java.lang.Object], void, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, size[], int, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, tempStacks>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, bracketBlockStateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, init[], void, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenStatementStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], parenStatementStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockParenDepthStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockStatementStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, indexOf[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, lastTempStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, lastElement[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, lastElement[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], inStatementIndentStackSizeStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, parenIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStackSizeStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, blockParenDepthStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, intValue[], blockParenDepthStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, booleanValue[], blockStatementStack>
<java.util.Stack, search[java.lang.Object], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, tempStacks>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, isEmpty[], tempStacks>
<java.util.Vector, removeAllElements[], void, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, removeAllElements[], tempStacks>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, peek())>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, push[java.lang.Object], tempStacks>
<java.util.Stack, pop[], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, size[], int, JSBeautifier, beautify[java.lang.String], java.lang.String, null, headerStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, beautify[java.lang.String], java.lang.String, null, inStatementIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, parenIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, parenIndentStack>
<java.util.Vector, isEmpty[], boolean, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.util.Stack, peek[], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, intValue[], inStatementIndentStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSBeautifier, registerInStatementIndent[java.lang.String, int, int, boolean, boolean], void, null, inStatementIndentStack>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, size[], int, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, get[int], java.lang.Object, UMLTree.Node, alphaSort[], void, null, children>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, UMLTree.Node, alphaSort[], void, null, methods>
<java.util.ArrayList, add[java.lang.Object], boolean, UMLTree.Node, alphaSort[], void, null, sortedList>
<java.util.Set, toArray[java.lang.Object[]], java.lang.Object[], UMLTree.Node, alphaSort[], void, null, keySet()>
<java.util.HashMap, keySet[], java.util.Set, UMLTree.Node, alphaSort[], void, toArray[java.lang.Object[]], methods>
<java.util.HashMap, size[], int, UMLTree.Node, alphaSort[], void, null, methods>
<java.util.ArrayList, add[java.lang.Object], boolean, UMLTree.Node, alphaSort[], void, null, sortedList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, UMLTree.Node, alphaSort[], void, null, methods>
<java.util.Vector, removeAllElements[], void, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, addAll[java.util.Collection], boolean, UMLTree.Node, alphaSort[], void, null, children>
<java.util.Vector, addElement[java.lang.Object], void, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<java.util.Vector, size[], int, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<java.util.Vector, copyInto[java.lang.Object[]], void, UMLTree.Node, getPathFrom[UMLTree.Node], javax.swing.tree.TreePath, null, pathList>
<java.util.Vector, size[], int, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, children>
<java.util.Vector, elementAt[int], java.lang.Object, UMLTree.Node, getVisibleIndex[Options.FilterIro], int, null, children>
<java.util.Vector, size[], int, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, children>
<java.util.Vector, elementAt[int], java.lang.Object, UMLTree.Node, getVisibleChildrenObject[Options.FilterIro], java.lang.Object[], null, children>
<java.util.Vector, addElement[java.lang.Object], void, UML.Operation, addArgument[java.lang.String, java.lang.String], void, null, argList>
<java.util.Vector, size[], int, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, null, argList>
<java.util.Vector, elementAt[int], java.lang.Object, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, toString[Options.DisplayIro], argList>
<java.util.Vector, elementAt[int], java.lang.Object, UML.Operation, listArgs[Options.DisplayIro], java.lang.String, toString[Options.DisplayIro], argList>
<java.util.Vector, add[java.lang.Object], boolean, InsertClassName, getClassArray[], BackStab[], null, workVector>
<java.util.Vector, toArray[java.lang.Object[]], java.lang.Object[], InsertClassName, getClassArray[], BackStab[], null, workVector>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, pop[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Stack, peek[], java.lang.Object, JBrowseLineParser, parse[], JBrowseParser.Results, null, nodeStack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ParseSubState, toString[], java.lang.String, null, prefTable>
<java.util.Vector, addElement[java.lang.Object], void, JSLineBreaker, breakLine[java.lang.String], void, null, brokenLineVector>
<java.util.Vector, isEmpty[], boolean, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, elementAt[int], java.lang.Object, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, breakLine[java.lang.String], void, null, lineBreakStack>
<java.util.Vector, isEmpty[], boolean, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Stack, peek[], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Stack, pop[], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSLineBreaker, registerLineBreak[java.util.Stack, JSLineBreaker.LineBreak], void, null, lineBreakStack>
<java.util.Vector, lastElement[], java.lang.Object, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.util.Vector, setElementAt[java.lang.Object, int], void, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.util.Vector, size[], int, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.util.Vector, addElement[java.lang.Object], void, JSLineBreaker, addBrokenLine[java.lang.String, java.lang.String, JSLineBreaker.LineBreak, int, boolean], void, null, brokenLineVector>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, prefTable>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSLineBreaker, compare[JSLineBreaker.LineBreak, JSLineBreaker.LineBreak], int, null, prefTable>
<java.util.Vector, size[], int, JSLineBreaker, hasMoreBrokenLines[], boolean, null, brokenLineVector>
<java.util.Vector, firstElement[], java.lang.Object, JSLineBreaker, nextBrokenLine[], java.lang.String, null, brokenLineVector>
<java.util.Vector, removeElementAt[int], void, JSLineBreaker, nextBrokenLine[], java.lang.String, null, brokenLineVector>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.util.Vector, size[], int, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, split[java.lang.String, java.lang.String], java.lang.String[], null, v>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, addClass[java.lang.String], void, null, packages>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, addClass[java.lang.String], void, null, packages>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, addClass[java.lang.String], void, null, pack>
<java.util.Vector, size[], int, ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, toSortedList[java.util.Vector], java.lang.String[], null, v>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, setClist[java.lang.String], void, null, packages>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<java.util.Vector, size[], int, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<java.util.Vector, copyInto[java.lang.Object[]], void, ClassBrowser, getPublicMethods[java.lang.reflect.Method[]], java.lang.reflect.Method[], null, v>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, init[], void, null, packages>
<java.util.Hashtable, keys[], java.util.Enumeration, ClassBrowser, init[], void, null, packages>
<java.util.Vector, addElement[java.lang.Object], void, ClassBrowser, init[], void, null, v>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ClassBrowser, driveToClass[java.lang.String], void, null, packages>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ClassBrowser, toFront[], void, null, closingHeaders>
<java.util.Vector, addElement[java.lang.Object], void, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, isEmpty[], boolean, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, size[], int, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Vector, elementAt[int], java.lang.Object, JSFormatter, main[java.lang.String[]], void, null, fileNameVector>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, init[], void, null, bracketBlockStateStack>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Vector, isEmpty[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, closingHeaders>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, peek[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, bracketBlockStateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, openingStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, null, parenDepthsStack>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, booleanValue[], bracketBlockStateStack>
<java.util.Vector, isEmpty[], boolean, JSFormatter, format[java.lang.String], java.lang.String, null, parenDepthsStack>
<java.util.Stack, pop[], java.lang.Object, JSFormatter, format[java.lang.String], java.lang.String, intValue[], parenDepthsStack>
<java.util.ArrayList, contains[java.lang.Object], boolean, TagsCompletion, unregisterTextArea[JextTextArea], void, null, registeredAreas>
<java.util.ArrayList, remove[java.lang.Object], boolean, TagsCompletion, unregisterTextArea[JextTextArea], void, null, registeredAreas>
<java.util.ArrayList, contains[java.lang.Object], boolean, TagsCompletion, registerTextArea[JextTextArea], void, null, registeredAreas>
<java.util.ArrayList, add[java.lang.Object], boolean, TagsCompletion, registerTextArea[JextTextArea], void, null, registeredAreas>
<java.util.Vector, size[], int, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, entitiesList>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, entitiesList>
<java.util.Vector, add[java.lang.Object], boolean, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, size[], int, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, clear[], void, TagsCompletion, buildEntitiesList[java.lang.String], Entity[], null, myTags>
<java.util.Vector, size[], int, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tagsList>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, tagsList>
<java.util.Vector, add[java.lang.Object], boolean, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, size[], int, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, get[int], java.lang.Object, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.Vector, clear[], void, TagsCompletion, buildTagsList[java.lang.String], Tag[], null, myTags>
<java.util.ArrayList, size[], int, Tag, attributesCount[], int, null, attributes>
<java.util.ArrayList, add[java.lang.Object], boolean, Tag, addAttribute[Attribute], void, null, attributes>
<java.util.ArrayList, size[], int, Tag, getOpeningTag[], java.lang.String, null, attributes>
<java.util.ArrayList, get[int], java.lang.Object, Tag, getOpeningTag[], java.lang.String, null, attributes>
<java.util.ArrayList, size[], int, Tag, getFullTag[], java.lang.String, null, attributes>
<java.util.ArrayList, get[int], java.lang.Object, Tag, getFullTag[], java.lang.String, null, attributes>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, ToAccents, doAccents[java.lang.String], java.lang.String, null, replace>
<java.util.Vector, add[java.lang.Object], boolean, FunnyBracketsPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<java.util.Vector, size[], int, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, functionsList>
<java.util.Vector, elementAt[int], java.lang.Object, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, functionsList>
<java.util.Vector, add[java.lang.Object], boolean, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.util.Vector, size[], int, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.util.Vector, get[int], java.lang.Object, PHPCompleteList, buildFunctionList[java.lang.String], PHPFunction[], null, listB>
<java.util.ArrayList, add[java.lang.Object], boolean, FindAll, findAll[], void, null, matches>
<java.util.Vector, add[java.lang.Object], boolean, FindAllPlugin, createMenuItems[JextFrame, java.util.Vector, java.util.Vector], void, null, pluginsMenuItems>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endDocument[], void, null, plugList>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endDocument[], void, null, mirrorList>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, PlugReader, attribute[java.lang.String, java.lang.String, boolean], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, deps>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, mirrorList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, startElement[java.lang.String], void, null, authors>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, PlugReader, startElement[java.lang.String], void, null, attribs>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endElement[java.lang.String], void, null, deps>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], PlugReader, endElement[java.lang.String], void, null, authors>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, plugList>
<java.util.ArrayList, clear[], void, PlugReader, endElement[java.lang.String], void, null, authors>
<java.util.ArrayList, clear[], void, PlugReader, endElement[java.lang.String], void, null, deps>
<java.util.ArrayList, add[java.lang.Object], boolean, PlugReader, endElement[java.lang.String], void, null, authors>
<java.util.HashMap, clear[], void, PlugReader, endElement[java.lang.String], void, null, attribs>
<java.util.ArrayList, size[], int, org.jext.misc.ZipExplorer.ZipTableModel, getRowCount[], int, null, zipContents>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.ZipExplorer.ZipTableModel, getValueAt[int, int], java.lang.Object, null, zipContents>
<java.util.ArrayList, size[], int, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.ArrayList, add[int, java.lang.Object], void, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.ZipExplorer.ZipTableModel, addZipEntry[java.util.zip.ZipEntry], void, null, zipContents>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, size[], int, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, size[], int, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.misc.FindAccessory.FindTabs, newFind[], org.jext.misc.FindFilter[], null, filters>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, save[], void, null, list>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, save[], void, null, list>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.Workspaces, addFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, remove[java.lang.Object], boolean, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, removeFile[org.jext.misc.JextTextArea], void, null, contents>
<java.util.ArrayList, clear[], void, org.jext.misc.Workspaces, clear[], void, null, contents>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, loadTextAreas[], void, null, a>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, loadTextAreas[], void, null, a>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, contents>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, list>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.Workspaces, valueChanged[javax.swing.event.ListSelectionEvent], void, null, list>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces.WorkspacesHandler, endElement[java.lang.String], void, null, contents>
<java.util.ArrayList, size[], int, org.jext.misc.Workspaces.WorkspaceElement, setSelectedIndex[int], void, null, contents>
<java.util.List, iterator[], java.util.Iterator, org.jext.misc.Workspaces.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.util.ArrayList, size[], int, org.jext.misc.VirtualFolders, notifyChanges[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.VirtualFolders, notifyChanges[], void, null, instances>
<java.util.List, iterator[], java.util.Iterator, org.jext.misc.VirtualFolders.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.util.ArrayList, size[], int, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, _plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.AboutPlugins, AboutPlugins[org.jext.misc.JextFrame], void, null, _plugins>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, _areas>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.misc.SaveDialog, SaveDialog[org.jext.misc.JextFrame, int], void, null, _areas>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<java.util.ArrayList, size[], int, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, c>
<java.util.ArrayList, toArray[], java.lang.Object[], org.jext.misc.SaveDialog, createTextAreasArray[], java.lang.Object[], null, areas>
<java.util.Set, iterator[], java.util.Iterator, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, null, entrySet()>
<java.util.Map, entrySet[], java.util.Set, org.jext.options.StyleTable.StyleTableModel, StyleTableModel[java.util.Map], void, iterator[], choices>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, getRowCount[], int, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, getValueAt[int, int], java.lang.Object, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, setValueAt[java.lang.Object, int, int], void, null, styleChoices>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, save[], void, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, save[], void, null, styleChoices>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, load[], void, null, styleChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.StyleTable.StyleTableModel, load[], void, resetStyle[], styleChoices>
<java.util.ArrayList, size[], int, org.jext.options.StyleTable.StyleTableModel, load[], void, null, styleChoices>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.StyleTable.StyleTableModel, addStyleChoice[java.lang.String, java.lang.String], void, null, styleChoices>
<java.util.Set, iterator[], java.util.Iterator, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, null, entrySet()>
<java.util.Map, entrySet[], java.util.Set, org.jext.options.ColorTable.ColorTableModel, ColorTableModel[java.util.Map], void, iterator[], choices>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, getRowCount[], int, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, getValueAt[int, int], java.lang.Object, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, setValueAt[java.lang.Object, int, int], void, null, colorChoices>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, save[], void, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, save[], void, null, colorChoices>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, load[], void, null, colorChoices>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.ColorTable.ColorTableModel, load[], void, resetColor[], colorChoices>
<java.util.ArrayList, size[], int, org.jext.options.ColorTable.ColorTableModel, load[], void, null, colorChoices>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.ColorTable.ColorTableModel, addColorChoice[java.lang.String, java.lang.String], void, null, colorChoices>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions, save[], void, null, filters>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions, save[], void, null, filters>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.FileFiltersOptions.FiltersTableModel, FiltersTableModel[], void, null, filters>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, getModeName[], modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, reload[], void, setFilter[java.lang.String], filters>
<java.util.ArrayList, size[], int, org.jext.options.FileFiltersOptions.FiltersTableModel, getRowCount[], int, null, filters>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, getValueAt[int, int], java.lang.Object, null, filters>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.FileFiltersOptions.FiltersTableModel, setValueAt[java.lang.Object, int, int], void, setFilter[java.lang.String], filters>
<java.util.HashMap, size[], int, org.jext.options.UIOptions, UIOptions[], void, null, skinList>
<java.util.HashMap, size[], int, org.jext.options.UIOptions, UIOptions[], void, null, skinList>
<java.util.Collection, iterator[], java.util.Iterator, org.jext.options.UIOptions, UIOptions[], void, null, values()>
<java.util.HashMap, values[], java.util.Collection, org.jext.options.UIOptions, UIOptions[], void, iterator[], skinList>
<java.util.ArrayList, size[], int, org.jext.options.UIOptions, updateUIs[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.UIOptions, updateUIs[], void, null, instances>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.options.KeyShortcutsOptions, KeyShortcutsOptions[], void, toString[], h>
<java.util.ArrayList, size[], int, org.jext.options.OptionsDialog, reloadStdPanes[], void, null, stdPanes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.options.OptionsDialog, reloadStdPanes[], void, load[], stdPanes>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, cachPlugPanes>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, notCachPlugPanes>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.options.OptionsDialog, reloadPluginPanes[], void, null, notCachPlugin>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, cachPlugPanes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, notCachPlugPanes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.options.OptionsDialog, addOptionPane[org.jext.options.OptionPane, org.jext.options.OptionGroup], void, null, notCachPlugin>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.scripting.python.Run, addPackage[java.lang.String], void, null, packageList>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.scripting.python.Run, buildPackageList[], void, null, packageList>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.scripting.python.Run, startupPythonInterpreter[org.jext.scripting.python.PythonInterpreter], void, null, packageList>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, pluginClasses>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, pluginsNames>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, classLoaders>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JARClassLoader, JARClassLoader[java.lang.String, boolean, java.lang.ClassLoader], void, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, initPlugins[], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, initPlugins[], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, getClassLoader[int], org.jext.JARClassLoader, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, getClassLoaderCount[], int, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, reloadPluginsProperties[], void, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, executeScripts[org.jext.JextFrame], void, null, classLoaders>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, loadAllPlugins[], void, null, pluginClasses>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, loadAllPlugins[], void, null, pluginClasses>
<java.util.ArrayList, size[], int, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, classLoaders>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JARClassLoader, findOtherClass[java.lang.String, boolean], java.lang.Class, null, classLoaders>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.JextLoader, run[], void, null, args>
<java.util.Vector, size[], int, org.jext.JextLoader, run[], void, null, args>
<java.util.Vector, size[], int, org.jext.JextLoader, run[], void, null, args>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.JextLoader, run[], void, null, args>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextLoader, run[], void, isVisible[], instances>
<java.util.ArrayList, size[], int, org.jext.JextLoader, run[], void, null, instances>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.util.ArrayList, size[], int, org.jext.Utilities, getWildCardMatches[java.lang.String, java.lang.String, boolean], java.lang.String[], null, filesThatMatchVector>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Mode, addPlugin[org.jext.Plugin], void, null, plugins>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, menuItemsActions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.GUIUtilities, loadMenuItem[java.lang.String, java.lang.String, java.lang.String, boolean, boolean], javax.swing.JMenuItem, null, menuItemsActions>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, addAction[org.jext.MenuAction], void, null, actionHash>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, addPythonAction[java.lang.String, java.lang.String, boolean], void, addKeyBinding[], pythonActionHash>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, null, actionHash>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.Jext, getAction[java.lang.String], org.jext.MenuAction, null, pythonActionHash>
<java.util.ArrayList, size[], int, org.jext.Jext, assocPluginsToModes[], void, null, plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, assocPluginsToModes[], void, null, plugins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addPlugin[org.jext.Plugin], void, null, plugins>
<java.util.ArrayList, size[], int, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, null, plugins>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, getPlugin[java.lang.String], org.jext.Plugin, null, plugins>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Jext, getPlugins[], org.jext.Plugin[], null, plugins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, newWindow[java.lang.String[], boolean], org.jext.JextFrame, null, instances>
<java.util.ArrayList, size[], int, org.jext.Jext, getWindowsCount[], int, null, instances>
<java.util.ArrayList, size[], int, org.jext.Jext, propertiesChanged[], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, propertiesChanged[], void, loadProperties[], instances>
<java.util.ArrayList, size[], int, org.jext.Jext, recentChanged[org.jext.JextFrame], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, recentChanged[org.jext.JextFrame], void, null, instances>
<java.util.Properties, store[java.io.OutputStream, java.lang.String], void, org.jext.Jext, saveProps[], void, null, props>
<java.util.Hashtable, keys[], java.util.Enumeration<java.lang.Object>, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, props>
<java.util.Hashtable, elements[], java.util.Enumeration<java.lang.Object>, org.jext.Jext, saveXMLProps[java.lang.String, java.lang.String], void, null, props>
<java.util.ArrayList, size[], int, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, null, languageEntries>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, languagePackContains[java.lang.String], java.util.zip.ZipEntry, null, languageEntries>
<java.util.Properties, load[java.io.InputStream], void, org.jext.Jext, loadProps[java.io.InputStream], void, null, props>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initProperties[], void, null, languageEntries>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, initProperties[], void, null, pyProps>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, initProperties[], void, null, getProperties()>
<java.util.ArrayList, size[], int, org.jext.Jext, sortModes[], void, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, getUserModeName[], modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, getUserModeName[], modes>
<java.util.ArrayList, size[], int, org.jext.Jext, sortModes[], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, sortModes[], void, null, v>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, sortModes[], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initModes[], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, initModes[], void, null, modesFileFilters>
<java.util.ArrayList, size[], int, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, null, modes>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.Jext, getMode[java.lang.String], org.jext.Mode, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addMode[org.jext.Mode], void, null, modes>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, addMode[org.jext.Mode], void, null, modesFileFilters>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, setProperty[java.lang.String, java.lang.String], void, null, props>
<java.util.Properties, getProperty[java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String], java.lang.String, null, props>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.String], java.lang.String, null, props>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, props>
<java.util.Properties, getProperty[java.lang.String, java.lang.String], java.lang.String, org.jext.Jext, getProperty[java.lang.String, java.lang.Object[]], java.lang.String, null, props>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, defaultProps>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, props>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.Jext, unsetProperty[java.lang.String], void, null, props>
<java.util.ArrayList, toArray[], java.lang.Object[], org.jext.Jext, exit[], void, null, instances>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, newArgs>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.Jext, parseOptions[java.lang.String[]], java.lang.String[], null, newArgs>
<java.util.HashMap, remove[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, removeTitle[int, java.lang.String], void, null, fileNames>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, setIndexedTitle[java.lang.String], void, null, fileNames>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextTabbedPane, getIndexedTitle[java.lang.String], java.lang.String, null, fileNames>
<java.util.HashMap, clear[], void, org.jext.JextTabbedPane, removeAll[], void, null, fileNames>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Vector, size[], int, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Vector, get[int], java.lang.Object, org.jext.print.PrintText, wrapText[], java.lang.String[], null, temp>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XBarHandler, startElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XBarHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XBarHandler, startDocument[], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XMenuHandler, startElement[java.lang.String], void, null, stateStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XMenuHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XMenuHandler, startDocument[], void, null, stateStack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.xml.XPropertiesHandler, endElement[java.lang.String], void, null, props>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XPopupHandler, startElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, add[javax.swing.JMenuItem], stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XPopupHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XPopupHandler, startDocument[], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, charData[char[], int, int], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XInsertHandler, startElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xml.XInsertHandler, endElement[java.lang.String], void, null, stateStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xml.XInsertHandler, startDocument[], void, null, stateStack>
<java.util.ArrayList, size[], int, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, null, matches>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.search.SearchHighlight, paintHighlight[java.awt.Graphics, int, int], void, getPos[], matches>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.search.FindAllDialog, findAll[], void, null, matches>
<java.util.Vector, add[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, addProjectListener[org.jext.project.ProjectListener], void, null, listeners>
<java.util.Vector, remove[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, removeProjectListener[org.jext.project.ProjectListener], void, null, listeners>
<java.util.Vector, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.ArrayList, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<java.util.Vector, size[], int, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.ArrayList, contains[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, doneListeners>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.AbstractProjectManager, fireProjectEvent[org.jext.project.ProjectEvent], void, null, listeners>
<java.util.Vector, add[int, java.lang.Object], void, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, projectNames>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, java.lang.Object, intervalAdded[javax.swing.event.ListDataEvent], void, null, projects>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, projects>
<java.util.Vector, remove[int], java.lang.Object, java.lang.Object, intervalRemoved[javax.swing.event.ListDataEvent], void, null, projectNames>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, tempNames>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, tempProjects>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Vector, removeAll[java.util.Collection], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Vector, iterator[], java.util.Iterator, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Vector, remove[int], java.lang.Object, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Hashtable, clear[], void, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Vector, addAll[java.util.Collection], boolean, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projectNames>
<java.util.Hashtable, putAll[java.util.Map], void, org.jext.project.DefaultProjectManager, loadFromWorkspaces[], void, null, projects>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, setCurrentProjectFromWorkspace[], void, null, projects>
<java.util.Vector, size[], int, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projectNames>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projects>
<java.util.Vector, get[int], java.lang.Object, org.jext.project.DefaultProjectManager, getProjects[], org.jext.project.Project[], null, projectNames>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.ArrayList, size[], int, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.project.DefaultProjectManager.DefaultProject, getFiles[], java.io.File[], null, list>
<java.util.Map, get[java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, getAttribute[java.lang.String], java.lang.Object, null, attributes>
<java.util.Map, get[java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, getAttributeAsString[java.lang.String], java.lang.String, null, attributes>
<java.util.Map, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.project.AbstractProject, setAttribute[java.lang.String, java.lang.Object], void, null, attributes>
<java.util.Stack, empty[], boolean, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<java.util.Stack, peek[], java.lang.Object, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.xinsert.XTree, addMenu[java.lang.String, java.lang.String], void, null, menuStack>
<java.util.Stack, pop[], java.lang.Object, org.jext.xinsert.XTree, closeMenu[], void, null, menuStack>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, inserts>
<java.util.Vector, size[], int, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, inserts>
<java.util.Stack, peek[], java.lang.Object, org.jext.xinsert.XTree, addInsert[java.lang.String, java.lang.String, int], void, null, menuStack>
<java.util.ArrayList, size[], int, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, instances>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.xinsert.XTree, actionPerformed[java.awt.event.ActionEvent], void, null, instances>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.xinsert.XTree, insert[int], void, null, inserts>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.xinsert.XTree.XTreeCellRenderer, getTreeCellRendererComponent[javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean], java.awt.Component, getType[], inserts>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, toArray[java.lang.Object[]], java.lang.Object[], org.jext.gui.BundledSkinFactory, getSkins[], org.jext.gui.Skin[], null, skins>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.BundledSkinFactory, addSkinIfPresent[java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String], boolean, null, skins>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, addOptionGroup[org.jext.gui.OptionGroup], void, null, members>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.OptionGroup, addOptionGroup[org.jext.gui.OptionGroup], void, null, members>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, addOptionPane[org.jext.gui.OptionPane], void, null, members>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.gui.OptionGroup, addOptionPane[org.jext.gui.OptionPane], void, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, getMember[int], java.lang.Object, null, members>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.gui.OptionGroup, getMember[int], java.lang.Object, null, members>
<java.util.ArrayList, indexOf[java.lang.Object], int, org.jext.gui.OptionGroup, getMemberIndex[java.lang.Object], int, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, getMemberCount[], int, null, members>
<java.util.ArrayList, size[], int, org.jext.gui.OptionGroup, save[], void, null, members>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.gui.OptionGroup, save[], void, null, members>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<java.util.Vector, size[], int, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.gui.FontSelector, getAvailableFontFamilyNames[], java.lang.String[], null, nameVector>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, registerSkinFactory[org.jext.gui.SkinFactory], void, null, skinList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, skinList>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.gui.SkinManager, applySelectedSkin[], boolean, null, skinList>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.util.Vector, size[], int, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.gui.SplashScreen, createClassesList[], void, null, buf>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, actionPerformed[java.awt.event.ActionEvent], void, null, tokens>
<java.util.HashMap, containsKey[java.lang.Object], boolean, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, tokens>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, addTokensFromInput[org.jext.actions.JextFrame, java.lang.String, java.util.HashMap], void, null, tokens>
<java.util.Set, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, keySet()>
<java.util.HashMap, keySet[], java.util.Set, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, toArray[java.lang.Object[]], tokens>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, tokens>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.actions.CreateTemplate, replace[java.lang.String, java.util.HashMap], java.lang.String, null, tokens>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, iterator[], java.util.Iterator, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.AbstractCollection, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWordAll, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, add[java.lang.Object], boolean, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, iterator[], java.util.Iterator, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.AbstractCollection, toArray[java.lang.Object[]], java.lang.Object[], org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, size[], int, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.TreeSet, first[], java.lang.Object, org.jext.actions.CompleteWord, actionPerformed[java.awt.event.ActionEvent], void, null, completions>
<java.util.Hashtable, containsKey[java.lang.Object], boolean, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addIdentifiedMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addMenu[javax.swing.JMenu, java.lang.String], void, null, menus>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.menus.JextMenuBar, addMenuItem[javax.swing.JMenuItem, java.lang.String], void, null, menus>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JextFrame, itemAdded[java.awt.Component], void, null, transientItems>
<java.util.ArrayList, size[], int, org.jext.JextFrame, reset[], void, null, transientItems>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextFrame, reset[], void, null, transientItems>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.JextFrame, fireJextEvent[int], void, null, jextListeners>
<java.util.ArrayList, iterator[], java.util.Iterator, org.jext.JextFrame, fireJextEvent[org.jext.JextTextArea, int], void, next[], jextListeners>
<java.util.ArrayList, clear[], void, org.jext.JextFrame, removeAllJextListeners[], void, null, jextListeners>
<java.util.ArrayList, add[java.lang.Object], boolean, org.jext.JextFrame, addJextListener[org.jext.JextListener], void, null, jextListeners>
<java.util.ArrayList, remove[java.lang.Object], boolean, org.jext.JextFrame, removeJextListener[org.jext.JextListener], void, null, jextListeners>
<java.util.Vector, size[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenus>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenus>
<java.util.Vector, size[], int, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenuItems>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.JextFrame, updatePluginsMenu[], void, null, _pluginsMenuItems>
<java.util.Collection, iterator[], java.util.Iterator, org.jext.JextFrame, closeToQuit[], void, null, values()>
<java.util.HashMap, values[], java.util.Collection, org.jext.JextFrame, closeToQuit[], void, iterator[], projectMgmts>
<java.util.ArrayList, clear[], void, org.jext.JextFrame, cleanMemory[], void, null, transientItems>
<java.util.HashMap, containsKey[java.lang.Object], boolean, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, projectMgmts>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, null, projectMgmts>
<java.util.HashMap, get[java.lang.Object], java.lang.Object, org.jext.JextFrame, selectProjectManagement[java.lang.String], boolean, getProjectManager[], projectMgmts>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<java.util.Vector, size[], int, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.JextFrame, getTextAreas[], org.jext.JextTextArea[], null, _v>
<java.util.HashMap, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.JextFrame, addProjectManagement[org.jext.ProjectManagement], void, null, projectMgmts>
<java.util.ArrayList, size[], int, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, plugins_>
<java.util.ArrayList, get[int], java.lang.Object, org.jext.JextFrame.PluginHandler, jextEventFired[org.jext.JextEvent], void, null, plugins_>
<java.util.List, iterator[], java.util.Iterator, org.jext.JextFrame.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.util.Hashtable, keys[], java.util.Enumeration, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, hash>
<java.util.Hashtable, size[], int, org.jext.dawn.util.HelpFunction, invoke[org.jext.dawn.util.DawnParser], void, null, hash>
<java.util.Vector, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, installedPackages>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, getRuntimeFunctions())>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.DawnParser, installPackage[java.lang.Class, java.lang.String, org.jext.dawn.DawnParser], void, null, (parser == null ? installedPackages : installedRuntimePackages)>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, copyInto[java.lang.Object[]], void, org.jext.dawn.DawnParser, getClasses[java.lang.Class, java.lang.String], java.lang.String[], null, buf>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, checkArgsNumber[org.jext.dawn.Function, int], void, null, stack>
<java.util.Vector, isEmpty[], boolean, org.jext.dawn.DawnParser, checkEmpty[org.jext.dawn.Function], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, checkLevel[org.jext.dawn.Function, int], void, null, stack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setProperty[java.lang.Object, java.lang.Object], void, null, properties>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getProperty[java.lang.Object], java.lang.Object, null, properties>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, unsetProperty[java.lang.Object], void, null, properties>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, stack>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, runtimeFunctions>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, stack>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, runtimeFunctions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, exec[], void, null, functions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getVariable[java.lang.String], java.lang.Object, null, variables>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, getVariable[java.lang.String], java.lang.Object, null, runtimeVariables>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeVariables>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, functions>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeFunctions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setVariable[java.lang.String, java.lang.Object], void, null, runtimeVariables>
<java.util.Hashtable, remove[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, variables>
<java.util.Hashtable, contains[java.lang.Object], boolean, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, functions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, setGlobalVariable[java.lang.String, java.lang.Object], void, null, variables>
<java.util.Hashtable, clear[], void, org.jext.dawn.DawnParser, clearGlobalVariables[], void, null, variables>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.DawnParser, dump[], java.lang.String, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.DawnParser, dump[], java.lang.String, null, ((Vector)o)>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popNumber[], double, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekNumber[], double, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushNumber[double], void, null, stack>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popString[], java.lang.String, toString[], stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekString[], java.lang.String, toString[], stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushString[java.lang.String], void, null, stack>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, popArray[], java.util.Vector, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peekArray[], java.util.Vector, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, pushArray[java.util.Vector], void, null, stack>
<java.util.Stack, pop[], java.lang.Object, org.jext.dawn.DawnParser, pop[], java.lang.Object, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, peek[], java.lang.Object, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, push[java.lang.Object], void, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopNumeric[], boolean, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopString[], boolean, null, stack>
<java.util.Stack, peek[], java.lang.Object, org.jext.dawn.DawnParser, isTopArray[], boolean, null, stack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, addGlobalFunction[org.jext.dawn.Function], void, null, functions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, addRuntimeFunction[org.jext.dawn.Function], void, null, runtimeFunctions>
<java.util.Hashtable, clone[], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<java.util.Hashtable, keys[], java.util.Enumeration, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, runtimeVariables>
<java.util.Hashtable, clone[], java.lang.Object, org.jext.dawn.Function, invoke[org.jext.dawn.DawnParser], void, null, _variables>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, createGlobalFunction[java.lang.String, java.lang.String], void, null, functions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.dawn.DawnParser, createRuntimeFunction[java.lang.String, java.lang.String], void, null, runtimeFunctions>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.array.ElementsFunction, invoke[org.jext.dawn.array.DawnParser], void, null, v>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.PickFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, setElementAt[java.lang.Object, int], void, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.DupnFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, removeAllElements[], void, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.dawn.stack.ReverseFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, lastElement[], java.lang.Object, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, setElementAt[java.lang.Object, int], void, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Vector, size[], int, org.jext.dawn.stack.RollDownFunction, invoke[org.jext.dawn.stack.DawnParser], void, null, stack>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.ConsoleListDir, list[org.jext.console.Console, java.lang.String], void, null, getProperties()>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.ConsoleListDir, run[int], void, null, getProperties()>
<java.util.Vector, indexOf[java.lang.Object], int, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, removeElementAt[int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, insertElementAt[java.lang.Object, int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, removeElementAt[int], void, org.jext.console.HistoryModel, addItem[java.lang.String], void, null, data>
<java.util.Vector, elementAt[int], java.lang.Object, org.jext.console.HistoryModel, getItem[int], java.lang.String, null, data>
<java.util.Vector, size[], int, org.jext.console.HistoryModel, getSize[], int, null, data>
<java.util.Vector, addElement[java.lang.Object], void, org.jext.console.HistoryModel, addItemToEnd[java.lang.String], void, null, data>
<java.util.List, iterator[], java.util.Iterator, org.jext.console.ConsoleTextPane.DnDHandler, drop[java.awt.dnd.DropTargetDropEvent], void, null, getTransferData(flavors[i]))>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.commands.HomeCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getProperties()>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.jext.console.commands.ChangeDirCommand, handleCommand[org.jext.console.commands.Console, java.lang.String], boolean, null, getProperties()>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, addKeyBinding[java.lang.String, java.awt.event.ActionListener], void, null, current>
<java.util.Hashtable, clear[], void, org.gjt.sp.jedit.textarea.DefaultInputHandler, removeAllKeyBindings[], void, null, bindings>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, currentBindings>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyPressed[java.awt.event.KeyEvent], void, null, currentBindings>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, keyTyped[java.awt.event.KeyEvent], void, null, currentBindings>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.DefaultInputHandler, parseKeyStroke[java.lang.String], javax.swing.KeyStroke, null, actions>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.textarea.InputHandler, getAction[java.lang.String], java.awt.event.ActionListener, null, actions>
<java.util.Hashtable, keys[], java.util.Enumeration, org.gjt.sp.jedit.textarea.InputHandler, getActions[], java.util.Enumeration, null, actions>
<java.util.ArrayList, add[int, java.lang.Object], void, org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, null, tokenList>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, getTokenList[org.gjt.sp.jedit.textarea.Token, int], java.util.ArrayList, null, tokenList>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.ArrayList, get[int], java.lang.Object, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.ArrayList, size[], int, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.ArrayList, get[int], java.lang.Object, org.gjt.sp.jedit.textarea.TextUtilities, findMatchingBracket[org.gjt.sp.jedit.textarea.SyntaxDocument, int], int, null, tokenList>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, peek[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, markTokensImpl[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], org.gjt.sp.jedit.syntax.MultiModeToken, null, modes>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doASP[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<java.util.Stack, push[java.lang.Object], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScript[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<java.util.Stack, empty[], boolean, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<java.util.Stack, pop[], java.lang.Object, org.gjt.sp.jedit.syntax.ASPTokenMarker, doScriptClose[org.gjt.sp.jedit.syntax.MultiModeToken, org.gjt.sp.jedit.syntax.TokenMarkerContext], boolean, null, modes>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, trimToSize[], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, options>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<java.util.Vector, trimToSize[], void, gnu.regexp.RE, initialize[java.lang.Object, int, gnu.regexp.RESyntax, int, int], void, null, branches>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<java.util.Vector, size[], int, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<java.util.Vector, copyInto[java.lang.Object[]], void, gnu.regexp.RE, getAllMatchesImpl[gnu.regexp.CharIndexed, int, int], gnu.regexp.REMatch[], null, all>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, size[], int, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenRepeated, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, positions>
<java.util.Vector, addElement[java.lang.Object], void, gnu.regexp.RETokenOneOf, RETokenOneOf[int, java.lang.String, boolean, boolean], void, null, options>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, getMinimumLength[], int, null, options>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, getMinimumLength[], int, getMinimumLength[], options>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, options>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, match[gnu.regexp.CharIndexed, gnu.regexp.REMatch], boolean, null, options>
<java.util.Vector, size[], int, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, null, options>
<java.util.Vector, elementAt[int], java.lang.Object, gnu.regexp.RETokenOneOf, dump[java.lang.StringBuffer], void, dumpAll[], options>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, doParse[java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String], void, null, attributeTypeHash>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, readAttType[], int, null, attributeTypeHash>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredElements[], java.util.Enumeration, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementContentType[java.lang.String], int, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementContentModel[java.lang.String], java.lang.String, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, elementInfo>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setElement[java.lang.String, int, java.lang.String, java.util.Hashtable], void, null, elementInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getElementAttributes[java.lang.String], java.util.Hashtable, null, elementInfo>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredAttributes[java.lang.String], java.util.Enumeration, null, attlist>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, attlist>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setAttribute[java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int], void, null, attlist>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getAttribute[java.lang.String, java.lang.String], java.lang.Object[], null, attlist>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredEntities[], java.util.Enumeration, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityType[java.lang.String], int, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityPublicId[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntitySystemId[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityValue[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getEntityNotationName[java.lang.String], java.lang.String, null, entityInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, null, entityInfo>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setEntity[java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String], void, null, entityInfo>
<java.util.Hashtable, keys[], java.util.Enumeration, com.microstar.xml.XmlParser, declaredNotations[], java.util.Enumeration, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getNotationPublicId[java.lang.String], java.lang.String, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, getNotationSystemId[java.lang.String], java.lang.String, null, notationInfo>
<java.util.Hashtable, get[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, null, notationInfo>
<java.util.Hashtable, put[java.lang.Object, java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, setNotation[java.lang.String, java.lang.String, java.lang.String], void, null, notationInfo>
<java.util.Vector, size[], int, com.microstar.xml.XmlParser, tryEncodingDecl[boolean], void, null, inputStack>
<java.util.Vector, elements[], java.util.Enumeration, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entityStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, entityStack>
<java.util.Stack, push[java.lang.Object], java.lang.Object, com.microstar.xml.XmlParser, pushInput[java.lang.String], void, null, inputStack>
<java.util.Vector, isEmpty[], boolean, com.microstar.xml.XmlParser, popInput[], void, null, inputStack>
<java.util.Stack, pop[], java.lang.Object, com.microstar.xml.XmlParser, popInput[], void, null, inputStack>
<java.util.Stack, pop[], java.lang.Object, com.microstar.xml.XmlParser, popInput[], void, null, entityStack>


Calls candidatas(0)



Quebram o confinamento(0)

