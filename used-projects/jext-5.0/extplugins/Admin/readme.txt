This file contains general instructions about managing of plugins.

1. Where we are
The project is hosted at http://sourceforge.net/projects/jext-plugins, and the Jext one
is hosted at http://sourceforge.net/projects/jext and on www.jext.org. Since the two projects are closely related, post any question to the jext mailing list, jext-devel@lists.sourceforge.net, (it should be public but I don't know; however you should subscribe anyway), or to me, blaisorblade (at) users.sourceforge.net.
If anything is not clear in this docs, ask to me, and I'll make them clearer. Currently I'm sorry because I've not had a lot of time. See that I'm not the maintainer of all plugins(currently only of the SkinLF and JSwat plugins) so ask first to the maintainer of each one if you have any problems with one of them/want to suggest something(in the second case, you could post also on the Jext-ML).

2. To write your plugin
See the docs in jext to write it; create a folder under extplugins named as your plugin and use ant with the targets listed below to build, pack and so on it. Ask CVS write access if you can use CVS and want to use the cvs tasks.
To make ant work well, the sources should either be directly under the plugin dir or under the src subdir. Obviously if they include a package you must add package subdirs, such as org.jext -> org/jext.

3. Packaging details
If it uses external libraries, you can either put a .jar in the plugin root, which the user will have to add to the classpath, or create a classes dir in the plugin root with the expanded content of the jar. Any file put there will be included in the jar.
Also, in the jar you will have all classes generated by sources(files under etc are ignored) and all files with the following extensions:
*.gif,*.png,*.jpg,*.jpeg,*.xml,*.properties*,*.props
from the plugin directory and all its subdirectories. Everything under "resources" folder will be included too. If you think that this is a bit complicated, I agree and will clean up it. For now, simply place sources in plugin root or src, images and such things together with the sources, and library classes under classes folder. If your plugin doesn't load files well, open the jar file with WinZIP or Jext(it can navigate ZIP/JAR files,nice, isn't it?) and check the directory structure created.

NOTE: place the .props.xml files in the root dir of your plugin. Doing otherwise has caused problems with translations.

3. How it works
You should create under <Jext dir> a folder named extplugins and place the Admin folder and the plugins you want from
cvs.sourceforge.net:/cvsroot/jext-plugins
there.
The Admin module(top-level folders are named modules in CVS) must be under it, but either make a symlink to the buildfiles(that is *.xml) in it in the parent dir(from Linux) or copy them at every update if you are on Windows.
For Linux(in extplugins folder):
  $ ln -s Admin/*.xml
will create correct symlinks.
In fact the build.xml file assumes to be under extplugins.

The buildfile has been tested under ant 1.5 and requires it: it doesn't work under ant1.4.
You must invoke ant this way:
ant -Dplugin=PluginName <target(s)>
for instance:
ant -Dplugin=SkinLF install
where PluginName is the directory under extplugins with the plugin you mean inside.
To invoke a target for all plugins, use this command:
ant -f buildall.xml <target(s)>
Note you need to install ant-contrib for this. Simply copy ant-contrib-0.1.jar into <Ant home folder>\lib.
Note that all cyclic targets skip the Admin folder, except for the CVS ones.

If you don't specify the target, the default one is installdebug: your plugin will be compiled in debug mode and installed.
To add debug info to classes, running ant with one of the debug targets is not enough. If the classes have already been compiled it will see everything is done and won't recompile them, so you need to run the clean target to delete old class files:
ant -Dplugin=<PlugName> clean installdebug
(If compiledebug/jardebug is called then compile/jar won't comply and will leave there debug info, but won't put them when recompiling).

Here there is the list of ant targets and their description:

compile  	compiles everything into <PluginName>/build
jar  		packs it together with anything in the dir, except for: .java and .jar files, the etc 
		dir and any .txt file; so place any file that mustn't be packed in the jar file in 
		this folder.
compiledebug  	compiles with debug info
jardebug 	same as jar but calls compiledebug instead of call
install  	copy the jar into ../bin/plugins so Jext sees it
installdebug  	same as install but calls jardebug instead of jar
dist  		prepares a source/binary distro, both .tar.gz and .zip, placed into extplugins/packs.
		To deploy the plugin you must send to us this file, although we hope to write an
		automated deployment way(but this is vaporware now!).
bindist  	prepares a binary distro, with only the .jar and the files you list inside
		<yourplugin>/bindist.list(one pattern, even wildcard, per line). It is packed only as
		.zip file
clean		removes the built files, that is all the build/ folder and the plugin jar inside the
		plugin directory(doesn't touch other jars).
cvsimport       put the plugin as a module into the CVS repository. You need write access to CVS;
		after this, the original folder is moved away and you must do a checkout(this is
		CVS fault, not of the script). The build folder and the packed jar are not inserted 
checkout	does a checkout of the named plugin-that is downloads for the first time its sources
		from the CVS repository. It is safe to rerun it after the first time, and downloads
		only changed parts of files. However this task is not supplied in buildall.xml.
update		does a CVS update. That is, download only the changed parts of files. To do an update of all
                modules, the only need is to run ant updateall, which invokes update in the extplugins
                directory; cvs itself goes into subdirectories and uploads them.

Note: every target calls by itself the other ones needed for it, so install will call also jar that will call compile and so on.

Note for cvs targets: 
1) you must have the command line cvs client installed(on linux search for it in your distro's CD, on Windows search on Internet, I don't have the address handy).
2) in the build.properties file you need to put as CvsRoot the correct value.
For instance, for anonymous access:
CvsRoot=:pserver:anonymous@cvs.sourceforge.net:/cvsroot/jext-plugins
or for read-write access(you must obtain it from one of the project administrators on SourceForge.net):
CvsRoot=:ext:<your sourceforge.net user name>@cvs.sourceforge.net:/cvsroot/jext-plugins

Hope this helps
written by Blaisorblade (e-mail: blaisorblade (at) users.sourceforge.net).
