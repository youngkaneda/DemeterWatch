#! /bin/sh

# This script launches Jext, the Java text editor.
# It checks for a $HOME/.jext directory and eventually creates it.
# Next it checks for a /etc/jextrc and $JEXT_CONFFILE (~/.jext/variables) files which define the JEXT_HOME JAVA_CMD JAVA_OPT CLASSPATH and ToShow variables. The first is system wide(used in RPM install mainly), the second is per user.
# If this file doesn't exist the script creates it by asking the options to the user.

# Sharpshooter 23/02/2002
# Blaisorblade 18/11/2002

#For special cases about different config files(for developers with working
#copy and an unstable one to be tested).
if [ "$JEXT_CONFFILE" = "" ]
then
	JEXT_CONFFILE=~/.jext/variables
fi

# Help
if  [ "$1" = "--help" -o "$1" = "-h" ]
then
	echo "This script launch Jext the Java text editor."
	echo "Usage : $0 [--reconf] [files]"
	echo "--reconf 		doesn't start jext but clears the"
	echo "			$JEXT_CONFFILE file with the settings to start jext"
	echo "			(jext & java location and jext options)."
	exit 0
fi

if [ "$1" = "--reconf" ]
then
	echo "Clearing $JEXT_CONFFILE, you'll have to reenter jext & java \
interpreter location"
	rm -f "$JEXT_CONFFILE"
	exit 0
fi


# Check for the user's ~/.jext directory.
if ! [ -d ~/.jext ]
then
	echo "It seems you don't have a .jext directory in your home dir."
	echo "I create it."
	echo
	mkdir -p ~/.jext/xinsert
fi



# Check for the $HOME/.jext/variables file.
if ! [ -f $JEXT_CONFFILE -o -f /etc/jextrc ]
then
	#Let's add some explaination in the config file.
	cat >$JEXT_CONFFILE <<EOM
#This is included when launching Jext. It is a normal shell script \
used to define env vars
#Meanings of settings:
#JEXT_HOME The home dir of jext(under which it finds the lib and so on dirs)
#JAVA_CMD The complete path for the java command
#JAVA_OPT The options to be passed to the java command(not to Jext itself!)
#CLASSPATH The extra classpath to be specified(for cases such as AntWork plugin)
#ToShow If this is set to y the output is not redirected to /dev/null;
# Mainly for developers who want to trace Jext output(you could also use
# the DickTracy plugin).
EOM
	echo "Now you have to define some options..."
	echo "To modify them later, edit the $JEXT_CONFFILE file"
	echo
#----
	echo "Please enter the path to jext [default /usr/local/jext]:"
	read JEXT_HOME
	if [ "$JEXT_HOME" = "" ]
	then
		JEXT_HOME="/usr/local/jext"
	fi
	echo "JEXT_HOME="$JEXT_HOME >> $JEXT_CONFFILE
#----
	if [ "$JAVA_HOME" = "" ]; then
		JAVA_HOME=/usr/local/java
	fi
	DEFAULT_JAVA_CMD=$JAVA_HOME/bin/java
	echo 
	echo "Please enter the path to the java command [default $DEFAULT_JAVA_CMD]; if it is in the path, you can enter only java:"
	read JAVA_CMD
	if [ "$JAVA_CMD" = "" ]
	then
		JAVA_CMD=$DEFAULT_JAVA_CMD
	fi
	echo "JAVA_CMD="$JAVA_CMD >>$JEXT_CONFFILE
#----
	echo 
	echo "Please enter the options for the java command [default -Xms48m, use a space to specify empty]:"
	read JAVA_OPT
	if [ "$JAVA_OPT" = "" ]
	then
		JAVA_OPT=-Xms48m
	fi
	echo "JAVA_OPT="$JAVA_OPT >>$JEXT_CONFFILE
#----
	echo
	echo "Please enter the extra classpath for the java command [default none]:"
	read CLASSPATH
	echo "CLASSPATH="$CLASSPATH>>$JEXT_CONFFILE
#----
	echo
	echo "Do you want to see the jext output (y) or to hide it by sending to /dev/null(n)? [default n, that is hide]"
	read ToShow
	if [ '$ToShow' = 'n' ]
	then
		ToShow=
	fi
	echo "ToShow="$ToShow>>$JEXT_CONFFILE
        echo \
"#If you uncomment the line below Jext classes will be loaded from
#$JEXT_HOME/build instead that from jars; useful for developers to save
#rejarring time for every little change. Plugins are still loaded from their
#jars(this cannot be changed)">>$JEXT_CONFFILE
        echo "#FromBuildFolder=y">>$JEXT_CONFFILE
fi

# Extract the contents of the $JEXT_CONFFILE file.
[ -f /etc/jextrc ] && source /etc/jextrc
[ -f $JEXT_CONFFILE ] && source $JEXT_CONFFILE

#JEXT_HOME=`grep JEXT_HOME $JEXT_CONFFILE | cut -f2 -d=`
#JAVA_CMD=`grep JAVA_CMD $JEXT_CONFFILE | cut -f2 -d=`
#JAVA_OPT=`grep JAVA_OPT $JEXT_CONFFILE | cut -f2 -d=`
#CLASSPATH=`grep CLASSPATH $JEXT_CONFFILE | cut -f2 -d=`

#Needed to make Jext find his plugins(it searches them in `pwd`/plugins)
for i in $@
do
  if [ "${i:0:1}" != "/" -a "${i:0:1}" != "-" ]; then #If the first char of $i is not a / then
    files="$files `pwd`/$i"      #it is a relative path so we must make it absolute.
  elif [ "$i" != "-" ]; then
    files="$files $i"
  else
    case "$i" in
      --reconf|--help|-h)
      ;;
      *)
        files="$files $i"
      ;;
    esac
  fi
done

if [ -d "$JEXT_HOME/bin" ]
then
  cd "$JEXT_HOME/bin"
else
  echo The jext path provided is invalid. Provide another please.
  echo This script will now exit.
  rm -f "$JEXT_CONFFILE"
  exit 1
fi

#Add initial path separator only if there is an extra classpath
if [ "$CLASSPATH" != "" ]
then
	CLASSPATH=":$CLASSPATH"
fi

JextCPath="$JEXT_HOME/lib/dawn-@DAWN-VERSION@.jar":"$JEXT_HOME/lib/jext-@VERSION@.jar:"$JEXT_HOME/lib/looks-@LOOKS-VERSION@.jar:"$JEXT_HOME/lib/jython-@JYTHON@.jar"
if [ "$FromBuildFolder" = "y" ]
then
	JextCPath="$JEXT_HOME/build"
fi

for i in $JEXT_HOME/lib/*.jar
do
  case "$i" in
    "$JEXT_HOME/lib/jext-@VERSION@.jar" | "$JEXT_HOME/lib/dawn-@DAWN-VERSION@.jar" | "$JEXT_HOME/lib/looks-@LOOKS-VERSION@.jar" | "$JEXT_HOME/lib/jython-@JYTHON-VERSION@.jar" );;
    *) CLASSPATH=":$i$CLASSPATH";;
  esac
done
CLASSPATH="$JextCPath$CLASSPATH"

# Export the libs. It reads also in the home for downloaded plugins.
if [ -n "${LD_LIBRARY_PATH}" ]; then
  prefix="${LD_LIBRARY_PATH}:"
else
  unset prefix
fi
export LD_LIBRARY_PATH="${prefix}${JEXT_HOME}/lib:~/.jext/lib"

# Launch JEXT
if [ "$ToShow" = "y" ]
then
	exec "$JAVA_CMD" $JAVA_OPT -Dpython.path=$JEXT_HOME/lib/Lib -classpath $CLASSPATH org.jext.Jext $files & 
else
	exec "$JAVA_CMD" $JAVA_OPT -Dpython.path=$JEXT_HOME/lib/Lib -classpath $CLASSPATH org.jext.Jext $files >/dev/null 2>&1 & 
fi

