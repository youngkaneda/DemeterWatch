
# classes in the freecs.auth.* package that are used for authentication
# if several classes are started (comma separated) the resulting user object
# of the first class is passed to the second so that further properties can be
# loaded. validation of username/password is done only once.
#
# note that SQLAuthenticator and XmlRpcAuthenticator require further configuration
# by default the class NoAuthentication is used.

# authenticators = XmlRpcAuthenticator, SQLAuthenticator

#
# global authentication-properties
#

# username-regex is the pattern, which must be matched to be a valid username
# - default:
# usernameRegex=^[a-z[A-Z[0-9[‰ˆ¸ƒ÷‹ﬂ]]]]+$

# if set to true logins aren't validated against an Authenticator
# allowUnregisteredUsers=false

#
# properties for authentication via sql
#

# the jdbc driver
SQLAuthenticator.driver 		= org.gjt.mm.mysql.Driver

# the database url to connect to
SQLAuthenticator.url			= jdbc:mysql://localhost/community

# user and password to access the db
SQLAuthenticator.username 		= unameForDb
SQLAuthenticator.password 		= passwForDb

# how many simultaneous connections to the database
SQLAuthenticator.poolsize       = 10

# how many statements are issued through a connection until it is dumped
SQLAuthenticator.conStatements  = 1000000

# how long a connection is kept open at the maximum
SQLAuthenticator.conValidityTime = 3600

# sets the database-connection to read-only (no updates will occur)
SQLAuthenticator.readOnly 		= false

# the usertable in the db
SQLAuthenticator.table = freecs_data

# required column-to-property mappings:
SQLAuthenticator.mapping.id         	= ID
SQLAuthenticator.mapping.username   	= FC_USERNAME
SQLAuthenticator.mapping.password    	= FC_PASSWORD

# further column-to-property mappings
SQLAuthenticator.mapping.color      	= FC_COLOR
#SQLAuthenticator.mapping.fadecolor     = FC_FADECOLOR
#SQLAuthenticator.mapping.bgcolor       = FC_BGCOLOR
SQLAuthenticator.mapping.chattime    	= FC_CHATTIME
SQLAuthenticator.mapping.friends     	= FC_FRIENDS
SQLAuthenticator.mapping.lastlogin   	= FC_LASTLOGIN

#SQLAuthenticator.update.friends        = true
#SQLAuthenticator.update.ignorelist     = true


# the rights of the user (integer representing a bitmask see 
# http://freecs.cvs.sourceforge.net/freecs/freecs/src/freecs/interfaces/IUserStates.java
# SQLAuthenticator.mapping.userright   	= FC_USERRIGHT

# custom properties may be accessed inside of the message.set-files 
# (user.homepage would be the token for the first example and
#  user.info would be the one for the second example.
# SQLAuthenticator.mapping.homepage    	= FC_HOMEPAGE
# SQLAuthenticator.mapping.customtitle 	= FC_FIELD1

# write the cookie String into the db during logon
# and set it to "not_logged_in" when the user logs out.
# this can be used for "single-sign-on"
# SQLAuthenticator.mapping.cookie      	= FC_COOKIE



#
# properties for authentication via xmlrpc
#

# url of xmlrpc-server
XmlRpcAuthenticator.server = http://localhost:8081

# handler and function called for login check
#XmlRpcAuthenticator.loginMethod  = community.checkLogin

# handler and function called after user logs out (optional)
# XmlRpcAuthenticator.logoutMethod = community.onChatLogout

# which params the login check function expects:
# session: session-cookie as only parameter
# username: username and password as two parameters
XmlRpcAuthenticator.check  = session

# if authenticator should use a different cookie than FreeCSSession
# its name can be specified here (optional)
# XmlRpcAuthenticator.cookie = PHP_SESSION

